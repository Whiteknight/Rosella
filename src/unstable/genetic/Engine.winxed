class Rosella.Genetic.Engine
{
    function Engine()
    {
    }

    function run(var context, var mutator)
    {
        int num_cells = context.num_cells();
        int num_winners = context.num_winners();
        int threshold = context.fitness_threshold();
        int num_generations = context.num_generations();
        var compare_key = context.get_comparer();

        var cells = mutator.create_initial_cells(num_cells);
        cells = Rosella.Query.as_queryable(cells, true);

        cells = self.run_one_generation(cells, mutator, compare_key, threshold, num_winners);
        for (int i = 1; i < num_generations; i++) {
            cells = self.get_next_generation(context, mutator, num_cells, cells);
            cells = self.run_one_generation(cells, mutator, compare_key, threshold, num_winners);
        }
        return cells.map(function(cell) { return cell.data(); });
    }

    function run_one_generation(var cells, var mutator, var compare_key, int threshold, int num_winners)
    {
        return cells
            .map(function(cell) {
                int f = int(mutator.evaluate(cell.data()));
                return [f, cell];
            })
            //.filter(function(cell) { return int(cell[0]) < threshold; })
            //.foreach(function(cell) { Rosella.IO.sayf("unsorted: %s -> %d", cell[1].data(), cell[0]); })
            .sort(function(x, y) { return compare_key(x[0], y[0]); })
            .take(num_winners)
            //.foreach(function(cell) { Rosella.IO.sayf("Sorted: %s -> %d", cell[1].data(), cell[0]); })
            .map(function(x) { return x[1]; });
    }

    function get_next_generation(var context, var mutator, int num_cells, var cells)
    {
        cells = mutator.get_next_generation(cells.data(), num_cells);
        return Rosella.Query.as_queryable(cells, true);
    }
}
