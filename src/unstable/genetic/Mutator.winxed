class Rosella.Genetic.Mutator
{
    var generator;

    function Mutator(var generator)
    {
        self.generator = generator;
    }

    function create_initial_cells(var cells, int num_cells)
    {
        //Rosella.IO.sayf("mutator num_cells: %d", num_cells);
        for (int i = 0; i < num_cells; i++) {
            cells[i] = self.create_new_cell();
            //if (cells[i] == null)
                //Rosella.IO.sayf("mutator null at %d", i);
        }
        //Rosella.IO.sayf("mutator num_cells: %d", elements(cells));
        return cells;
    }

    function get_next_generation(var winners, int num_cells)
    {
        var cells = [];
        int num_winners = self.include_winners(cells, winners, num_cells);
        self.fill_next_generation(cells, num_winners, num_cells);
        return cells;
    }

    function include_winners(var cells, var winners, int num_cells)
    {
        int num_winners = elements(winners);
        //say("NEXT ROUND WINNERS:");
        for (int i = 0; i < num_winners && i < num_cells; i++) {
            cells[i] = winners[i];
            //say(cells[i].data());
        }
        return num_winners;
    }

    function fill_next_generation(var cells, int existing_count, int total_count)
    {
        for (int i = existing_count; i < total_count; i++)
            cells[i] = self.create_new_cell();
    }

    function create_new_cell()
    {
        var g = self.generator;
        var d = g();
        return new Rosella.Genetic.Cell(d);
    }
}
