namespace Rosella.Json.Parser
{
    function __parse_value(string json, var s, var b, int len, string name, var builder)
    {
        eat_whitespace(s, b);
        int c = get_next(s, b);
        var d;

        if (c == ASCII_NULL)
            Rosella.Parse.error_unknown_char(ASCII_NULL, "json parse value", current_position(len, s, b));
        if (c == ASCII_OPEN_CURLY) {
            builder.start_object(name);
            __parse_object(json, s, b, len, builder);
            builder.end_object();
            return;
        }
        if (c == ASCII_OPEN_BRACKET) {
            builder.start_array(name);
            __parse_array(json, s, b, len, builder);
            builder.end_array();
            return;
        }
        if (c == ASCII_SINGLE_QUOTE || c == ASCII_DOUBLE_QUOTE) {
            string value = Rosella.Parse.parse_string(c, json, s, b, len);
            builder.add_string(name, value);
            return;
        }
        if (codepoint_is_digit(c)) {
            float value = Rosella.Parse.parse_number(c, json, s, b, len);
            builder.add_number(name, value);
            return;
        }
        if (c == ASCII_t) {
            if (get_next(s, b) == ASCII_r &&
                get_next(s, b) == ASCII_u &&
                get_next(s, b) == ASCII_e) {
                builder.add_boolean(name, true);
                return;
            }
            Rosella.Parse.error_unknown_char(c, "json boolean true", current_position(len, s, b));
        }
        if (c == ASCII_f) {
            if (get_next(s, b) == ASCII_a &&
                get_next(s, b) == ASCII_l &&
                get_next(s, b) == ASCII_s &&
                get_next(s, b) == ASCII_e) {
                builder.add_boolean(name, false);
                return;
            }
            Rosella.Parse.error_unknown_char(c, "json boolean false", current_position(len, s, b));
        }
        if (c == ASCII_n) {
            if (get_next(s, b) == ASCII_u &&
                get_next(s, b) == ASCII_l &&
                get_next(s, b) == ASCII_l) {
                builder.add_null(name);
                return;
            }
            Rosella.Parse.error_unknown_char(c, "json null", current_position(len, s, b));
        }
        Rosella.Parse.error_unknown_char(c, "parse json value", current_position(len, s, b));
    }

    function __parse_object(string json, var s, var b, int len, var builder)
    {
        while(have_more_chars(s, b)) {
            eat_whitespace(s, b);
            int c = get_next(s, b);
            if (c == ASCII_SINGLE_QUOTE || c == ASCII_DOUBLE_QUOTE) {
                string str = Rosella.Parse.parse_string(c, json, s, b, len);
                eat_whitespace(s, b);
                c = get_next(s, b);
                if (c != ASCII_COLON)
                    Rosella.Parse.error_unknown_char(c, "json object", current_position(len, s, b));
                __parse_value(json, s, b, len, str, builder);
                eat_whitespace(s, b);
                c = get_next(s, b);
                if (c == ASCII_COMMA)
                    continue;
                if (c == ASCII_CLOSE_CURLY)
                    return;
            } else if (codepoint_is_alpha(c)) {
                unshift_int(s, c);
                string str = Rosella.Parse.parse_alphanumeric(json, s, b, len);
                eat_whitespace(s, b);
                c = get_next(s, b);
                if (c != ASCII_COLON)
                    Rosella.Parse.error_unknown_char(c, "json object", current_position(len, s, b));
                __parse_value(json, s, b, len, str, builder);
                eat_whitespace(s, b);
                c = get_next(s, b);
                if (c == ASCII_COMMA)
                    continue;
                if (c == ASCII_CLOSE_CURLY)
                    return;
            }
            else if (c == ASCII_CLOSE_CURLY)
                return;
            Rosella.Parse.error_unknown_char(c, "json object", current_position(len, s, b));
        }
        Rosella.Parse.error_unknown_char(ASCII_NULL, "json object", current_position(len, s, b));
    }

    function __parse_array(string json, var s, var b, int len, var builder)
    {
        eat_whitespace(s, b);
        int c = get_next(s, b);
        if (c == ASCII_CLOSE_BRACKET)
            return;
        unshift_int(s, c);
        int idx = 0;
        while(have_more_chars(s, b)) {
            __parse_value(json, s, b, len, idx, builder);
            idx++;
            eat_whitespace(s, b);
            c = get_next(s, b);
            if (c == ASCII_CLOSE_BRACKET)
                return;
            if (c == ASCII_COMMA) {
                eat_whitespace(s, b);
                continue;
            }
            Rosella.Parse.error_unknown_char(c, "json array", current_position(len, s, b));
        }
        Rosella.Parse.error_unknown_char(ASCII_NULL, "json array", current_position(len, s, b));
    }
}
