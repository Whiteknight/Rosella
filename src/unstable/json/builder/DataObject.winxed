/* Data Object Builder
    This Builder reads from a string of JSON and outputs a nested structure of
    basic Parrot Hash and ResizablePMCArray objects.
*/
class Rosella.Json.Builder.DataObject : Rosella.Json.Builder
{
    var stack;
    var current;
    var root;

    // Constructor
    function DataObject()
    {
        self.stack = [];
        self.current = null;
        self.root = null;
    }

    // Start Building
    function start() { }

    // Start a new array. Create a ResizablePMCArray
    function start_array(string name)
    {
        var a = [];
        if (self.current != null) {
            if (self.current instanceof 'ResizablePMCArray') {
                //int idx = int(name);
                // TODO: We can safely assume that the value is next in line
                push(self.current, a);
            } else if (self.current instanceof 'Hash') {
                self.current[name] = a;
            }
        } else {
            self.root = a;
        }
        push(self.stack, self.current);
        self.current = a;
    }

    // End the current array
    function end_array()
    {
        self.current = self.stack.pop();
    }

    // Start a new object. Create a Hash
    function start_object(string name)
    {
        var a = {};
        if (self.current != null) {
            if (self.current instanceof 'ResizablePMCArray') {
                //int idx = int(name);
                // TODO: We can safely assume that the value is next in line
                push(self.current, a);
            } else if (self.current instanceof 'Hash') {
                self.current[name] = a;
            }
        } else {
            self.root = a;
        }
        push(self.stack, a);
        self.current = a;
    }

    // End the current object
    function end_object()
    {
        self.current = self.stack.pop();
    }

    // Add a string
    function add_string(string name, string value)
    {
        if (self.current == null)
            self.root = var(value);
        else if (self.current instanceof 'ResizablePMCArray')
            push(self.current, var(value));
        else if (self.current instanceof 'Hash')
            self.current[name] = value;
    }

    // Add an integer
    function add_integer(string name, int value)
    {
        if (self.current == null)
            self.root = var(value);
        else if (self.current instanceof 'ResizablePMCArray')
            push(self.current, var(value));
        else if (self.current instanceof 'Hash')
            self.current[name] = value;
    }

    // Add a floating-point number
    function add_number(string name, float value)
    {
        if (self.current == null)
            self.root = value;
        else if (self.current instanceof 'ResizablePMCArray')
            push(self.current, var(value));
        else if (self.current instanceof 'Hash')
            self.current[name] = value;
    }

    // Add a boolean value
    function add_boolean(string name, int value)
    {
        var v = new 'Boolean'(value);
        if (self.current == null)
            self.root = v;
        else if (self.current instanceof 'ResizablePMCArray')
            push(self.current, v);
        else if (self.current instanceof 'Hash')
            self.current[name] = v;
    }

    // Add a null value
    function add_null(string name)
    {
        if (self.current instanceof 'ResizablePMCArray')
            push(self.current, null);
        else if (self.current instanceof 'Hash')
            self.current[name] = null;
    }

    // Return the created structure
    function get_value() { return self.root; }
}
