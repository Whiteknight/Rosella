namespace Rosella.Reflect.Module
{
    function load(string name)
    {
        var pf_raw = load_packfile(name);
        var pf = new Rosella.Reflect.Module(pf_raw);
        pf.load();
        __set_cached_reflector(pf_raw, "module", pf);
        return pf;
    }
}

class Rosella.Reflect.Module
{
    var pf;
    var functions;
    var classes;
    var namespaces;

    function Module(var pf)
    {
        self.pf = pf;
    }

    function load()
    {
        Rosella.init_bytecode(self.pf, "load");
    }

    function init()
    {
        Rosella.init_bytecode(self.pf, "init");
    }

    function path()
    {
        if (self.pf == null)
            return "<UNINITIALIZED MODULE>";
        string p = string(self.pf);
        if (p == null || p == "")
            // TODO: If we don't have a path, we can try reading the annotations
            // in effect in the caller, and looking for a "file" annotation
            // to use.
            p = "<UNKNOWN>";
        return p;
    }

    function get_string[vtable]()
    {
        return sprintf("%s@%s", [self.path(), self.version()]);
    }

    function version()
    {
        if (self.pf == null)
            return "0.0.0";
        return self.pf.get_version();
    }

    function classes()
    {
        if (self.classes == null)
            self.__read_packfile_entries();
        return self.classes;
    }

    function functions()
    {
        if (self.functions == null)
            self.__read_packfile_entries();
        return self.functions;
    }

    function namespaces()
    {
        if (self.namespaces == null)
            self.__read_packfile_entries();
        return self.namespaces;
    }

    function __read_packfile_entries()
    {
        var all_subs = self.pf.all_subs();
        var all_namespaces = {};
        var all_classes = {};
        var functions = [];

        for (var sub in all_subs) {
            int sub_flags = sub.comp_flags();
            int pf_flags = sub.pf_flags();

            // Don't list subs marked :anon
            if ((pf_flags & PF_FLAG_ANON) != 0)
                continue;

            var ns_pmc = sub.get_namespace();
            var nsname = ns_pmc.get_name();
            nsname.shift(); // drop HLL namespace
            string ns = join(".", nsname);

            if ((sub_flags & SUB_FLAG_METHOD) != 0) {
                if (!(exists all_classes[ns])) {
                    var c = ns_pmc.get_class();
                    all_classes[ns] = Rosella.Reflect.get_class_reflector(c);
                }
            }
            else {
                if (!(exists all_namespaces[ns]))
                    all_namespaces[ns] = ns_pmc;
                all_namespaces[ns].add_sub(sub);
                push(functions, sub);
            }
        }
        self.namespaces = all_namespaces;
        self.classes = all_classes;
        self.functions = functions;
    }
}
