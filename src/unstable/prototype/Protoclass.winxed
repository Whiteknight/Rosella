namespace Rosella { namespace Prototype
{
    class PrototypeClass
    {
        var attrs;

        function init [vtable,nsentry]()
        {
            var cl;
            ${ typeof cl, self };
            var proto;
            ${ getprop proto, 'prototype', cl };
            if (proto == null) {
                proto = {};
                ${ setprop cl, 'prototype', proto };
            }

            var attrs = {};
            attrs['prototype'] = proto;
            self.attrs = attrs;
        }

        function init_pmc [vtable](var sub)
        {
            using Rosella.Prototype.PrototypeClass.init;
            self.*init();
            ${ setprop self, "invoke", sub };
        }

        function find_method[vtable](string name)
        {
            var n = name;
            return function(var obj, var p [slurpy], var n [slurpy,named])
            {
                var f = null;
                if (exists obj.attrs[n]))
                    f = obj.attrs[n];
                else {
                    var prototype = obj.attrs['prototype'];
                    if (exists prototype[n])
                        f = prototype[n];
                }
                if (f == null) {
                    using Rosella.Error.invalid;
                    invalid("Prototype.PrototypeClass", "method not found: " + string(n));
                }
                return obj.*f(p:[flat], n:[flat,named]);
            };
        }

        function get_pmc_keyed[vtable](string name)
        {
            var protoclass = class Rosella.Prototype.PrototypeClass;
            var attrs;
            ${ getattribute attrs, self, protoclass, 'attrs' };
            return attrs[name];
        }

        function set_pmc_keyed[vtable](string name, var value)
        {
            var attrs;
            var protoclass = class Rosella.Prototype.PrototypeClass;
            ${ getattribute attrs, self, protoclass, 'attrs' };
            attrs[name] = value;
        }

        function invoke[vtable](var p [slurpy], var n [slurpy,named])
        {
            var sub = null;
            ${ getprop sub, self, "invoke" };
            if (sub == null) {
                using Rosella.Error.invalid;
                invalid("Prototype.PrototypeClass", "Cannot be invoked");
            }
            return sub(p:[flat], n:[flat,named]);
        }
    }
}

/*
function main()
{
    // Create a class
    var cl = createclass();

    // Instantiate
    var obj1 = new cl;

    // Define and redefine a method
    obj1['test'] = function() { say('test'); };
    obj1.test();
    obj1['test'] = function() { say('test2'); };
    obj1.test();

    // Get the method
    var x = obj1['test'];
    x();

    // Define a method in the prototype
    obj1['proto']['test3'] = function() { say('test3'); };
    obj1.test3();

    // Define it in the instance
    obj1['test3'] = function() { say('test4'); };
    obj1.test3();

    // Create a new instance and use the method in the prototype
    var obj2 = new cl;
    obj2.test3();

    // Call a non existent method
    obj2.notsuchmethod();
}
*/

// End
