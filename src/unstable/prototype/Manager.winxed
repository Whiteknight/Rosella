class Rosella.Prototype.Manager
{
    var library;
    var cloner;

    function Manager(var cloner = new Rosella.Prototype.Manager.ObjectCloner)
    {
        self.library = {};
        self.cloner = cloner;
    }

    function add_prototype(var type, var proto, var sub = null)
    {
        string type_name = Rosella.get_type_name(type);
        var entry = new Rosella.Prototype.Manager.Entry(proto, sub);
        self.library[type_name] = entry;
    }

    // Get a fresh instance
    function instance(var type, var pos [slurpy], var named [slurpy,named])
    {
        string type_name = Rosella.get_type_name(type);
        if (exists self.library[type_name]) {
            var entry = self.library[type_name];
            var proto = entry.prototype;
            var object = self.cloner.clone(proto);
            entry.construct(object, pos, named);
            return object;
        }
        return null;
    }

    // Get a fresh instance, and run it through a specified constructor
    // instead of any already-registered constructors.
    function instance_constructor(var type, var constructor,
            var pos [slurpy], var named [slurpy,named])
    {
        string type_name = Rosella.get_type_name(type);
        if (exists self.library[type_name]) {
            var entry = self.library[type_name];
            var proto = entry.prototype;
            var object = self.cloner.clone(proto);
            if (object != null && constructor != null)
                object.*constructor(pos:[flat], named:[flat,named]);
            return object;
        }
        return null;
    }

    function get_prototype(var type)
    {
        string type_name = Rosella.get_type_name(type);
        return self.library[type_name].prototype;
    }

    function get_constructor(var type)
    {
        string type_name = Rosella.get_type_name(type);
        return self.library[type_name].constructor;
    }
}
