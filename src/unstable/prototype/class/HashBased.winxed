namespace Rosella { namespace Prototype { namespace Class
{
    class HashBased : Rosella.Prototype.Class
    {
        var attrs;

        function init [vtable,nsentry]()
        {
            var mytype;
            ${ typeof mytype, self };
            var proto;
            ${ getprop proto, 'prototype', mytype };

            var attrs = {};
            attrs['prototype'] = proto;
            self.attrs = attrs;
        }

        function find_method[vtable](string name)
        {
            var n = name;
            return function(var obj, var p [slurpy], var n [slurpy,named])
            {
                var f = null;
                if (exists obj.attrs[n])
                    f = obj.attrs[n];
                else {
                    var prototype = obj.attrs['prototype'];
                    if (prototype != null && exists prototype[n])
                        f = prototype[n];
                }
                if (f == null) {
                    using Rosella.Error.invalid;
                    invalid("Prototype.PrototypeClass", "method not found: " + string(n));
                }
                return obj.*f(p:[flat], n:[flat,named]);
            };
        }

        function get_pmc_keyed[vtable](string name)
        {
            var protoclass = class Rosella.Prototype.PrototypeClass;
            var attrs;
            ${ getattribute attrs, self, protoclass, 'attrs' };
            return attrs[name];
        }

        function set_pmc_keyed[vtable](string name, var value)
        {
            var attrs;
            var protoclass = class Rosella.Prototype.PrototypeClass;
            ${ getattribute attrs, self, protoclass, 'attrs' };
            attrs[name] = value;
        }
    }
}}}
