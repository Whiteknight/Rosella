class Rosella.Xml.Document
{
    var xml_header;
    var dtd_header;
    var root;
    var errors;

    function Document() { }

    function add_header(var header)
    {
        if (header instanceof Rosella.Xml.Tag.XmlHeader) {
            if (self.xml_header != null)
                Rosella.Error.error("Document already contains an XML Header");
            self.xml_header = header;
        } else if (header instanceof Rosella.Xml.Tag.DtdHeader) {
            if (self.dtd_header != null)
                Rosella.Error.error("Document already contains a DTD Header");
            self.dtd_header = header;
        }
    }

    function set_documentroot(var root)
    {
        // TODO: What do we do with the other children?
        for (var child in root.children)
        {
            if (child instanceof Rosella.Xml.Tag) {
                self.set_root(child);
                return;
            }
        }
    }

    function set_root(var roottag)
    {
        if (self.root != null)
            Rosella.Error.error("document already has root tag");
        self.root = roottag;
    }

    function get_document_root()
    {
        return self.root;
    }

    function to_xml()
    {
        var sb = new 'StringBuilder';
        if (self.xml_header != null)
            self.xml_header.to_xml_sb(sb, 0);
        if (self.dtd_header != null)
            self.dtd_header.to_xml_sb(sb, 0);
        self.get_document_root().to_xml_sb(sb, 0);
        return sb;
    }

    function write_to_file(string filename)
    {
        string xml = self.to_xml();
        (new Rosella.FileSystem.File(filename)).write_all_text(xml);
    }

    function read_from_file(string filename, int do_validate = false)
    {
        var f = new Rosella.FileSystem.File(filename);
        string xml = f.read_all_text();
        Rosella.Xml.parse(xml, self, do_validate);
    }

    function read_from_string(string xml, int do_validate = false)
    {
        Rosella.Xml.parse(xml, self, do_validate);
    }

    function validate()
    {
        if (self.dtd_header != null && self.dtd_header.dtd_document != null)
            self.errors = self.dtd_header.dtd_document.validate_xml(self);
        return self.errors;
    }

    function is_validated()
    {
        return self.errors != null;
    }

    function is_valid()
    {
        return self.errors != null && elements(self.errors) == 0;
    }

    function visit(var v)
    {
        return v.visit_doc(self);
    }
}

class Rosella.Xml.DtdDocument
{
    var typedefs;

    function DtdDocument() { }

    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return string(sb);
    }

    function write_to_file(string filename)
    {
        string xml = self.to_xml();
        (new Rosella.FileSystem.File(filename)).write_all_text(xml);
    }

    function to_xml_sb(var sb, int indent)
    {
        for (string elem in self.typedefs)
            self.typedefs[elem].to_xml_sb(sb, indent);
    }

    function validate_xml(var xmldoc)
    {
        if (self.typedefs == null)
            return;
        var validator = new Rosella.Xml.Visitor.DtdValidator(self);
        var errs = validator.visit_doc(xmldoc);
        return errs;
    }

    function read_from_file(string filename)
    {
        var f = new Rosella.FileSystem.File(filename);
        if (f.exists()) {
            string dtd = f.read_all_text();
            Rosella.Xml.parse(dtd, self);
        }
        // TODO: Else, list a warning
    }

    function read_from_string(string dtd)
    {
        Rosella.Xml.parse_dtd(dtd, self);
    }

    function add_element_def(string name, var elem)
    {
        if (self.typedefs == null)
            self.typedefs = {};
        if (exists self.typedefs[name])
            Rosella.Error.error("!ELEMENT definitional already provided for '%s'", name);
        self.typedefs[name] = elem;
    }

    function add_element_attribute_def(string elemname, string attrname, string attrtype, string default_value, string default_rule, string fixed_value)
    {
        if (!(exists self.typedefs[elemname]))
            Rosella.Error.error("!ELEMENT type '%s' is not defined", elemname);
        self.typedefs[elemname].add_attribute(attrname, attrtype, default_value, default_rule, fixed_value);
    }
}
