class Rosella.Xml.Tag
{
    var attributes;
    var children;
    var xmlns;
    var name;
    var end_tag;

    function Tag(string xmlns, string name)
    {
        self.xmlns = xmlns;
        self.name = name;
        self.attributes = {};
        self.children = [];
    }

    function add_attribute(string name, string value)
    {
        self.attributes[name] = value;
    }

    function add_child(var child)
    {
        push(self.children, child);
    }

    function add_child_text(string text)
    {
        text = Rosella.String.trim(text);
        if (text != null && text != "")
            self.add_child(new Rosella.Xml.Text(text));
    }

    function set_end(var end_tag)
    {
        self.end_tag = end_tag;
    }

    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return sb;
    }

    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<");
        if (self.xmlns != null) {
            string ns = self.xmlns;
            push(sb, ns);
            push(sb, ":");
        }
        push(sb, self.name);
        self.__to_xml_sb_attrs(sb, indent);
        push(sb, ">");
        self.__to_xml_sb_children(sb, indent + 1);

        push(sb, indent_str);
        push(sb, "</");
        if (self.xmlns != null) {
            string xmlns = self.xmlns;
            push(sb, xmlns);
            push(sb, ":");
        }
        push(sb, self.name);
        push(sb, ">");
    }

    function __to_xml_sb_attrs(var sb, int indent)
    {
        for (string attr_name in self.attributes) {
            string attr = self.attributes[attr_name];
            push(sb, " ");
            push(sb, attr_name);
            push(sb, "='");
            push(sb, attr);
            push(sb, "'");
        }
    }

    function __to_xml_sb_children(var sb, int indent)
    {
        for (var child in self.children)
            child.to_xml_sb(sb, indent);
    }
}

class Rosella.Xml.Tag.EndTag : Rosella.Xml.Tag
{
    var xmlns;
    var name;

    function EndTag(string xmlns, string name)
    {
        self.xmlns = xmlns;
        self.name = name;
    }

    function add_attribute(string name, string value) { Rosella.Error.error("End tags do not have attributes"); }

    function add_child(var child) { Rosella.Error.error("End tags do not have children"); }

    function add_child_text(string text) { Rosella.Error.error("End tags do not contain text"); }

    function set_end(var end_tag) { Rosella.Error.error("End tags do not have end tags"); }

    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "</");
        if (self.xmlns != null) {
            string xmlns = self.xmlns;
            push(sb, xmlns);
            push(sb, ":");
        }
        push(sb, self.name);
        push(sb, ">");
    }
}

class Rosella.Xml.Tag.XmlHeader : Rosella.Xml.Tag
{
    function XmlHeader() { self.Tag("", "?xml"); }

    function to_xml_sb(var sb, int indent)
    {
        push(sb, "<?xml ");
        self.__to_xml_sb_attrs(sb);
        push(sb, "?>");
    }

    function add_child(var child)
    {
        Rosella.Error.error("XML Header tags do not have child tags");
    }

    function add_child_text(string text)
    {
        Rosella.Error.error("XML Header tags may not contain raw text");
    }

    function set_end(var end_tag)
    {
        Rosella.Error.error("XML Header tags do not have closing tags");
    }
}

class Rosella.Xml.Tag.DtdHeader : Rosella.Xml.Tag
{
    var doctype;
    var scope;
    var filename;

    function DtdHeader(string doctype, string scope)
    {
        self.doctype = doctype;
        self.scope = scope;
        self.Tag("", "!DOCTYPE");
    }

    function set_filename(string filename)
    {
        self.filename = filename;
    }

    function to_xml_sb(var sb, int indent)
    {
        push(sb, "<!DOCTYPE ");
        self.__to_xml_sb_attrs(sb);
        push(sb, ">");
    }

    function add_child(var child)
    {
        Rosella.Error.not_implemented("Inline DTD definitions are not yet implemented");
    }

    function add_child_text(string text)
    {
        Rosella.Error.error("DTD Header tags may not contain raw text");
    }

    function set_end(var end_tag)
    {
        Rosella.Error.error("DTD Header tags do not have closing tags");
    }
}

class Rosella.Xml.Tag.Comment
{
    var text;

    function Comment(string comment_text)
    {
        self.text = comment_text;
    }

    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return sb;
    }

    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<!--");
        push(sb, self.text);
        push(sb, "-->");
    }
}

class Rosella.Xml.Tag.DocumentRoot : Rosella.Xml.Tag
{
    function DocumentRoot() { self.children = []; }

}
