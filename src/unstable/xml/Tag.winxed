namespace Rosella.Xml.Tag
{
    function child_tag_finder_name_attrs(string name, var attrs)
    {
        return function(var t) {
            if (t.name != name)
                return false;
            if (attrs != null && elements(attrs) > 0) {
                for (string attr_name in attrs) {
                    if (!(exists t.attributes[attr_name]) || t.attributes[attr_name] != attrs[attr_name])
                        return false;
                }
            }
            return true;
        };
    }

    function child_tag_finder_attrs(var attrs)
    {
        return function(var t) {
            if (attrs != null && elements(attrs) > 0) {
                for (string attr_name in attrs) {
                    if (!(exists t.attributes[attr_name]) || t.attributes[attr_name] != attrs[attr_name])
                        return false;
                }
            }
            return true;
        };
    }
}

/* XML Tag Class
    This class represents an XML tag.
*/
class Rosella.Xml.Tag
{
    var attributes;     // The hash of attribute name/value pairs
    var children;       // The list of all direct children Tags and Text
    var xmlns;          // The XML namespace, if any
    var name;           // The tag name
    var end_tag;        // The ending tag instance
    var pos;            // The position in the parse of this tag

    // Constructor
    function Tag(int pos, string xmlns, string name)
    {
        self.pos = pos;
        self.xmlns = xmlns;
        self.name = name;
        self.attributes = {};
        self.children = new Rosella.Xml.Tag.Collection();
    }

    /* Public Interface Methods
    */

    // Add an attribute name/value pair
    function add_attribute(string ns, string name, string value)
    {
        // TODO: Do what with the namespace?
        self.attributes[name] = value;
    }

    // Add a child tag
    function add_child(var child)
    {
        self.children.add_tag(child);
    }

    // Add child text
    function add_child_text(string text)
    {
        text = Rosella.String.trim(text);
        if (text != null && text != "")
            self.add_child(new Rosella.Xml.Text(text));
    }

    // Set the end tag
    function set_end(var end_tag)
    {
        self.end_tag = end_tag;
    }

    // Convert this tag and contents to XML
    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return sb;
    }

    function get_inner_xml()
    {
        var sb = new 'StringBuilder';
        self.__to_xml_sb_children(sb, 0);
        return Rosella.String.trim(sb);
    }

    // Convert this tag and contents to XML, adding it to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<");
        string ns = self.xmlns;
        if (ns != "") {
            push(sb, ns);
            push(sb, ":");
        }
        push(sb, self.name);
        self.__to_xml_sb_attrs(sb, indent);
        push(sb, ">");
        self.__to_xml_sb_children(sb, indent + 1);

        push(sb, indent_str);
        push(sb, "</");
        if (ns != "") {
            push(sb, ns);
            push(sb, ":");
        }
        push(sb, self.name);
        push(sb, ">");
    }

    function get_children(var f = null)
    {
        if (f == null)
            return new Rosella.Xml.Tag.Collection(self.children.data);
        var c = new Rosella.Xml.Tag.Collection();
        self.get_children_collection(f, c);
        return c;
    }

    function get_children_collection(var f, var c)
    {
        if (!self.children.has_more())
            return;
        for (var child in self.children.data) {
            if (f == null)
                c.add_tag(child);
            else {
                 var result = f(child);
                 if (result)
                    c.add_tag(child);
            }
        }
    }

    function get_children_named(string n, var attrs [slurpy,named])
    {
        return self.get_children(Rosella.Xml.Tag.child_tag_finder_name_attrs(n, attrs));
    }

    function get_children_by_attr(var attrs)
    {
        return self.get_children(Rosella.Xml.Tag.child_tag_finder_attrs(attrs));
    }

    function first_child(string name = null, var attrs [slurpy,named])
    {
        if (name == null) {
            if (self.children.has_more())
                return self.children.data[0];
            return null;
        }

        var children = self.get_children_named(name, attrs:[flat,named]);
        if (!children.has_more())
            return null;
        return children.data[0];
    }


    /* Private Helper Methods
    */

    // Convert attributes to XML, adding to the StringBuilder
    function __to_xml_sb_attrs(var sb, int indent)
    {
        for (string attr_name in self.attributes) {
            string attr = self.attributes[attr_name];
            push(sb, " ");
            push(sb, attr_name);
            push(sb, "='");
            push(sb, attr);
            push(sb, "'");
        }
    }

    // Convert all children tags to XML, adding them to the StringBuilder
    function __to_xml_sb_children(var sb, int indent)
    {
        for (var child in self.children.data)
            child.to_xml_sb(sb, indent);
    }
}

// An ending/closing tag
class Rosella.Xml.Tag.EndTag
{
    var xmlns;  // The XML namespace, if any
    var name;   // The tag name
    var pos;    // The position of the end tag in the XML

    // Constructor
    function EndTag(int pos, string xmlns, string name)
    {
        self.pos = pos;
        self.xmlns = xmlns;
        self.name = name;
    }

    // End tags do not have attributes
    function add_attribute(string ns, string name, string value) { Rosella.Error.error("End tags do not have attributes"); }

    // End tags do not contain children
    function add_child(var child) { Rosella.Error.error("End tags do not have children"); }

    // End tags cannot contain text
    function add_child_text(string text) { Rosella.Error.error("End tags do not contain text"); }

    // End tags do not themselves have end tags
    function set_end(var end_tag) { Rosella.Error.error("End tags do not have end tags"); }

    // Convert this to XML, adding it to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "</");
        string xmlns = self.xmlns;
        if (xmlns != "") {
            push(sb, xmlns);
            push(sb, ":");
        }
        push(sb, self.name);
        push(sb, ">");
    }
}

/* XML Header tag
    For XML headers with <?xml ... ?> syntax
*/
class Rosella.Xml.Tag.XmlHeader : Rosella.Xml.Tag
{
    // Constructor
    function XmlHeader(int pos) { self.Tag(pos, "", "?xml"); }

    // Convert to XML, adding to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        push(sb, "<?xml ");
        self.__to_xml_sb_attrs(sb, indent);
        push(sb, "?>");
    }

    // XML Header tags contain no children
    function add_child(var child) { Rosella.Error.error("XML Header tags do not have child tags"); }

    // XML Header tags contain no text
    function add_child_text(string text) { Rosella.Error.error("XML Header tags may not contain raw text"); }

    // XML Header tags contain no end tags
    function set_end(var end_tag) { Rosella.Error.error("XML Header tags do not have closing tags"); }
}


/* DTD Header Tag
    For tags with <!DOCTYPE ... > syntax
*/
class Rosella.Xml.Tag.DtdHeader : Rosella.Xml.Tag
{
    var dtd_document;       // The DTD Document
    var doctype;            // The doctype/root name
    var scope;              // The scope of the document. May be SYSTEM, PUBLIC or "" (embedded/none)
    var filename;           // If SYSTEM or PUBLIC, the location

    // Constructor
    function DtdHeader(int pos, string doctype)
    {
        self.doctype = doctype;
        self.Tag(pos, "", "!DOCTYPE");
    }

    // Get the DtdDocument object, generating it if necessary
    function get_dtd_document()
    {
        if (self.dtd_document != null)
            return self.dtd_document;
        string scope = self.scope;
        var dtd_document;
        // TODO: If we have a SYSTEM or PUBLIC DTD, the <?xml ?> header should have
        // a standalone="no" attribute
        // TODO: If we have SYSTEM or PUBLIC, we may still have inline additions that
        // override those found in the document. We need to make sure we merge
        switch (scope) {
            case "SYSTEM":
                dtd_document = Rosella.Xml.read_dtd_file(self.filename);
                break;
            case "PUBLIC":
                // TODO: This is online somewhere, go fetch it
                Rosella.Error.not_implemented(__FUNCTION__ + " PUBLIC");
            default:
                dtd_document = new Rosella.Xml.DtdDocument();
                break;
        }
        self.dtd_document = dtd_document;
        return dtd_document;
    }

    // Set the scope. May be "SYSTEM" (and filename), "PUBLIC" (and location) or
    // empty.
    function set_scope(string scope, string filename)
    {
        self.scope = scope;
        self.filename = filename;
    }

    // Convert to XML, adding it to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<!DOCTYPE ");
        push(sb, self.doctype);
        push(sb, " ");
        string scope = self.scope;
        push(sb, scope);
        push(sb, " ");
        switch (scope) {
            case "SYSTEM":
                push(sb, "'");
                push(sb, self.filename);
                push(sb, "'");
                break;
            case "PUBLIC":
                push(sb, "'");
                push(sb, self.filename);
                push(sb, "'");
                // TODO: The rest of it
                break;
        }
        if (self.dtd_document != null) {
            push(sb, " [");
            self.dtd_document.to_xml_sb(sb, indent + 1);
            push(sb, indent_str);
            push(sb, "]");
        } else
            push(sb, indent_str);
        push(sb, ">");
    }

    // Has no children
    function add_child(var child) { Rosella.Error.error("Inline DTD do not contain children"); }

    // Has no text
    function add_child_text(string text) { Rosella.Error.error("DTD Header tags may not contain raw text"); }

    // Has no ending tag
    function set_end(var end_tag) { Rosella.Error.error("DTD Header tags do not have closing tags"); }
}

/* A DTD !ELEMENT tag
*/
class Rosella.Xml.Tag.DtdElement
{
    var children;           // The list of allowed children tags
    var children_rule;      // rule for children tags
    var attlist;            // The !ATTLIST with allowed attributes
    var name;               // The name of the tag
    var pos;                // The position of this declaration, in the XML

    // Constructor
    function DtdElement(int pos, string name)
    {
        self.pos = pos;
        self.children = {};
        self.name = name;
    }

    // Add an allowed child type, with quantifier/modifier
    function add_child_type(string name, string modifier)
    {
        // TODO: Handle #CDATA and #PCDATA specially.
        self.children[name] = modifier;
    }

    // Add an attribute declaration
    function add_attribute(string attrname, string attrtype, string default_value, string default_rule, string fixed_value)
    {
        if (self.attlist == null)
            self.attlist = new Rosella.Xml.Tag.DtdAttlist(self.name);
        self.attlist.add_attr(attrname, attrtype, default_value, default_rule, fixed_value);
    }

    // Set the rule for children. May be EMPTY or ANY, or none
    function set_child_rule(string rule)
    {
        self.children_rule = rule;
    }

    // Convert this to XML, adding to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<!ELEMENT ");
        push(sb, self.name);
        push(sb, " (");
        string separator = "";
        for (string child in self.children) {
            push(sb, separator);
            push(sb, child);
            push(sb, self.children[child]);
            separator = ",";
        }
        push(sb, ")>");
        if (self.attlist != null)
            self.attlist.to_xml_sb(sb, indent);
    }

    function validate_attribute(string name, string value)
    {
        if (self.attlist == null)
            return true;
        self.attlist.validate_attribute(name, value);
    }

    function validate_child(var child)
    {
        if (self.children_rule != null) {
            string children_rule = self.children_rule;
            if (children_rule == "ANY")
                return true;
            if (children_rule == "EMPTY")
                return false;
        }
        if (self.children == null)
            return true;
        string name = child.name;
        if (exists self.children[name])
            return true;        // TODO: Check quantifiers, etc
        return false;
    }
}

/* DTD !ATTLIST Tag
    This tag represents an !ATTLIST tag in the DTD
*/
class Rosella.Xml.Tag.DtdAttlist
{
    var elemname;       // The name of the element that this rule applies to
    var attrnames;      // The list of attribute names
    var attrtypes;      // The list of attribute types
    var default_values; // The list of default value strings
    var default_rules;  // The list of defaulting rules
    var fixed_values;   // The list of fixed values

    // Constructor
    function DtdAttlist(string elemname)
    {
        self.elemname = elemname;
        self.attrtypes = []; // This might need to be non-string for enumerated types

        // For string arrays, make sure to use an RSA instead of RPA for performance
        string attrnames[] = [];
        self.attrnames = attrnames;

        string default_values[] = [];
        self.default_values = default_values;

        string default_rules[] = [];
        self.default_rules = default_rules;

        string fixed_values[] = [];
        self.fixed_values = fixed_values;
    }

    // Add an attribute declaration
    function add_attr(string attrname, string typename, string default_value, string default_rule, string fixed_value)
    {
        push(self.attrnames, attrname);

        // TODO: Validate against a list of possible types:
        // CDATA, ID, IDREF, IDREFS, NMTOKEN, NMTOKENS, ENTITY, ENTITIES, NOTATION
        // or an alternation "(foo|bar|baz)" of these things.
        push(self.attrtypes, typename);
        push(self.default_values, default_value);

        switch (default_rule) {
            case "REQUIRED":
            case "IMPLIED":
            case "FIXED":
            case "":
                break;
            default:
                Rosella.Error.error("ATTLIST default rule must be one of REQUIRED IMPLIED or FIXED ('%s')", default_rule);
        }
        push(self.fixed_values, fixed_value);
        push(self.default_rules, default_rule);
    }

    // Convert to XML, adding to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<!ATTLIST ");
        push(sb, self.elemname);
        for (int i = 0; i < elements(self.attrnames); i++) {
            push(sb, " ");
            push(sb, self.attrnames[i]);
            push(sb, " ");
            push(sb, self.attrtypes[i]);
            string default_value = self.default_values[i];
            if (default_value != null && default_value != "") {
                push(sb, " '");
                push(sb, default_value);
                push(sb, "'");
            }
            string default_rule = self.default_rules[i];
            if (default_rule != null && default_rule != "") {
                push(sb, " #");
                push(sb, default_rule);
                if (default_rule == "FIXED") {
                    push(sb, " '");
                    string fixed_value = self.fixed_values[i];
                    push(sb, fixed_value);
                    push(sb, "'");
                }
            }
        }
        push(sb, ">");
    }
}

/* Comment
    With <!-- ... --> syntax
*/
class Rosella.Xml.Tag.Comment
{
    var text;   // The text of the comment
    var pos;    // The position of the comment in the XML string

    // Constructor
    function Comment(int pos, string comment_text)
    {
        self.text = comment_text;
        self.pos;
    }

    // Convert to XML
    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return sb;
    }

    // Convert to XML, adding to the StringBuilder
    function to_xml_sb(var sb, int indent)
    {
        string indent_str = indent_level(indent);
        push(sb, indent_str);
        push(sb, "<!--");
        push(sb, self.text);
        push(sb, "-->");
    }
}

/* DocumentRoot
    This "tag" represents a hidden document root, for cases when we have multiple
    top-level tags (one root data tag and multiple comments, ideally). Used for
    parsing and discarded.
*/
class Rosella.Xml.Tag.DocumentRoot : Rosella.Xml.Tag
{
    // Constructor
    function DocumentRoot() { self.children = new Rosella.Xml.Tag.Collection(); }
}
