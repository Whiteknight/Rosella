class Rosella.Xml.Tag
{
    var attributes;
    var children;
    var name;
    var end_tag;

    function Tag(string name)
    {
        self.name = name;
        self.attributes = {};
        self.children = [];
    }

    function add_attribute(string name, string value)
    {
        self.attributes[name] = value;
    }

    function add_child(var child)
    {
        push(self.children, child);
    }

    function add_child_text(string text)
    {
        text = Rosella.String.trim(text);
        if (text != null && text != "")
            self.add_child(new Rosella.Xml.Text(text));
    }

    function set_end(var end_tag)
    {
        self.end_tag = end_tag;
    }

    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return sb;
    }

    function to_xml_sb(var sb, int indent)
    {
        string indent_str = "\n" + repeat_string(INDENT_STR, indent);
        push(sb, indent_str);
        push(sb, "<");
        push(sb, self.name);
        self.__to_xml_sb_attrs(sb, indent);
        push(sb, ">");
        self.__to_xml_sb_children(sb, indent + 1);
        push(sb, indent_str);
        push(sb, "</");
        push(sb, self.name);
        push(sb, ">");
    }

    function __to_xml_sb_attrs(var sb, int indent)
    {
        for (string attr_name in self.attributes) {
            string attr = self.attributes[attr_name];
            push(sb, " ");
            push(sb, attr_name);
            push(sb, "='");
            push(sb, attr);
            push(sb, "'");
        }
    }

    function __to_xml_sb_children(var sb, int indent)
    {
        for (var child in self.children)
            child.to_xml_sb(sb, indent);
    }
}

class Rosella.Xml.Tag.XmlHeader : Rosella.Xml.Tag
{
    function XmlHeader() { self.Tag(""); }

    function to_xml_sb(var sb, int indent)
    {
        push(sb, "<?");
        push(sb, self.name);
        self.__to_xml_sb_attrs(sb);
        push(sb, "?>");
    }
}

class Rosella.Xml.Tag.Comment
{
    var text;

    function Comment(string comment_text)
    {
        self.text = comment_text;
    }

    function to_xml()
    {
        var sb = new 'StringBuilder';
        self.to_xml_sb(sb, 0);
        return sb;
    }

    function to_xml_sb(var sb, int indent)
    {
        string indent_str = "\n" + repeat_string(INDENT_STR, indent);
        push(sb, indent_str);
        push(sb, "<!--");
        push(sb, self.text);
        push(sb, "-->");
    }
}
