/* Parser Utilities Library
    This library contains several utilities for parsing text.
*/
// TODO: StringBuilder appears to be a very inefficient mechanism for this use
// pattern.
namespace Rosella.Parse
{
    // Setup all the data structures we need for a parse. These structures
    // Should be passed to all routines used to parse this string.
    function setup_parse(string _str)
    {
        int s[] = [];
        var b = get_iterator(var(_str));
        int len = length(_str);
        return _str, s, b, len;
    }

    // Parse out a quoted sequence. The opening quote should already be read
    // out. The parse continues until the next non-escaped quote q. The contents
    // of the quote are returned as a string.
    function parse_quoted(int q, string xml, var s, var b, int len)
    {
        var sb = new 'StringBuilder';
        while (have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (c == q)
                break;
            if (c == ASCII_BACKSLASH)
                c = get_next(s, b);
            add_char_to_builder(sb, c);
        }
        return sb;
    }

    // Parse out a quoted sequence. This is the same as parse_quoted, except
    // multiple different C-style escape sequences such as \n \l \r \b and \t
    // are parsed and converted into the appropriate ASCII values in the string.
    function parse_string(int q, string _str, var s, var b, int len)
    {
        var sb = new 'StringBuilder';
        while(have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (c == ASCII_BACKSLASH) {
                c = get_next(s, b);
                switch (c) {
                    case ASCII_b:
                        add_char_to_builder(sb, ASCII_BACKSPACE);
                        break;
                    case ASCII_f:
                        add_char_to_builder(sb, ASCII_LINE_FEED);
                        break;
                    case ASCII_n:
                        push(sb, "\n");
                        break;
                    case ASCII_r:
                        add_char_to_builder(sb, ASCII_CARRIAGE_RETURN);
                        break;
                    case ASCII_t:
                        add_char_to_builder(sb, ASCII_TAB);
                        break;
                    case ASCII_u:
                    case ASCII_x:
                        int x = parse_hexadecimal(_str, s, b, len, 4);
                        add_char_to_builder(sb, x);
                        break;
                    case ASCII_o:
                        int o = parse_octal(_str, s, b, len, 3);
                        add_char_to_builder(sb, o);
                        break;
                    default:
                        add_char_to_builder(sb, c);
                        break;
                }
                continue;
            }
            if (c == q)
                break;
            add_char_to_builder(sb, c);
        }
        return sb;
    }

    // Parse an alphanumeric sequence containing any lower and uppercase letters
    // and digits
    function parse_alphanumeric(string _str, var s, var b, int len)
    {
        var sb = new 'StringBuilder';
        while(have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (!codepoint_is_alphanumeric(c)) {
                unshift_int(s, c);
                break;
            }
            add_char_to_builder(sb, c);
        }
        string result = string(sb);
        return result;
    }

    // Parse out a sequence of upper and lower case letters
    function parse_alpha(string _str, var s, var b, int len)
    {
        var sb = new 'StringBuilder';
        while(have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (!codepoint_is_alpha(c)) {
                unshift_int(s, c);
                break;
            }
            add_char_to_builder(sb, c);
        }
        string result = string(sb);
        return result;
    }

    // Parse out a floating point number with optional scientific notation.
    function parse_number(int c, string _str, var s, var b, int len)
    {
        int have_e = false;
        int have_dot = false;
        int have_sign = false;
        var sb = new 'StringBuilder';
        add_char_to_builder(sb, c);
        while (have_more_chars(s, b)) {
            int d = get_next(s, b);
            if (!have_sign && (d == ASCII_PLUS|| d == ASCII_DASH)) {
                have_sign = true;
                add_char_to_builder(sb, d);
            }
            else if (codepoint_is_digit(d)) {
                add_char_to_builder(sb, d);
                continue;
            }
            else if (!have_e && (d == ASCII_e || d == ASCII_E)) {
                have_e = true;
                have_sign = false;
                add_char_to_builder(sb, ASCII_e);
            }
            else if (!have_e && !have_dot && d == ASCII_PERIOD) {
                have_dot = true;
                add_char_to_builder(sb, ASCII_PERIOD);
            }
            else {
                unshift_int(s, d);
                break;
            }
        }
        if (have_dot) {
            float f_value = float(string(sb));
            return f_value;
        } else {
            int i_value = int(string(sb));
            return i_value;
        }
    }

    // Parse out a hexadecimal number. Return the integer value
    function parse_hexadecimal(string _str, var s, var b, int len, int maxchars = 8)
    {
        int value = 0;
        int chars = 0;
        while(have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (!codepoint_is_hexadecimal(c)) {
                unshift_int(s, c);
                break;
            }
            int i = hex_codepoint_to_integer(c);
            value = (value << 4) | i;
            chars++;
            if (chars >= maxchars)
                break;
        }
        return value;
    }

    // Parse out a number in decimal digits. Return the integer value.
    function parse_integer(string _str, var s, var b, int len, int maxchars = 9)
    {
        int value = 0;
        int chars = 0;
        while(have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (!codepoint_is_digit(c)) {
                unshift_int(s, c);
                break;
            }
            int i = dec_codepoint_to_integer(c);
            value = (value * 10) | i;
            chars++;
            if (chars >= maxchars)
                break;
        }
        return value;
    }

    // Parse out a number in octal. Return the integer value
    function parse_octal(string _str, var s, var b, int len, int maxchars = 10)
    {
        int value = 0;
        int chars = 0;
        while(have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (!codepoint_is_octal(c)) {
                unshift_int(s, c);
                break;
            }
            int i = oct_codepoint_to_integer(c);
            value = (value << 3) | i;
            chars++;
            if (chars >= maxchars)
                break;
        }
        return value;
    }

    // Throw an error when we've received an unexpected character.
    function error_unknown_char(int c, string context, int pos)
    {
        if (c == ASCII_NULL)
            Rosella.Error.error("Unexpected end of input while parsing %s at position %d", context, pos);
        Rosella.Error.error("Unexpected token '%s' in %s at position %d", chr(c), context, pos);
    }

    // Parse out all text until the next occurance of the marker. Return the
    // string and the marker received. The returned marker will be ASCII_NULL if
    // we've reached the end of string before finding the marker.
    function parse_until(string _str, var s, var b, int len, int marker)
    {
        var sb = new 'StringBuilder';
        int c = ASCII_NULL;
        while (have_more_chars(s, b)) {
            c = get_next(s, b);
            if (c == marker)
                break;
            if (c == ASCII_NULL)
                break;
            add_char_to_builder(sb, c);
        }
        return sb, c;
    }

    // Parse out all text into the occurance of either of two possible markers.
    // Return the string and the marker received. If we reach the end of string
    // before finding either marker, return ASCII_NULL as the marker found
    function parse_until_either(string _str, var s, var b, int len, int ma, int mb)
    {
        var sb = new 'StringBuilder';
        int c = ASCII_NULL;
        while (have_more_chars(s, b)) {
            c = get_next(s, b);
            if (c == ma || c == mb)
                break;
            if (c == ASCII_NULL)
                break;
            add_char_to_builder(sb, c);
        }
        return sb, c;
    }

    // Parse out the remainder of the string
    function parse_remainder(string _str, var s, var b, int len)
    {
        // TODO: If s is empty, we should be able to read the rest of the
        // string out of b more easily.
        var sb = new 'StringBuilder';
        while (have_more_chars(s, b)) {
            int c = get_next(s, b);
            if (c == ASCII_NULL)
                break;
            add_char_to_builder(sb, c);
        }
        return sb;
    }

    // Parse a repeated character d. Return the number of times the character
    // is repeated
    function parse_repeat(int d, string _str, var s, var b, int len)
    {
        int num = 0;
        int c = d;
        while(c == d) {
            num++;
            c = get_next(s, b);
        }
        if (c != ASCII_NULL)
            unshift_int(s, c);
        return num;
    }
}
