class Rosella.Decorate.Decorator
{
    var target;
    var method_cache;

    function __setup_decorator(var target)
    {
        var self_class = class Rosella.Decorate.Decorator;
        setattribute_private(self, self_class, "target", target);
    }

    function get_attr_str[vtable](string name)
    {
        var self_class = class Rosella.Decorate.Decorator;
        var target = getattribute_private(self, self_class, "target");
        var value = target.*name;
        return value;
    }

    function set_attr_str[vtable](string name, var value)
    {
        var self_class = class Rosella.Decorate.Decorator;
        var target = getattribute_private(self, self_class, "target");
        target.*name = value;
    }

    function find_method[vtable](string name)
    {
        var decorator_class = class Rosella.Decorate.Decorator;
        var self_class = typeof(self);
        var method_cache = getattribute_private(self, decorator_class, "method_cache");

        // First, check the cache
        // TODO: I don't know if method_cache saves us anything. target
        //       probably already caches, so we're just duplicating a
        //       cache up one level.
        if (method_cache != null && exists method_cache[name])
            return method_cache[name];
        var method = null;

        var self_parents = self_class.inspect("all_parents");
        for (var parent in self_parents) {
            var methods = parent.inspect("methods");
            if (exists methods[name]) {
                method = methods[name];
                break;
            }
        }

        // find_method will throw an exception if the method is not found.
        // Call it directly, and let what happens happen.
        if (method == null && self.target != null)
            method = find_method(self.target, name);
        if (method == null)
            return null;
        if (method_cache != null)
            method_cache[name] = method;
        return method;
    }
}
