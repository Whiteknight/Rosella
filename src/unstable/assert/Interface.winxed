namespace Rosella { namespace Assert
{
    /* Contract class to verify that the given type satisfies the public
       interface of a base class.
    */
    class InterfaceContract
    {
        var base_type_name;
        var base_filter;

        // TODO: Allow to specify optional inclusion/exclusion criteria
        function InterfaceContract(string type_name, var base_filter)
        {
            self.base_type_name = type_name;
            self.base_filter = base_filter;
        }

        function verify_type(var type)
        {
            if (!Rosella.Assert.is_active())
                return;

            var type_class = Rosella.get_type_class(type);
            string type_name = Rosella.get_type_name(type);
            var methods = type_class.methods();
            self.__verify_methods(type_name, methods);
        }

        function verify_object(var obj)
        {
            var type = typeof(obj);
            self.verify_type(type);
        }

        function __is_valid(string name)
        {
            var filter = self.base_filter;
            if (filter == null)
                return true;
            return filter(name);
        }

        function __verify_methods(string type_name, var method_list)
        {
            Rosella.Error.must_subclass(__CLASS__);
        }
    }

    namespace InterfaceContract
    {
        class Type : Rosella.Assert.InterfaceContract
        {
            var base_methods;
            function Type(var type, var filter [optional], int has_filter [opt_flag])
            {
                var type_class = Rosella.get_type_class(type);
                self.base_methods = type_class.methods();
                string type_name = Rosella.get_type_name(type);
                self.InterfaceContract(type_name, has_filter ? filter : null);
            }

            function __verify_methods(string type_name, var method_list)
            {
                for (string meth_name in self.base_methods) {
                    if (self.__is_valid(meth_name) && !(exists method_list[meth_name]))
                        Rosella.Assert.assert_fail("Interface method %s.%s not found in type %s", self.base_type_name, meth_name, type_name);
                }
            }
        }

        class List : Rosella.Assert.InterfaceContract
        {
            var method_list;
            function List(string type_name, var list, var filter [optional], int has_filter [opt_flag])
            {
                self.method_list = list;
                self.InterfaceContract(type_name, has_filter ? filter : null);
            }

            function __verify_methods(string type_name, var method_list)
            {
                for (string meth_name in self.method_list) {
                    if (self.__is_valid(meth_name) && !(exists method_list[meth_name]))
                        Rosella.Assert.assert_fail("Interface method %s.%s not found in type %s", self.base_type_name, meth_name, type_name);
                }
            }
        }
    }
}}
