$include_const "src/unstable/file/Constants.pasm";

namespace Rosella
{
    namespace File
    {
        function get_os_pmc()
        {
            loadlib("os");
            var os = new 'OS';
            while(1)
                return os;
        }

        function is_file(string path)
        {
            var stat = get_os_pmc().stat(path);
            int mode = stat[2];
            int isfile = 0;
            ${ band isfile, mode, STAT_ISREG };
            return isfile;
        }

        function is_directory(string path)
        {
            var stat = get_os_pmc().stat(path);
            int mode = stat[2];
            int isdir = 0;
            ${ band isdir, mode, STAT_ISDIR };
            return isdir;
        }
    }
}

namespace Rosella { namespace File
{
    class File
    {
        var filename;

        function File(string filepath)
        {
            self.filename = filepath;
        }

        function exists()
        {
            using Rosella.File.get_os_pmc;
            return get_os_pmc().exists(self.filename);
        }

        function delete()
        {
            using Rosella.File.get_os_pmc;
            get_os_pmc().rm(self.filename);
        }

        function rename(string new_name)
        {
            using Rosella.File.get_os_pmc;
            get_os_pmc().rename(self.filename, new_name);
            self.filename = new_name;
        }

        function open_read()
        {
            var filehandle = new 'FileHandle';
            filehandle.open(self.filename, "r");
            return filehandle;
        }

        function open_write()
        {
            var filehandle = new 'FileHandle';
            filehandle.open(self.filename, "w");
            return filehandle;
        }

        function read_all_text()
        {
            var filehandle = self.open("r");
            string text = filehandle.readall();
            filehandle.close();
            return text;
        }

        function read_all_lines()
        {
            string text = self.read_all_text();
            return split("\n", text);
        }

        function write_all_text(string text)
        {
            var filehandle = self.open("w");
            filehandle.print(text);
            filehandle.close();
        }

        function write_all_lines(var lines)
        {
            var text = join("\n", lines);
            self.write_all_text(text);
        }

        function append_text(string text)
        {
            var filehandle = self.open("a");
            filehandle.print(text);
            filehandle.close();
        }

        function copy(string dest)
        {
            var file = new Rosella.File.File(dest);
            string txt = self.read_all_text();
            file.write_all_text(txt);
            return file;
        }
    }
}}
