$include_const "src/unstable/file/Constants.pasm";

namespace Rosella { namespace File
{
    class Walker
    {
        var root_path;
        var os;

        function Walker(string root_path)
        {
            self.root_path = root_path;
            using Rosella.File.get_os_pmc;
            self.os = get_os_pmc();
        }

        function walk(var visitor [optional], int has_v [opt_flag])
        {
            if (!has_v)
                visitor = new Rosella.File.Visitor.FileList();
            self.visit_dir(self.root_path, "", visitor);
            return visitor.result();
        }

        // Get a list of test files from a directory. Allow recursion into
        // subdirectories, if requested.
        function visit_dir(string path, string name, var visitor)
        {
            visitor.begin_folder(path, name);
            var contents_raw = self.os.readdir(path);

            for (string file in contents_raw) {
                string entry = path + "/" + file;
                int isfile = 0;
                int isdir = 0;
                :(isfile, isdir) = self.get_file_details(entry);

                // Don't follow the "special" files
                if (file == "." || file == "..")
                    continue;

                if (isfile == STAT_ISREG)
                    visitor.visit(entry);

                if (isdir == STAT_ISDIR)
                    self.visit_dir(entry, file, visitor);
            }
            visitor.end_folder(path, name);
        }

        function get_file_details(string entry)
        {
            var stat = self.os.stat(entry);
            int mode = stat[2];
            int isdir = 0;
            ${ band isdir, mode, STAT_ISDIR };
            int isfile = 0;
            ${ band isfile, mode, STAT_ISREG };
            return isfile, isdir;
        }
    }
}}
