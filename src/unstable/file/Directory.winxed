$include_const "src/unstable/file/Constants.pasm";

namespace Rosella { namespace File
{
    namespace Directory
    {
        function current_directory()
        {
            using Rosella.File.get_os_pmc;
            string cwd = get_os_pmc().cwd();
            return new Rosella.File.Directory(cwd);
        }

        function walk(string dirname, var visitor [optional], int has_v [opt_flag])
        {
            if (!has_v)
                visitor = new Rosella.File.Visitor.FileList();
            private_visit_dir(dirname, "", visitor);
            return visitor.result();
        }

        // Get a list of test files from a directory. Allow recursion into
        // subdirectories, if requested.
        function private_visit_dir(string path, string name, var visitor)
        {
            using Rosella.File.is_file;
            using Rosella.File.is_directory;
            using Rosella.File.get_os_pmc;

            visitor.begin_folder(path, name);
            var contents_raw = get_os_pmc().readdir(path);

            for (string file in contents_raw) {
                string entry = path + "/" + file;

                // Don't follow the "special" files
                if (file == "." || file == "..")
                    continue;

                int isfile = is_file(entry);
                if (isfile == STAT_ISREG)
                    visitor.visit(entry);
                else {
                    int isdir = is_directory(entry);
                    if (isdir == STAT_ISDIR)
                        private_visit_dir(entry, file, visitor);
                }
            }
            visitor.end_folder(path, name);
        }
    }

    class Directory
    {
        var path;

        function Directory(string path)
        {
            self.path = path;
        }

        function exists()
        {
            using Rosella.File.get_os_pmc;
            get_os_pmc().exists(self.path);
        }

        function delete(int recursive [optional], int has_r [opt_flag])
        {
            // TODO
        }

        function create()
        {
            using Rosella.File.get_os_pmc;
            var os = get_os_pmc();
            if (!os.exists(self.path))
                os.mkdir(self.path, 0);
        }

        function rename(string new_path)
        {
            using Rosella.File.get_os_pmc;
            get_os_pmc().rename(self.path, new_path);
            self.path = new_path;
        }

        function get_files()
        {
            using Rosella.File.get_os_pmc;
            var file_names = get_os_pmc().readdir(self.path);
            var files = [];
            using Rosella.File.is_file;
            for (string file_name in file_names) {
                if (is_file(file_name))
                    push(files, new Rosella.File.File(file_name));
            }
            return files;
        }

        function get_subdirectories()
        {
            using Rosella.File.get_os_pmc;
            var names = get_os_pmc().readdir(self.path);
            var dirs = [];
            using Rosella.File.is_directory;
            for (string name in names) {
                if (is_directory(name))
                    push(dirs, new Rosella.File.Directory(name));
            }
            return dirs;
        }
    }
}}
