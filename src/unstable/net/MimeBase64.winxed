/* MIME Base 64 Encoder
    Converts arbitrary binary data into MIME Base 64 encoded output string. The
    encoded string is a printable code using only alphanumeric characters, '+'
    and '/'. This format is suitable for transmission over text-based protocols
    such as HTTP.
*/
class Rosella.Net.MimeBase64
{
    const string PRINTABLE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var eight_to_six;
    var six_to_eight;

    // Constructor
    function MimeBase64()
    {
        self.initialize();
    }

    // Initialize this object with the mapping arrays
    function initialize()
    {
        if (self.eight_to_six != null && self.six_to_eight != null)
            return;

        var six_to_eight = new 'FixedIntegerArray';
        six_to_eight =: 64;
        var eight_to_six = new 'FixedIntegerArray';
        eight_to_six =: 256;

        eight_to_six[0] = 0;
        for (int i = 1; i < 256; i++)
            eight_to_six[i] = -1;

        for (int six = 0; six < 64; six++) {
            int eight = get_codepoint(PRINTABLE_CHARS, six);
            eight_to_six[eight] = six;
            six_to_eight[six] = eight;
        }
        self.eight_to_six = eight_to_six;
        self.six_to_eight = six_to_eight;
    }

    // Encode a string of arbitrarily-encoded data to an ASCII MIME Base64
    // string.
    function encode(string plain)
    {
        var buf = new 'ByteBuffer';
        buf =: plain;
        return self.encode_bytebuffer(buf);
    }

    // Encode the contents of a ByteBuffer to MIME Base 64
    function encode_bytebuffer(var buf)
    {
        var s = self.six_to_eight;
        int len = elements(buf);

        var result = new 'ByteBuffer';
        for (int i = 0; i < len; ) {
            int eight_0 = buf[i]; i++;
            int eight_1 = buf[i]; i++;
            int eight_2 = buf[i]; i++;

            int six_0 = eight_0 >> 2;
            int six_1 = bor(band(eight_0, 3) << 4, eight_1 >> 4);
            int six_2 = bor(band(eight_1, 15) << 2, eight_2 >> 6);
            int six_3 = band(eight_2, 63);

            push(result, int(s[six_0]));
            push(result, int(s[six_1]));
            push(result, int(s[six_2]));
            push(result, int(s[six_3]));
        }

        int len_mod_3 = len % 3;
        if (len_mod_3 == 2) {
            int buf_len = elements(result);
            int equal_sign = get_codepoint("=", 0);
            result[buf_len - 1] = equal_sign;
        }
        else if (len_mod_3 == 1) {
            int buf_len = elements(result);
            int equal_sign = get_codepoint("=", 0);
            result[buf_len - 1] = equal_sign;
            result[buf_len - 2] = equal_sign;
        }

        return result.get_string("ascii");
    }

    // Decode the base64 string and return a string in the specified encoding.
    function decode(string base64, string encoding = "ascii")
    {
        var base64_buf = new 'ByteBuffer';
        base64_buf =: base64;
        int len = elements(base64_buf);
        var base64_cleaned = new 'ByteBuffer';
        base64_cleaned =: len;          // Presize. This isn't what the final length will be, but it's better than nothing.

        var e = self.eight_to_six;
        for (int i = 0; i < len; i++) {
            int tmp_int_1 = base64_buf[i];
            if (e[tmp_int_1] != -1)
                push(base64_cleaned, tmp_int_1);
        }

        len = elements(base64_cleaned);
        push(base64_cleaned, 0);
        push(base64_cleaned, 0);
        push(base64_cleaned, 0);

        var plain = new 'ByteBuffer';

        for (int i = 0; i < len; ) {
            int six_0 = e[int(base64_cleaned[i])]; i++;
            int six_1 = e[int(base64_cleaned[i])]; i++;
            int six_2 = e[int(base64_cleaned[i])]; i++;
            int six_3 = e[int(base64_cleaned[i])]; i++;

            int eight_0 = bor(six_0 << 2, six_1 >> 4);
            int eight_1 = bor(band(six_1, 15) << 4, six_2 >> 2);
            int eight_2 = bor(band(six_2, 3) << 6, six_3);

            push(plain, eight_0);
            push(plain, eight_1);
            push(plain, eight_2);
        }

        int len_mod_4 = len % 4;
        int minus_length = 0;
        if (len_mod_4 == 3)
            minus_length = 1;
        else if (len_mod_4 == 2)
            minus_length = 2;

        return plain.get_chars(0, elements(plain) - minus_length, encoding);
    }
}
