/* Socket Factory
    The SocketFactory creates Socket objects with specific settings. The
    settings are specified when the factory is created and all subsequent
    Sockets created by that factory have the same settings.
*/
class Rosella.Net.SocketFactory : Rosella.ObjectFactory
{
    var protocol;

    // Constructor. Take several human-readable strings to configure settings
    function SocketFactory(string inet_protocol, string data_protocol, string packet_protocol, string is_passive)
    {
        int inet, sock, packet;
        switch (inet_protocol) {
            case "ipv4":
                inet = PIO_PF_INET;
                break;
            case "ipv6":
                inet = PIO_PF_INET6;
                break;
            default:
                Rosella.Error.error("Unknown internet protocol type '%s'", inet_protocol);
        }

        switch(data_protocol) {
            case "stream":
                sock = PIO_SOCK_STREAM;
                break;
            case "datagram":
                sock = PIO_SOCK_DGRAM;
                break;
            default:
                Rosella.Error.error("Unknown socket type '%s'", data_protocol);
        }

        switch(packet_protocol) {
            case "tcp":
                packet = PIO_PROTO_TCP;
                break;
            case "udp":
                packet = PIO_PROTO_UDP;
                break;
            default:
                Rosella.Error.error("Unknown protocol type '%s'", packet_protocol);
        }

        int passive = is_passive == "passive";

        int protocol[] = [inet, sock, packet, passive];
        self.protocol = protocol;
        self.ObjectFactory("Socket");
    }

    // Create a Socket with the given host and port
    function create_typed(var type, string host, int port)
    {
        var socket = Rosella.construct(type);
        int protocol = int(self.protocol[0]); // PIO_PF_INET or PIO_PF_INET6
        int family = int(self.protocol[1]);   // PIO_SOCK_STREAM or PIO_SOCK_DGRAM
        int packet = int(self.protocol[2]);   // PIO_PROTO_TCP or PIO_PROTO_UDP
        int passive = int(self.protocol[3]);  // true or false
        socket.socket(protocol, family, packet);
        var addr = socket.getaddrinfo(host, port, packet, protocol, passive);
        if (addr == null)
            Rosella.Error.error("Cannot find record for '%s:%d' (%d, %d, %d)", host, port, protocol, family, packet);
        try {
            socket.connect(addr);
        } catch (e) {
            Rosella.Error.error("Cannot connect to '%s:%d' (%d, %d, %d): %s", host, port, protocol, family, packet, e.message);
        }
        return socket;
    }
}
