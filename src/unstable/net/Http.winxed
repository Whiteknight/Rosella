namespace Rosella.Net.Http
{
    const string SOCKET_FACTORY_GLOBAL = "Rosella.Net.Http.socket_factory";
    function default_socket_factory()
    {
        return Rosella.Globals.autoget_global(SOCKET_FACTORY_GLOBAL,
            function() { return new Rosella.Net.Http.SocketFactory(); }
        );
    }

    function create_socket(string host, int port)
    {
        return Rosella.Net.Http.default_socket_factory().create();
    }

    function create_request(string uri = "")
    {
        var request = new Rosella.Net.Http.Request();
        if (uri != null && uri != "")
            request.set_uri_string(uri);
        return request;
    }

    function request(var request, var user_agent = new Rosella.Net.UserAgent())
    {
        // TODO: Verify that this is an http request
        var protocol = Rosella.Net.default_protocol_factory().create(request.get_uri());
        if (protocol == null) {
            string msg = Rosella.String.sprintf("Could not understand protocol '%s'", request.get_uri().protocol());
            return new Rosella.Net.Http.Response(RC_BAD_REQUEST, msg);
        }
        protocol.prepare_request(request, user_agent);
        return protocol.request(request, user_agent);
    }

    function formdata_encode(string s)
    {
        int s_enc = encoding(s);
        int utf8_enc = find_encoding("utf8");
        if (s_enc != find_encoding("ascii") && s_enc != utf8_enc)
            s = trans_encoding(s, utf8_enc);

        int code_A = ord("A");
        int code_Z = ord("Z");
        int code_a = ord("a");
        int code_z = ord("z");
        int code_0 = ord("0");
        int code_9 = ord("9");


        var buf = new 'ByteBuffer';
        var result = new 'ByteBuffer';
        buf =: s;
        for (int code in buf) {
            if (code == 0x20) {
                push(result, 0x2B);
                continue;
            }
            if ((code >= code_a && code <= code_z) ||
                (code >= code_A && code <= code_Z) ||
                (code >= code_0 && code <= code_9))
                push(result, code);
            else {
                push(result, 0x25);
                string c = substr(HEXDIGITS, code / 16, 1);
                push(result, ord(c));
                c = substr(HEXDIGITS, code % 16, 1);
                push(result, ord(c));
            }
        }
        s = result.get_string("ascii");
        return s;
    }
}
