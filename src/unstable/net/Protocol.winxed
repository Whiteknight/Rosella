class Rosella.Net.Protocol
{
    var user_agent;

    function Protocol()
    {
    }

    function protocol_name()
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function request(var request, var proxy)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function user_agent() { return self.user_agent; }

    function __dispatch_method(string name, var request, string path, var proxy)
    {
        var m = find_method(self, "request_" + name);
        if (m == null)
            return new Rosella.Net.Http.Response(RC_INTERNAL_SERVER_ERROR, "Cannot dispatch request type '%s' for protocol '%s'", name, self.protocol_name());
        return self.*m(request, path, proxy);
    }

    function __error_bad_protocol(string protocol)
    {
        return new Rosella.Net.Http.Response(RC_INTERNAL_SERVER_ERROR, "Bad protocol. Expected '%s' but have '%s'", self.protocol_name(), protocol);
    }

    function __error_not_found(var uri)
    {
        return new Rosella.Net.Http.Response(RC_NOT_FOUND, "Could not find resource ", uri.path());
    }
}

class Rosella.Net.Protocol.File : Rosella.Net.Protocol
{
    function File() { }

    function protocol_name() { return "file"; }

    function request(var request)
    {
        var proxy = request.proxy();
        if (proxy != null)
            return new Rosella.Net.Http.Response(RC_BAD_REQUEST, "Cannot access a file through a proxy");
        var uri = request.get_uri();
        string uri_protocol = uri.protocol();
        if (uri_protocol != "file")
            return self.__error_bad_protocol(uri_protocol);
        return self.__dispatch_method(request.get_method(), request, uri.path(), proxy);
    }

    function request_HEAD(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        if (!f.exists())
            return __error_not_found(request.get_uri());
        var response = new Rosella.Net.Http.Response(RC_OK);
        response.add_header("Last-Modified", f.modify_time().format_string(""));
        response.add_header("Content-Length", f.size());
        return response;
    }

    function request_GET(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        if (!f.exists())
            return __error_not_found(request.get_uri());
        var response = new Rosella.Net.Http.Response(RC_OK);
        response.add_header("Last-Modified", f.modify_time().format_string(""));
        response.add_header("Content-Length", f.size());
        response.set_content(f.read_all_text());
        return response;
    }

    function request_PUT(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        f.write_all_text(request.get_content());
        return new Rosella.Net.Http.Response(RC_OK);
    }

    function request_DELETE(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        if (!f.exists())
            return __error_not_found(request.get_uri());
        f.delete();
        return new Rosella.Net.Http.Response(RC_OK);
    }
}

class Rosella.Net.Protocol.Http : Rosella.Net.Protocol
{
    function Http() { }

    function protocol_name() { return "HTTP"; }
}

class Rosella.Net.Protocol.Factory : Rosella.ObjectFactory
{
    var types;

    function Factory(var types = { })
    {
        self.types = self.__get_default_types();
    }

    function __get_default_types()
    {
        return {
            "http": class Rosella.Net.Protocol.Http,
            "file": class Rosella.Net.Protocol.File
        };
    }

    function create(var uri)
    {
        string pname = uri.protocol();
        var type = self.types[pname];
        return self.create_typed(type);
    }

    function create_typed(var type)
    {
        return Rosella.construct(type);
    }
}
