class Rosella.Net.Protocol
{
    var user_agent;

    function Protocol()
    {
    }

    function protocol_name()
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function request(var request, var proxy)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function user_agent() { return self.user_agent; }

    function __dispatch_method(string name, var request, string path, var proxy)
    {
        var m = find_method(self, "request_" + name);
        if (m == null) {
            string msg = Rosella.String.sprintf("Cannot dispatch request type '%s' for protocol '%s'", name, self.protocol_name());
            return new Rosella.Net.Http.Response(RC_INTERNAL_SERVER_ERROR, msg);
        }
        return self.*m(request, path, proxy);
    }

    function __error_bad_protocol(string protocol)
    {
        string msg = Rosella.String.sprintf("Bad protocol. Expected '%s' but have '%s'", self.protocol_name(), protocol);
        return new Rosella.Net.Http.Response(RC_INTERNAL_SERVER_ERROR, msg);
    }

    function __error_not_found(var uri)
    {
        return new Rosella.Net.Http.Response(RC_NOT_FOUND, "Could not find resource ", uri.path());
    }

    function __error_network_failure(var request)
    {
        return new Rosella.Net.Http.Response(RC_INTERNAL_SERVER_ERROR, "Network error'");
    }
}

class Rosella.Net.Protocol.File : Rosella.Net.Protocol
{
    function File() { }

    function protocol_name() { return "file"; }

    function request(var request)
    {
        var proxy = request.proxy();
        if (proxy != null)
            return new Rosella.Net.Http.Response(RC_BAD_REQUEST, "Cannot access a file through a proxy");
        var uri = request.get_uri();
        string uri_protocol = uri.protocol();
        if (uri_protocol != "file")
            return self.__error_bad_protocol(uri_protocol);
        return self.__dispatch_method(request.get_method(), request, uri.path(), proxy);
    }

    function request_HEAD(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        if (!f.exists())
            return self.__error_not_found(request.get_uri());
        var response = new Rosella.Net.Http.Response(RC_OK);
        response.add_header("Last-Modified", f.modify_time().format_string(""));
        response.add_header("Content-Length", f.size());
        return response;
    }

    function request_GET(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        if (!f.exists())
            return self.__error_not_found(request.get_uri());
        var response = new Rosella.Net.Http.Response(RC_OK);
        response.add_header("Last-Modified", f.modify_time().format_string(""));
        response.add_header("Content-Length", f.size());
        response.set_content(f.read_all_text());
        return response;
    }

    function request_PUT(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        f.write_all_text(request.get_content());
        return new Rosella.Net.Http.Response(RC_OK);
    }

    function request_DELETE(var request, string path, var proxy)
    {
        var f = new Rosella.FileSystem.File(path);
        if (!f.exists())
            return self.__error_not_found(request.get_uri());
        f.delete();
        return new Rosella.Net.Http.Response(RC_OK);
    }
}

class Rosella.Net.Protocol.Http : Rosella.Net.Protocol
{
    function Http() { }

    function protocol_name() { return "HTTP"; }

    function __fixup_header(var header, var uri, var proxy)
    {
        string host = uri.authority();
        string userinfo;
        int amp_idx = index(host, "@");
        if (amp_idx >= 0) {
            userinfo = substr(host, 0, amp_idx);
            amp_idx++;
            host = substr(host, amp_idx);
            string auth = header.get_value("Authorization");
            if (auth == "") {
                string mimed = Rosella.Net.MimeBase64.encode(auth);
                header.add_value("Authorization", "Basic " + mimed);
            }
        }
        header.add_value("host", host);
        if (proxy != null) {
            string userinfo = proxy.userinfo();
            if (userinfo != "") {
                string mimed = Rosella.Net.MimeBase64.encode(userinfo);
                header.add_value("Proxy-Authorization", "Basic " + mimed);
            }
        }
        if (!header.contains_value("Connection"))
            header.add_value("Connection", "Keep-Alive");
    }

    function __format_request_header(string request_method, string fullpath, var request_header)
    {
        var sb = new 'StringBuilder';
        push(sb, request_method);
        push(sb, " ");
        push(sb, fullpath);
        push(sb, " HTTP/1.1");
        push(sb, CRLF);
        push(sb, request_header.get_header_text());
        push(sb, CRLF);
        return sb;
    }

    function __receive_status_line(var socket)
    {
        string status_line = socket.readline();
        status_line = Rosella.String.trim_end(status_line);
        int idx = index(status_line, " ");

        if (idx < 0)
            return false, new Rosella.Net.Http.Response(0, status_line);

        string protocol = substr(status_line, 0, idx);
        int next_idx = idx + 1;
        idx = index_issi(status_line, " ", next_idx);
        if (idx < 0)
            return false, new Rosella.Net.Http.Response(0, status_line, protocol);

        int diff = idx - next_idx;
        string code = substr(status_line, next_idx, diff);
        return true, new Rosella.Net.Http.Response(int(code), status_line, protocol);
    }

    function __receive_header(var socket, var header)
    {
        while (true) {
            string raw = socket.readline();
            raw = Rosella.String.trim_end(raw);
            if (raw == null || raw == "")
                return;
            int idx = index(raw, ": ");
            if (idx >= 0) {
                string name = substr(raw, 0, idx);
                string value = substr(raw, idx + 2);
                header.add_value(name, value);
            }
        }
    }

    function request(var request)
    {
        var proxy = request.get_proxy();
        string request_method = request.get_method();
        var uri = request.get_uri();
        string host, port, fullpath;
        if (proxy != null) {
            host = proxy.host();
            port = proxy.port();
            fullpath = string(uri.host()) + ":" + string(uri.port());
        } else {
            host = uri.host();
            port = uri.port();
            fullpath = uri.path_query();
            if (index(fullpath, "/") != 0)
                fullpath = "/" + fullpath;
        }
        int port_num = (port == null || port == "") ? 80 : int(port);
        var socket = Rosella.Net.Http.default_socket_factory().create(host, port_num);
        var request_header = request.header();
        self.__fixup_header(request_header, uri, proxy);
        string header_raw = self.__format_request_header(request_method, fullpath, request_header);

        if (socket.puts(header_raw) < 0)
            return self.__error_network_failure(request);

        string content = request.get_content();
        if (content != null && content != "") {
            if (socket.puts(header_raw) < 0)
                return self.__error_network_failure(request);
        }

        //var ua = self.ua();
        //ua.progress('tick', request);
        :(int ok, var response) = self.__receive_status_line(socket);
        if (ok != 1)
            return response;

        self.__receive_header(socket, response.header());
        say("Received header");
        say(response.header().get_header_text());
        var buf = new 'StringBuilder';
        string transfer_encoding = response.get_header("Transfer-Encoding");
        string raw;
        if (index(transfer_encoding, "chunked") >= 0) {
            int hex_class = Rosella.String.get_character_class("hexadecimal");
            while(true) {
                string line = socket.readline();
                int line_length = length(line);
                int substr_idx = Rosella.String.first_not_cclass(line, hex_class);
                line = substr(line, 0, substr_idx);
                int chunk_length = Rosella.String.to_integer(line, 16);
                if (chunk_length == 0)
                    break;
                raw = socket.read(chunk_length);
                push(buf, raw);
                socket.readline();
            }
            self.__receive_header(socket, response.header());
        } else {
            int content_length = response.get_content_length_header();
            if (content_length == 0) {
                while(true) {
                    raw = socket.recv();
                    if (raw == null || raw == "")
                        break;
                    push(buf, raw);
                }
            } else {
                int recv_length = 0;
                while (recv_length < content_length) {
                    string raw = socket.recv();
                    if (raw == "")
                        break;
                    recv_length += length(raw);
                    push(buf, raw);
                }
            }
        }
        socket.close();
        response.set_content(string(buf));
        return response;
    }
}

class Rosella.Net.Protocol.Factory : Rosella.ObjectFactory
{
    var types;

    function Factory(var types = { })
    {
        self.types = self.__get_default_types();
    }

    function __get_default_types()
    {
        return {
            "http": class Rosella.Net.Protocol.Http,
            "file": class Rosella.Net.Protocol.File
        };
    }

    function create(var uri)
    {
        string pname = uri.protocol();
        var type = self.types[pname];
        return self.create_typed(type);
    }

    function create_typed(var type)
    {
        return Rosella.construct(type);
    }
}
