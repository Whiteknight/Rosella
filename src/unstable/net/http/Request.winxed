class Rosella.Net.Http.Request : Rosella.Net.Request
{
    var header;
    var request_method;
    var uri;
    var proxy;
    var content;
    var form_data;
    var is_form_data;

    function Request()
    {
        self.header = new Rosella.Net.Http.Header();
    }

    /* Request Method.
        Can be one of HEAD, PUT, POST, DELETE and GET
    */

    function get_method()
    {
        if (self.request_method == null)
            return "GET";
        return string(self.request_method);
    }

    function set_method(string request_method) { self.request_method = request_method; }

    /* HTTP Header
    */

    function header() { return self.header; }
    function add_header(string name, string value) { self.header.add_value(name, value); }
    function get_header(string name) { return self.header.get_value(name); }
    function remove_header(string name) { self.header.remove_value(name); }

    /* Proxy
    */

    function set_proxy(var p) { self.proxy = p; }
    function get_proxy() { return self.proxy; }

    /* Request URI
    */

    function get_uri() { return self.uri; }
    function set_uri(var uri) { self.uri = uri; }
    function set_uri_string(string uri) { self.uri = new Rosella.Net.Uri(uri); }


    // Set true if this request requires a mimetype of multipart/form-data.
    // False if we can make the
    function set_form_data_type(int is)
    {
        if (is == true || is == false)
            self.is_form_data = is;
        else
            self.is_form_data = null;
    }

    // Get the request packet content body. Generates the packet body and sets
    // the correct headers for it.
    function get_content()
    {
        string content = "";
        if (self.content != null) {
            content = string(self.content);
            if (length(content) > 0)
                self.set_header("Content-Type", "application/octet-stream");
        }
        else if (self.form_data != null && elements(self.form_data) > 0) {
            if (self.__is_multipart_request(self.form_data)) {
                string boundary = self.__get_multipart_boundary();
                self.add_header("Content-Type", "multipart/form-data; boundary=" + boundary);
                content = self.__format_formdata_content(boundary, self.form_data);
            } else {
                self.add_header("Content-Type", "application/x-www-form-urlencoded");
                content = self.__format_post_content(self.form_data);
            }
        }
        int len = length(content);
        if (len > 0)
            self.add_header("Content-Length", length(content));
        //say(content);
        return content + CRLF;
    }

    // Sets a raw chunk of content as the body of the request. A request may
    // only have a content body or a hash of name/value field pairs as the body.
    function set_content(string data)
    {
        if (self.form_data != null)
            Rosella.Error.error("May not set content and form_data in the same request");
        self.content = data;
    }

    // Add a hash of name->value pairs as form data
    function add_form_fields(var fields)
    {
        for (string name in fields) {
            string value = fields[name];
            self.add_post_form_field(name, value);
        }
    }

    // Add a name/value pair to the form data.
    function add_form_field(string name, string value)
    {
        if (self.content != null)
            Rosella.Error.error("May not set content and form_data in the same request");
        if (self.form_data == null)
            self.form_data = [];
        push(self.form_data, new Rosella.Net.Http.Request.FormDataPair(name, value));
    }

    // Add file to the form data. Forces the content type to
    // "multipart/form-data"
    function add_form_field_file(string name, var file, string mimetype = "", string encoding = "binary")
    {
        if (self.content != null)
            Rosella.Error.error("May not set content and form_data in the same request");
        if (!file.exists())
            Rosella.Error.error("File %s does not exist", file.path());
        if (self.form_data == null)
            self.form_data = [];
        push(self.form_data, new Rosella.Net.Http.Request.FormDataFile(name, file, mimetype, encoding));
    }

    // Add a file to the form by filename
    function add_form_field_filename(string name, string filename, string mimetype = "", string encoding = "binary")
    {
        var f = new Rosella.FileSystem.File(filename);
        self.add_form_field_file(name, f, mimetype, encoding);
    }

    /* Private Helper Methods
    */

    // Format request content as "multipart/form-data"
    function __format_formdata_content(string boundary, var form_data)
    {
        // TODO: Support multipart requests and multiple file uploads
        var sb = new 'StringBuilder';
        for (var data in form_data) {
            string name = data.field_name();
            push(sb, "--");
            push(sb, boundary);
            push(sb, CRLF);
            push(sb, data.get_content_string());
            push(sb, CRLF);
        }
        push(sb, "--");
        push(sb, boundary);
        push(sb, "--");
        push(sb, CRLF);
        //push(sb, CRLF);
        return sb;
    }

    // Determine if this is a multipart request and requires the
    // "multipart/form-data" mime type
    function __is_multipart_request(var form_data)
    {
        if (self.is_form_data != null)
            return int(self.is_form_data);
        for (var data in form_data) {
            if (data.requires_multipart())
                return true;
        }
        return false;
    }

    // Format form data as "application/x-www-form-encoded"
    function __format_post_content(var form_data)
    {
        var sb = new 'StringBuilder';
        string separator = "";
        for (var data in form_data) {
            string field_name = data.field_name();
            string field_data = data.get_post_content_string();
            push(sb, separator);
            separator = "&";
            push(sb, Rosella.Net.Http.formdata_encode(field_name));
            push(sb, "=");
            push(sb, Rosella.Net.Http.formdata_encode(field_data));
        }
        return sb;
    }

    // Get a boundary token for multpart/form-data requests
    function __get_multipart_boundary()
    {
        // TODO: Implement a random/pseudorandom generator for unique boundaries
        return "Aa03xBb04yCc05z";
    }
}

/* Form Data wrapper
    Abstract parent class of name/value pair data for forms
*/
class Rosella.Net.Http.Request.FormData
{
    var name;

    function FormData(string name)
    {
        self.name = name;
    }

    function field_name() { return self.name; }

    function get_multipart_content_string()
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function get_post_content_string()
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function requires_multipart() { return false; }
}

/* File Upload
    Represents a file uploaded from form.
*/
class Rosella.Net.Http.Request.FormDataFile : Rosella.Net.Http.Request.FormData
{
    var file;
    var mimetype;
    var encoding;

    function FormDataFile(string name, var f, string mimetype = "", string encoding = "binary")
    {
        self.file = f;
        self.mimetype = mimetype;
        self.encoding = encoding;
        self.FormData(name);
    }

    function requires_multipart() { return true; }

    function get_content_string()
    {
        var sb = new 'StringBuilder';
        push(sb, "Content-Disposition: form-data; name=\"");
        push(sb, self.name);
        push(sb, "\"; filename=\"");
        push(sb, self.file.short_name());
        push(sb, "\"");
        push(sb, CRLF);
        string mimetype = self.mimetype;
        if (mimetype != "") {
            push(sb, "Content-Type: ");
            push(sb, self.mimetype);
            push(sb, CRLF);
        }
        string encoding = self.encoding;
        //if (encoding != "") {
            //push(sb, "Content-Transfer-Encoding: ");
            //push(sb, self.encoding);
            //push(sb, CRLF);
        //}
        push(sb, CRLF);

        push(sb, self.file.read_all_text("binary"));
        push(sb, CRLF);
        return sb;
    }

    function get_post_content_string()
    {
        Rosella.Error.error("Cannot get post content for File. Requires multipart/form-data request");
    }
}

/* Represents a simple name/value pair
*/
class Rosella.Net.Http.Request.FormDataPair : Rosella.Net.Http.Request.FormData
{
    var value;

    function FormDataPair(string name, string value)
    {
        self.FormData(name);
        self.value = value;
    }

    function get_content_string()
    {
        var sb = new 'StringBuilder';
        push(sb, "Content-Disposition: form-data; name=\"");
        push(sb, self.name);
        push(sb, "\"");
        push(sb, CRLF);
        push(sb, CRLF);
        push(sb, self.value);
        return sb;
    }

    function get_post_content_string()
    {
        return self.value;
    }
}
