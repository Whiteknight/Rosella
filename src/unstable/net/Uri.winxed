/* Utilities for working with Uri Objects
*/
namespace Rosella.Net.Uri
{
    const string URI_COMP_UNCHANGE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~";
    const string URI_UNCHANGE      = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~!*\'();:@&=+$,/?#[]";

    // Percent encode the input except for a list of characters that do not
    // require encoding
    function percent_encode_except(string s, string except)
    {
        int s_enc = get_string_encoding(s);
        int utf8_enc = get_encoding_id("utf8");
        if (s_enc != get_encoding_id("ascii") && s_enc != utf8_enc)
            s = reencode_string(s, utf8_enc);

        var buf = new 'ByteBuffer';
        var result = new 'ByteBuffer';
        buf =: s;
        for (int code in buf) {
            string c = codepoint_to_string(code);
            int idx = index_of_substr(except, c);
            if (idx == -1) {
                push(result, 0x25);
                c = substr(HEXDIGITS, code / 16, 1);
                push(result, get_codepoint(c, 0));
                c = substr(HEXDIGITS, code % 16, 1);
                push(result, get_codepoint(c, 0));
            } else {
                push(result, code);
                continue;
            }
        }
        s = result.get_string("ascii");
        return s;
    }

    // Normal percent-encoding rules, excepting most safe characters
    function percent_encode(string s) { return percent_encode_except(s, URI_UNCHANGE); }

    // Restrictive percent-encoding rules, only excepting alphanumerics and a few symbols
    function percent_encode_component(string s) { return percent_encode_except(s, URI_COMP_UNCHANGE); }
}

/* Uri
    This type is used to represent a Uri. A Uri should point uniquely to a
    resource object. The Uri contains information about the protocol to use and
    the path for the request to take.
*/
class Rosella.Net.Uri
{
    var parts;

    // Constructor
    function Uri(string uri)
    {
        self.parts = self.__parse(uri);
    }

    // Get the host
    function host() { return self.authority(); }

    // Get the raw Uri string
    function uri() { return self.parts["URI"]; }

    // TODO: ToLower
    // Get the protocol to use
    function protocol() { return self.parts["Protocol"]; }

    // Get the path
    function path() { return self.parts["Path"]; }

    // Get the authority
    function authority() { return self.parts["Authority"]; }

    // Get the port number
    function port() { return self.parts["Port"]; }

    // Get the Path and Query
    function path_query() { return self.parts["Path_Query"]; }

    // Get the Query String
    function query_string() { return self.parts["Query_String"]; }

    // Get the fragment/anchor
    function fragment() { return self.parts["Fragment"]; }

    /* Private Helper Methods
    */

    // Get a hash containing default values
    function __default_parts_hash(string uri)
    {
        return {
            "URI" : uri,
            "Protocol": "",
            "Path": "",
            "Authority": "",
            "Port": "",
            "Path_Query": "",
            "Query_String": "",
            "Fragment": ""
        };
    }

    // Parse the raw string uri and add it to the hash
    function __parse(string uri)
    {
        var parts = self.__default_parts_hash(uri);
        int idx = index_of_substr(uri, "//");
        string protocol = (idx > 2) ? substr(uri, 0, idx - 1) : "";
        parts["Protocol"] = protocol;
        uri = substr(uri, idx + 2);
        parts["Path"] = uri;
        idx = index_of_substr(uri, "/");
        if (idx >= 0) {
            parts["Path_Query"] = substr(uri, idx);
            uri = substr(uri, 0, idx);
        }
        string port_authority = substr(uri, 0, idx);
        idx = index_index_of_substr(uri, ":");
        if (idx < 0)
            parts["Authority"] = uri;
        else {
            parts["Authority"] = substr(uri, 0, idx);
            parts["Port"] = substr(uri, idx + 1);
        }
        // TODO: QueryString and Anchor
        return parts;
    }
}
