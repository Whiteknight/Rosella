/* Utilities for working with Uri Objects
*/
namespace Rosella.Net.Uri
{
    const string URI_COMP_UNCHANGE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~";
    const string URI_UNCHANGE      = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~!*\'();:@&=+$,/?#[]";

    // Percent encode the input except for a list of characters that do not
    // require encoding
    function percent_encode_except(string s, string except)
    {
        int s_enc = get_string_encoding(s);
        int utf8_enc = get_encoding_id("utf8");
        if (s_enc != get_encoding_id("ascii") && s_enc != utf8_enc)
            s = reencode_string(s, utf8_enc);

        var buf = new 'ByteBuffer';
        var result = new 'ByteBuffer';
        buf =: s;
        for (int code in buf) {
            string c = codepoint_to_string(code);
            int idx = index_of_substr(except, c);
            if (idx == -1) {
                push(result, 0x25);
                c = substr(HEXDIGITS, code / 16, 1);
                push(result, get_codepoint(c, 0));
                c = substr(HEXDIGITS, code % 16, 1);
                push(result, get_codepoint(c, 0));
            } else {
                push(result, code);
                continue;
            }
        }
        s = result.get_string("ascii");
        return s;
    }

    // Normal percent-encoding rules, excepting most safe characters
    function percent_encode(string s) { return percent_encode_except(s, URI_UNCHANGE); }

    // Restrictive percent-encoding rules, only excepting alphanumerics and a few symbols
    function percent_encode_component(string s) { return percent_encode_except(s, URI_COMP_UNCHANGE); }

    const string URI_FACTORY_GLOBAL = "Rosella.Net.Uri.default_factory";
    function default_uri_factory()
    {
        return Rosella.Globals.autoget_global(URI_FACTORY_GLOBAL,
            function() {
                var f = new Rosella.Net.Uri.Factory();
                f.add_uri_type("http", class Rosella.Net.Uri.Http);
                f.add_uri_type("file", class Rosella.Net.Uri.File);
                return f;
            }
        );
    }

    function get_uri(string uri)
    {
        return default_uri_factory().create(uri);
    }
}

/* Uri
    This type is used to represent a Uri. A Uri should point uniquely to a
    resource object. The Uri contains information about the protocol to use and
    the path for the request to take.
*/
class Rosella.Net.Uri
{
    var parts_hash;

    // Constructor
    function Uri(string protocol, string uri)
    {
        self.parts_hash = self.__get_parts_hash(protocol, uri);
    }

    /* Public Methods
    */

    // Parse the raw string uri and add it to the hash
    function parse(string uri, var s, var b, int len)
    {
        var parts_hash = self.parts_hash;
        self.__parse(uri, s, b, len, parts_hash);
    }

    /* Part Accessors
        These are the parts common to all Uris
    */

    // Get the raw Uri string
    function uri() { return self.parts_hash["URI"]; }

    // TODO: ToLower
    // Get the protocol to use
    function protocol() { return self.parts_hash["Protocol"]; }


    /* Private Helper Methods
    */

    // Get the default parts hash
    function __get_parts_hash(string protocol, string uri)
    {
        return {
            "URI" : uri,
            "Protocol" : protocol
        };
    }

    // Do nothing.
    function __parse(string uri, var s, var b, int len, var parts_hash) { }
}
