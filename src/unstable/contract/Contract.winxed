namespace Rosella
{
    namespace Assert
    {
        const string ASSERT_IS_ACTIVE_KEY = "Rosella.Assert.IsActive";

        function is_active()
        {
            var temp = Rosella.Globals.get_global(ASSERT_IS_ACTIVE_KEY);
            if (temp == null) {
                temp = var(false);
                Rosella.Globals.register_global(ASSERT_IS_ACTIVE_KEY, temp);
            }
            while(1) {
                yield temp;
                temp = Rosella.Globals.get_global(ASSERT_IS_ACTIVE_KEY);
            }
        }

        function set_active(int active)
        {
            Rosella.Globals.register_global(ASSERT_IS_ACTIVE_KEY, var(active));
        }

        function assert(int cond, string text)
        {
            if (cond || !is_active())
                return;
            var cur_ctx = getinterp()["context"];
            var bt = cur_ctx.backtrace();
            if (elements(bt) > 1) {
                string frame = Rosella.Parrot.format_frame(bt[1]);
                text = Winxed_Builtins.sprintf("%s at %s", [text, frame]);
            }
            assert_fail(text);
        }

        function assert_fail(string text, var args [slurpy])
        {
            text = sprintf(text, args);
            Rosella.Error.throw_error("Assertion failure: " + text);
        }
    }
}
