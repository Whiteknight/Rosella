namespace Rosella { namespace Assert
{
    /* Contract class to inject pre- and post-conditions into individual
       method calls.
    */
    class MethodConstract
    {
        var type;
        var type_class;
        var type_methods;

        function MethodContract(var type)
        {
            self.type = type;
            var type_class = Rosella.get_type_class(type);
            var methods = type_class.methods();
            self.type_class = type_class;
            self.type_methods = methods;
        }

        function inject(string meth_name, var precond_list, var postcond_list)
        {
            if (!Rosella.Assert.is_active())
                return;
            var old_method = self.type_methods[meth_name];
            var new_method = self.get_method_wrapper(meth_name, old_method, precond_list, postcond_list);
            //self.type_methods[meth_name] = new_method;
            self.type_class.remove_method(meth_name);
            self.type_class.add_method(meth_name, new_method);
        }

        function get_method_wrapper(string meth_name_str, var method, var pre, var post)
        {
            var preconditions = pre;
            var postconditions = post;
            string meth_name = meth_name_str;
            var meth = method;

            return function(var p [slurpy], var n [slurpy,named]) {
                var invocant = p.shift();
                for (string pre_name in preconditions) {
                    if (!preconditions[pre_name](p:[flat], n:[flat,named]))
                        Rosella.Assert.assert_fail("Failed precondition '%s' for method %s'", pre_name, meth_name);
                }
                var result = invocant.*meth(p:[flat], n:[flat,named]);
                for (string post_name in postconditions) {
                    if (!postconditions[post_name](result))
                        Rosella.Assert.assert_fail("Failed postcondition '%s' for method '%s'", post_name, meth_name);
                }
                return result;
            };
        }
    }
}}

