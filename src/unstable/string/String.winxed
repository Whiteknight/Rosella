$include_const "cclass.pasm";

namespace Rosella
{
    namespace String
    {
        // Find the first instance of something not in the class. Return -1
        // if all characters are in the class
        function first_not_cclass(string str, int cclass)
        {
            int idx = 0;
            int len = length(str);
            ${ find_not_cclass idx, cclass, str, 0, len };
            if (idx >= len)
                return -1;
            return idx;
        }

        function trim_start(string str, int cclass [optional], int has_cclass [opt_flag])
        {
            if (!has_cclass)
                cclass = CCLASS_WHITESPACE;

            int idx = first_not_cclass(str, cclass);
            if (idx == -1)
                return "";
            if (idx == 0)
                return str;
            return substr(str, idx);
        }

        // Find the last instance of a character not in the class. Return -1
        // if all characters are in the class
        function last_not_cclass(string str, int cclass)
        {
            int idx = -1;
            int len = length(str);
            for (int i = len - 1; i >= 0; i--) {
                int char_is_cc = 0;
                ${ is_cclass char_is_cc, cclass, str, i };
                if (!char_is_cc) {
                    idx = i + 1;
                    break;
                }
            }
            return idx;
        }

        function trim_end(string str, int cclass [optional], int has_cclass [opt_flag])
        {
            if (!has_cclass)
                cclass = CCLASS_WHITESPACE;

            int len = length(str);
            int idx = last_not_cclass(str, cclass);

            // If we never found something that wasn't in the class, the
            // whole string gets trimmed
            if (idx == -1)
                return "";

            // If the last character is not in the cclass, the whole string is
            // good.
            if (idx == len - 1)
                return str;

            return substr(str, 0, idx);
        }

        function trim(string str, int cclass [optional], int has_cclass [opt_flag])
        {
            if (!has_cclass)
                cclass = CCLASS_WHITESPACE;
            int start_idx = first_not_cclass(str, cclass);
            if (start_idx == -1)
                return "";
            int end_idx = last_not_cclass(str, cclass);
            if (end_idx == -1)
                return "";
            return substr(str, start_idx, end_idx - start_idx);
        }

        function sprintf(string format, var args [slurpy])
        {
            return sprintf(format, args);
        }

        function pad_internal(string str, int total_width)
        {
            int len = length(str);
            if (len < total_width) {
                int diff = total_width - len;
                string pad = null;
                string space = " ";
                ${ repeat pad, space, diff };
                return pad;
            }
            return "";
        }

        function pad_left(string str, int total_width)
        {
            string pad = pad_internal(str, total_width);
            return pad + str;
        }

        function pad_right(string str, int total_width)
        {
            string pad = pad_internal(str, total_width);
            return str + pad;
        }

        function remove_start(string str, int count)
        {
            return substr(str, 0, count);
        }

        function remove_end(string str, int start)
        {
            return substr(str, start);
        }

        function remove_middle(string str, int start, int count)
        {
            // TODO: bounds check
            string first_half = substr(str, 0, start);
            string second_half = substr(str, start + count);
            return first_half + second_half;
        }
    }
}
