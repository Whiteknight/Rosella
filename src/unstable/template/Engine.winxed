namespace Rosella { namespace Template
{
    class Engine
    {
        var tokenizer;
        var eval_count;
        var node_factory;

        function Engine()
        {
            self.tokenizer = new Rosella.String.Tokenizer.DelimiterRegion("LiteralText");
            self.node_factory = new Rosella.Template.Node.Factory();
            self.eval_count = 0;
            self.setup_region_types();
        }

        function setup_region_types()
        {
            self.node_factory.register_type("LiteralText", class Rosella.Template.Node.Literal);

            self.tokenizer.add_region("<%", "%>", "EvalRegion");
            self.node_factory.register_type("EvalRegion", class Rosella.Template.Node.Eval);

            self.tokenizer.add_region("<#", "#>", "DataRegion");
            self.node_factory.register_type("DataRegion", class Rosella.Template.Node.Data);

            self.tokenizer.add_region("<$", "$>", "LogicRegion");
            self.node_factory.register_type("LogicRegion", class Rosella.Template.Node.Logic);
        }

        function generate(string tmpl, var user_context)
        {
            var nodes_array = self.__get_nodes_array(tmpl);
            var node = self.__create_node_tree(nodes_array);
            var builder = new ['StringBuilder'];
            var context = new Rosella.Template.Context(user_context);
            node.render(context, builder);
            return string(builder);
        }

        function generate_from_file(string tmpl_filename, var user_context)
        {
            var file = new Rosella.FileSystem.File(tmpl_filename);
            if (!file.exists()) {
                using Rosella.Error.invalid;
                invalid(__FUNCTION__, "Template file " + tmpl_filename + " does not exist");
            }
            string tmpl = file.read_all_text();
            self.generate(tmpl, user_context);
        }

        function __get_nodes_array(string tmpl)
        {
            var nodes_array = [];
            self.tokenizer.add_data(tmpl);
            while (self.tokenizer.has_tokens()) {
                var t = self.tokenizer.get_token();
                var node = self.node_factory.create(t);
                push(nodes_array, node);
            }
            return nodes_array;
        }

        function __create_node_tree(var nodes_array)
        {
            var first_node = new Rosella.Template.Node.Master();
            var current_node = first_node;
            var parent_nodes = [];
            for (var node in nodes_array)
                current_node = node.assemble(parent_nodes, current_node);
            return first_node;
        }
    }
}}
