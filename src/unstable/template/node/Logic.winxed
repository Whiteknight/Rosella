namespace Rosella { namespace Template { namespace Node
{
    class Logic : Rosella.Template.Node
    {
        var handler;
        var logic_name;

        function Logic(var token, var handler_factory)
        {
            self.Node(token);
            var tokens = self.parse(token.data());
            self.logic_name = tokens.shift();
            self.handler = handler_factory.create(self.logic_name, tokens);
        }

        function parse(string text)
        {
            var cclasses = [
                Rosella.String.get_character_class("graphical"),
                Rosella.String.get_character_class("whitespace")
            ];
            var tokenizer = new Rosella.String.Tokenizer.CClass(cclasses);
            tokenizer.add_data(text);
            var tokens_raw = tokenizer.all_tokens();
            var tokens = [];
            for (var token in tokens_raw) {
                if (int(token.metadata()) != CCLASS_WHITESPACE)
                    push(tokens, token.data());
            }
            return tokens;
        }

        function logic_name()
        {
            return self.logic_name;
        }

        function logic_end_name()
        {
            return Winxed_Builtins.sprintf("end%s", [self.logic_name]);
        }

        function assemble(var parent_nodes, var current_node)
        {
            if (self.handler != null && !self.handler.can_have_children())
                current_node.add_child(self);
            else if (self.is_logic_end() &&
                string(self.logic_name) == string(current_node.logic_end_name()))
                ${ pop current_node, parent_nodes };
            else {
                current_node.add_child(self);
                push(parent_nodes, current_node);
                current_node = self;
            }
            return current_node;
        }

        function is_logic_end()
        {
            string name = self.logic_name;
            if (substr(name, 0, 3) == "end")
                return 1;
            return 0;
        }

        function add_child(var node)
        {
            if (self.handler == null)
                Rosella.Error.invalid(__FUNCTION__, "Cannot add child, no handler (%s)", self.logic_name);
            if (!self.handler.can_have_children())
                Rosella.Error.invalid(__FUNCTION__, "Cannot add child");
            self.handler.add_child(node);
        }

        function render(var context, var builder)
        {
            if (self.handler == null)
                Rosella.Error.invalid(__FUNCTION__, "Cannot render '%s', no handler", self.logic_name);
            self.handler.render(context, builder);
        }
    }
}}}
