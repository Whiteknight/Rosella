namespace Rosella { namespace Template { namespace Handler
{
    class Set : Rosella.Template.Handler
    {
        var varname;
        var sourcename;
        var children;

        function Set(var tokens)
        {
            int numtks = elements(tokens);
            string varname = tokens[0];
            self.varname = varname;
            if (substr(varname, 0, 2) == "__" && substr(varname, length(varname) - 2, 2) == "__")
                Rosella.Error.invalid(__FUNCTION__, "Variable names starting and ending with double underscores are reserved");

            if (numtks == 1) {
                self.sourcename = null;
                self.children = [];
            }
            else if (numtks == 3 && tokens[1] == "as") {
                self.sourcename = tokens[2];
                self.children = null;
            }
            else
                Rosella.Error.invalid(__FUNCTION__, "Syntax of set is 'set <var>' or 'set <var> as <value>'");
        }

        function can_have_children()
        {
            if (self.children == null)
                return 0;
            return 1;
        }

        function add_child(var node)
        {
            if (self.children != null)
                push(self.children, node);
        }

        function render(var ctx, var sb)
        {
            if (self.sourcename == null && self.children != null) {
                var inner_sb = new "StringBuilder";
                for (var child in self.children)
                    child.render(ctx, inner_sb);
                string text = string(inner_sb);
                ctx.set_temporary(self.varname, text);
            }
            else if (self.sourcename != null) {
                var value = ctx.get_value(self.sourcename);
                ctx.set_temporary(self.varname, value);
            }
        }
    }
}}}
