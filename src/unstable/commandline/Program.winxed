namespace Rosella.CommandLine
{
    class Program
    {
        var program_name;
        var default_mode;
        var on_error;
        var modes;

        function Program(string program_name)
        {
            self.program_name = program_name;
            self.modes = [];
            self.default_mode = new Rosella.CommandLine.ProgramMode("default");
            self.on_error = function(var e) {
                say("Error parsing arguments");
                if (e != null)
                    say(e.message);
            };
        }

        function on_error(var e)
        {
            self.on_error = e;
        }

        function add_mode(string name)
        {
            var mode = new Rosella.CommandLine.ProgramMode(name);
            push(self.modes, mode);
            return mode;
        }

        function default_mode()
        {
            return self.default_mode;
        }

        function run(var raw_args)
        {
            var args = new Rosella.CommandLine.Arguments(raw_args);
            var main_func = null;
            try {
                for (var mode in self.modes)
                {
                    if (mode.can_accept(args)) {
                        mode.fetch_all_args(args);
                        main_func = mode.main_function();
                        break;
                    }
                }
                if (main_func == null) {
                    main_func = self.default_mode.main_function();
                    if (main_func != null)
                        self.default_mode.fetch_all_args(args);
                }
            } catch (e) {
                self.try_handle_error(e);
                return;
            }
            if (main_func == null) {
                self.try_handle_error(null);
                return;
            }

            int exit_code = 0;
            int has_ec = false;
            Rosella.Parrot.try_report(function () {
                :(int ec [optional], int hec [opt_flag]) = main_func(args);
                exit_code = ec;
                has_ec = hec;
            });
            if (has_ec)
                exit(exit_code);
        }

        function try_handle_error(var e)
        {
            var on_error = self.on_error;
            if (on_error == null) {
                if (e == null)
                    Rosella.Error.invalid(__FUNCTION__, "Invalid parameter combination");
                else
                    throw e;
            }
            on_error(e);
        }
    }
}
