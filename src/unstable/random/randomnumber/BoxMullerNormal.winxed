/* Box-Muller Transformed Normal Distribution
    This class implements the polar form of the Box-Muller transform using the
    Masaglia algorithm. It uses a uniform random number generator to create a
    normal-distribution of random numbers.
*/
class Rosella.Random.RandomNumber.BoxMullerNormal : Rosella.Random.RandomNumber
{
    var uniform_generator;
    var spare;
    var center;     // The center of the bell curve
    var stddev;     // The standard deviation

    // Constructor
    function BoxMullerNormal(float center, float stddev)
    {
        self.uniform_generator = Rosella.Random.default_uniform_random();
        self.center = center;
        self.stddev = stddev;
    }

    // The name of the distribution
    function distribution() { return "normal"; }

    // Seed the generator with a source of entropy
    function initialize(int seed)
    {
        self.uniform_generator.initialize(seed);
    }

    // Return a random integer
    function get_int()
    {
        return int(self.__next(float(self.center), float(self.stddev)));
    }

    // Return a random float with the given center and standard deviation
    function get_float()
    {
        return self.__get_next(float(self.center), float(self.stddev));
    }

    /* Internal Helper Methods
    */

    // Get the next random number
    function __get_next(float center, float stddev)
    {
        if (self.spare != null)
        {
            float spare = float(self.spare);
            self.spare = null;
            return spare;
        }

        float x, y, r;
        do {
            x = self.uniform_generator.get_float() * 2.0 - 1;
            y = self.uniform_generator.get_float() * 2.0 - 1;
            r = x * x + y * y;
        } while(r == 0.0 || r > 1.0);
        float z = sqrt(-2.0 * ln(r) / r);
        self.spare = center + stddev * y * z;
        return center + stddev * x * z;
    }
}
