$include_const "src/unstable/filesystem/Constants.pasm";

namespace Rosella { namespace FileSystem
{
    namespace File
    {

        function get_filehandle()
        {
            using Rosella.get_default_factory;
            return get_default_factory().create_typed("FileHandle");
            var factory = filehandle_factory();
            return factory.create();
        }
    }

    /* File Class
        This class represents a file. The file can be created, examined,
        modified, and deleted using methods on this object.
    */
    class File : Rosella.FileSystem.Entry
    {
        // Constructor
        function File(string filepath) { self.Entry(filepath); }

        // Open the file for reading, returning the open FileHandle. The user
        // must close the filehandle themselves.
        function open_read()
        {
            var filehandle = get_filehandle();
            filehandle.open(self.path, "r");
            return filehandle;
        }

        // Open the file for writing, returning the open FileHandle. The user
        // must close the FileHandle themselves.
        function open_write()
        {
            var filehandle = get_filehandle();
            filehandle.open(self.path, "w");
            return filehandle;
        }

        function open_append()
        {
            var filehandle = get_filehandle();
            filehandle.open(self.path, "a");
            return filehandle;
        }

        // Return all text from the file in a single string.
        function read_all_text()
        {
            var filehandle = self.open_read();
            string text = filehandle.readall();
            filehandle.close();
            return text;
        }

        // Return all text from the file, as an array of lines.
        function read_all_lines(string delim [optional], int has_d [opt_flag])
        {
            if (!has_d)
                delim = "\n";
            string text = self.read_all_text();
            return split(delim, text);
        }

        // Write the text to the file. Create the file if it does not exist,
        // overwrite it if it does.
        function write_all_text(string text)
        {
            var filehandle = self.open_write();
            filehandle.print(text);
            filehandle.close();
        }

        // Write the array of lines to the file, separated by newlines
        function write_all_lines(var lines, string delim [optional], int has_d [opt_flag])
        {
            if (!has_d)
                delim = "\n";
            var text = join(delim, lines);
            self.write_all_text(text);
        }

        // Append the given text to the file without disrupting the existing
        // contents.
        function append_text(string text)
        {
            var filehandle = self.open_append();
            filehandle.print(text);
            filehandle.close();
        }

        // Copy one file to a new destination.
        function copy(string dest)
        {
            var file = new Rosella.FileSystem.File(dest);
            string txt = self.read_all_text();
            file.write_all_text(txt);
            return file;
        }
    }
}}
