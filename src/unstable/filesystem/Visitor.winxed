namespace Rosella { namespace FileSystem
{
    /* FileSystem Visitor base class
        Specifies the Visitor API, and provides some default behaviors for
        certain operations which subclasses can inherit. Do not use this
        class directly, use a subclass or a custom replacement instead
    */
    class Visitor
    {
        // Visit the given entry. This might be a directory or a file
        function visit_file(var file)
        {
            if (self.should_visit(file))
                self.process(file);
        }

        // Determine if we should visit the entry. This is a helper method
        // called by .visit(). If a subclass overrides .visit(), this method
        // might not be needed
        function should_visit(var file)
        {
            return 1;
        }

        // Begin visiting a folder
        function begin_directory(var dir) { }

        // End visiting a folder
        function end_directory(var dir) { }

        // Process an entry. This is only called from .visit(). If a subclass
        // overrides .visit(), this method might be unnecessary
        function process(var file)
        {
            using Rosella.Error.must_subclass;
            must_subclass("Rosella.File.Visitor");
        }

        // Return the result of the walk, if any. By default there is nothing
        // to report.
        function result()
        {
            return null;
        }
    }
}}
