$include_const "src/unstable/filesystem/Constants.pasm";

namespace Rosella { namespace FileSystem
{
    /* Utilities for working with Directories
    */
    namespace Directory
    {
        // Get the current directory object where the application is
        // executing.
        function current_directory()
        {
            using Rosella.FileSystem.get_os_pmc;
            string cwd = get_os_pmc().cwd();
            return new Rosella.FileSystem.Directory(cwd);
        }

        // Get a list of test files from a directory. Allow recursion into
        // subdirectories, if requested.
        function private_visit_dir(string path, string name, var visitor)
        {
            using Rosella.FileSystem.is_file;
            using Rosella.FileSystem.is_directory;
            using Rosella.FileSystem.get_os_pmc;

            visitor.begin_folder(path, name);
            var contents_raw = get_os_pmc().readdir(path);

            for (string file in contents_raw) {
                // Don't follow the "special" files
                if (file == "." || file == "..")
                    continue;

                string entry = path + "/" + file;
                int isdir = is_directory(entry);
                visitor.visit(entry);
                if (isdir)
                    private_visit_dir(entry, file, visitor);
            }
            visitor.end_folder(path, name);
        }
    }

    /* Directory Class
        This object represents a directory in a file system.
    */
    class Directory
    {
        var path;

        // Constructor. Build a directory with the given path name
        function Directory(string path)
        {
            self.path = path;
        }

        // Get the directory path name
        function get_string[vtable]()
        {
            return self.path;
        }

        // Determine if this directory exists
        function exists()
        {
            using Rosella.FileSystem.get_os_pmc;
            return get_os_pmc().exists(self.path);
        }

        // Delete the directory. If the recursive argument is provided and is
        // non-zero, the directory is deleted by recursively deleting all
        // contents. Otherwise, only an empty directory can be deleted.
        function delete(int recursive [optional], int has_r [opt_flag])
        {
            if (has_r && recursive) {
                var deleter = new Rosella.FileSystem.Visitor.Delete();
                self.walk(deleter);
            } else {
                using Rosella.FileSystem.get_os_pmc;
                get_os_pmc().rm(self.path);
            }
        }

        // Create the directory, if it does not already exist.
        function create()
        {
            using Rosella.FileSystem.get_os_pmc;
            var os = get_os_pmc();
            if (!os.exists(self.path))
                os.mkdir(self.path, 493);       // 493 = 0755 octal.
        }

        // Rename the directory. Update the path for this object to point to
        // the new directory
        function rename(string new_path)
        {
            using Rosella.FileSystem.get_os_pmc;
            get_os_pmc().rename(self.path, new_path);
            self.path = new_path;
        }

        // Get a list of all files in this directory (but not in all
        // subdirectories).
        function get_files()
        {
            using Rosella.FileSystem.get_os_pmc;
            string path = string(self.path) + "/";
            var file_names = get_os_pmc().readdir(path);
            var files = [];
            using Rosella.FileSystem.is_file;
            for (string file_name in file_names) {
                if (file_name == "." || file_name == "..")
                    continue;
                if (is_file(path + file_name))
                    push(files, new Rosella.FileSystem.File(file_name));
            }
            return files;
        }

        // Get a list of all subdirectories in this directory.
        function get_subdirectories()
        {
            using Rosella.FileSystem.get_os_pmc;
            string path = string(self.path) + "/";
            var names = get_os_pmc().readdir(path);
            var dirs = [];
            using Rosella.FileSystem.is_directory;
            for (string name in names) {
                if (name == "." || name == "..")
                    continue;
                if (is_directory(path + name))
                    push(dirs, new Rosella.FileSystem.Directory(name));
            }
            return dirs;
        }

        // Walk this directory recursively using a Visitor object.
        function walk(var visitor [optional], int has_v [opt_flag])
        {
            if (!has_v)
                visitor = new Rosella.FileSystem.Visitor.List(1, 1);
            using static private_visit_dir;
            private_visit_dir(self.path, "", visitor);
            return visitor.result();
        }

        // Walk this directory recursively, applying a function to all files
        // in the directory.
        function walk_func(var func, var named [slurpy,named])
        {
            var visitor = new Rosella.FileSystem.Visitor.Function(func, named:[flat,named]);
            return self.walk(visitor);
        }
    }
}}
