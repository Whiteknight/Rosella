namespace Rosella { namespace Prototype
{
    class Manager
    {
        var library;
        var cloner;

        function BUILD(var cloner [optional], int has_c [opt_flag])
        {
            self.library = {};
            if (has_c)
                self.cloner = cloner;
            else {
                using Rosella.build;
                self.cloner = build(Rosella.Prototype.ObjectCloner);
            }
        }

        function add_prototype(var type, var proto,
                var sub [optional], int has_sub [opt_flag])
        {
            using Rosella.build;
            using Rosella.get_type_name;

            string type_name = get_type_name(type);
            if (!has_sub)
                sub = null;
            var entry = build(class Rosella.Prototype.Item, proto, sub);
            self.library[type_name] = entry;
        }

        // Get a fresh instance
        function instance(var type, var pos [slurpy], var named [slurpy,named])
        {
            using Rosella.get_type_name;

            string type_name = get_type_name(type);
            if (exists self.library[type_name]) {
                var entry = self.library[type_name];
                var proto = entry.prototype;
                var object = self.cloner.clone(proto);
                entry.construct(object, pos, named);
                return object;
            }
            return null;
        }

        // Get a fresh instance, and run it through a specified constructor
        // instead of any already-registered constructors.
        function instance_constructor(var type, var constructor,
                var pos [slurpy], var named [slurpy,named])
        {
            using Rosella.get_type_name;

            string type_name = get_type_name(type);
            if (exists self.library[type_name]) {
                var entry = self.library[type_name];
                var proto = entry.prototype;
                var object = self.cloner.clone(proto);
                if (object != null && constructor != null)
                    object.*constructor(pos:[flat], named:[flat,named]);
                return object;
            }
            return null;
        }

        function get_prototype(var type)
        {
            using Rosella.get_type_name;

            string type_name = get_type_name(type);
            return self.library[type_name].prototype;
        }

        function get_constructor(var type)
        {
            using Rosella.get_type_name;

            string type_name = get_type_name(type);
            return self.library[type_name].constructor;
        }
    }
}}
