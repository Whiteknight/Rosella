namespace Rosella
{
    /* ItemBuilder is the class that handles resolving a single type.
       ItemBuilder is an abstract parent class and should not be used
       directly. You should use one of the existing subclasses or a custom
       subclass instead.
    */
    class ItemBuilder
    {
        var method_initializers;

        // Set up the list of method initializers
        function method_initializers(var inits)
        {
            int have_inits = 0;
            ${ defined have_inits, inits };
            if (have_inits)
                self.method_initializers = inits;
            else
                self.method_initializers = [];
        }

        // Resolve the item, and execute any initializers on it
        function resolve()
        {
            var item = self.resolve_instance();
            for (var init in self.method_initializers) {
                init.execute(item);
            }
            return item;
        }

        // Get a fresh, uninitialized instance object. This must be subclassed
        function resolve_instance()
        {
            using Rosella.Error.must_subclass;
            must_subclass("Rosella::ItemBuilder", "resolve_instance");
        }
    }

    namespace ItemBuilder
    {
        // An ItemBuilder subclass for resolving an instance
        class Instance : Rosella.ItemBuilder
        {
            var instance;

            function BUILD(var obj, var inits)
            {
                self.instance = obj;
                self.method_initializers(inits);
            }

            function resolve_instance()
            {
                return self.instance;
            }
        }

        // An ItemBuilder for resolving from a P6protoobject
        class P6protoobject : Rosella.ItemBuilder
        {
            var proto;

            function BUILD(var proto, var inits)
            {
                self.proto = proto;
                self.method_initializers(inits);
            }

            function resolve_instance()
            {
                return self.proto.new();
            }
        }

        // An ItemBuilder for resolving from a Parrot Class PMC (or anything
        // that can be resolved to a class using Rosella.build)
        class ParrotClass : Rosella.ItemBuilder
        {
            var class_obj;
            var init_pmc;

            function BUILD(var class_obj, var init, var inits)
            {
                self.class_obj = class_obj;
                self.init_pmc = init;
                self.method_initializers(inits);
            }

            function resolve_instance()
            {
                int have_init_pmc = 0;
                var init_pmc = self.init_pmc;
                ${ defined have_init_pmc, init_pmc };
                var object = null;
                var class_obj = self.class_obj;
                if (have_init_pmc) {
                    var init_pmc = self.init_pmc;
                    ${ new object, class_obj, init_pmc };
                } else
                    ${ new object, class_obj };
                return object;
            }
        }

        // An ItemBuilder to resolve from a prototype by cloning
        class Prototype : Rosella.ItemBuilder
        {
            var prototype;

            function BUILD(var proto, var inits)
            {
                self.prototype = proto;
                self.method_initializers(inits);
            }

            function resolve_instance() {
                var object = null;
                var prototype = self.prototype;
                ${ clone object, prototype };
                return object;
            }
        }

        // An ItemBuilder to resolve from a factory method object
        class FactoryMethod : Rosella.ItemBuilder
        {
            var sub;
            var arg_initializers;

            function BUILD(var sub, var inits, var arg_inits)
            {
                self.sub = sub;
                self.arg_initializers = arg_inits;
                self.method_initializers(inits);
            }

            function resolve_instance()
            {
                var pos = [];
                var named = {};
                for (var arg_init in self.arg_initializers)
                    arg_init.prepare_args(pos, named);
                var sub = self.sub;
                return sub(pos:[flat], named:[flat,named]);
            }
        }
    }
}
