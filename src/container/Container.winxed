namespace Rosella.Container
{
    const string DEFAULT_CONTAINER_GLOBAL = "Rosella.Container.default_container";

    // A global-point of access for a default Container instance. Returns
    // the globally-registered default Container instance. By default this
    // is a plain vanilla Container, but that instance can be overridden.
    // Notice that you do not need to use this for your program, it is
    // only a convenience to help bootstrap dependency injection.
    function default_container()
    {
        return Rosella.Globals.autoget_global(DEFAULT_CONTAINER_GLOBAL,
            function() { return new Rosella.Container(); }
        );
    }

    // Set the globally registered Container instance to something besides
    // the default.
    function set_default_container(var container)
    {
        Rosella.Globals.register_global(DEFAULT_CONTAINER_GLOBAL, container);
    }
}

/* Dependency Injection / Inversion of Control Container
    The Container class implements a dependency injection and type
    resolution system. Types are registered with the container, and later
    instances of those types can be resolved according to a set of
    resolution rules.
*/
class Rosella.Container
{
    var type_registry;
    var aliases;

    // Constructor
    function Container()
    {
        self.type_registry = Rosella.get_pmc_keyed_hash();
        self.aliases = {};
    }

    /* Public Container API
        These routines form the core of the public API for the Container library.
        With these routines you can register and resolve objects.
    */

    // Register an object type. A sequence of modifiers such as
    // Rosella.Container.Resolver or Rosella.Container.Option objects can be
    // passed to modify resolution behavior. If we overwrite an existing
    // registration, the old version is kept in a stack.
    function register(var type, var options [slurpy])
    {
        var type_class = self.__get_type_class(type);
        if (type_class == null)
            Rosella.Error.error("Attempt to register invalid or null type");
        :(var resolver, var build_options) = self.__sort_options_register(type_class, options);
        if (resolver == null)
            resolver = new Rosella.Container.Resolver.Type(type);
        resolver.set_options(build_options);
        if (exists self.type_registry[type_class])
            resolver.previous(self.type_registry[type_class]);
        self.type_registry[type_class] = resolver;
        return self;
    }

    // Remove registration for the given type. Remove the current registration.
    // If a previous registation for the type exists, that becomes the current
    // registration for the type
    function unregister(var type)
    {
        var type_class = self.__get_type_class(type);
        if (type_class == null)
            Rosella.Error.invalid("Cannot unregister unknown class");
        if (exists self.type_registry[type_class]) {
            var old = self.type_registry[type_class].previous();
            if (old == null)
                delete self.type_registry[type_class];
            else
                self.type_registry[type_class] = old;
        }
        return self;
    }

    // Completely unregister the given type including all previous registrations.
    function unregister_all(var type)
    {
        var type_class = self.__get_type_class(type);
        if (type_class == null)
            Rosella.Error.invalid("Cannot unregister unknown class");
        if (exists self.type_registry[type_class])
            delete self.type_registry[type_class];
    }

    // Determine if the type is registered
    function is_registered(var type)
    {
        var type_class = self.__get_type_class(type);
        if (type_class == null)
            Rosella.Error.error("Cannot check registration status of unknown type");
        if (exists self.type_registry[type_class])
            return true;
        return false;
    }

    // Add a string name alias for the given type.
    function alias(var type, string name)
    {
        var type_class = self.__get_type_class(type);
        if (type_class == null)
            Rosella.Error.error("Cannot setup alias '%s' for unknown class", name);
        self.aliases[name] = type_class;
        return self;
    }

    // Resolve an object of the given type, or the given alias. Options such as
    // Rosella.Container.Resolver or Rosella.Container.Option objects passed
    // here override those provided during registration.
    function resolve(var type, var options [slurpy])
    {
        var type_class = self.__get_type_class(type);
        if (type_class == null)
            Rosella.Error.error("Cannot resolve unknown class");
        return self.__resolve_internal(type_class, options);
    }

    /* Private Helper Methods
    */

    function __get_type_class(var type)
    {
        var type_class = null;
        if (type instanceof "String") {
            string type_s = string(type);
            if (exists self.aliases[type_s])
                type_class = self.aliases[type_s];
        }
        if (type_class == null)
            type_class = Rosella.get_type_class(type);
        return type_class;
    }

    // Sort out a list of options for registration
    function __sort_options_register(var type, var options)
    {
        var resolver = null;
        var lifetime_manager = null;
        var build_options = [];
        for (var option in options) {
            if (isa(option, class Rosella.Container.Resolver)) {
                if (resolver != null)
                    self.__multiple_resolvers_error(type);
                resolver = option;
                continue;
            } else if (isa(option, class Rosella.Container.Option)) {
                push(build_options, option);
                continue;
            } else if (isa(option, class Rosella.Container.LifetimeManager)) {
                lifetime_manager = option;
                continue;
            } else {
                if (resolver != null)
                    self.__multiple_resolvers_error(type);
                // it's an instance
                resolver = new Rosella.Container.Resolver.Instance(option);
                continue;
            }
            Rosella.Error.error("Invalid option at registration: %s", typeof(option));
        }
        return resolver, build_options;
    }

    // TODO: Add some sort of flag to say whether option lists should be replaced or merged
    // TODO: Add in a way that we can over-ride arguments on the resolver here.

    // Sort out a list of options for registration
        function __sort_options_resolve(var type, var options)
    {
        var resolver = null;
        var build_options = [];
        for (var option in options) {
            if (option instanceof Rosella.Container.Resolver) {
                if (resolver != null)
                    self.__multiple_resolvers_error(type);
                resolver = option;
                continue;
            } else if (option instanceof Rosella.Container.Option) {
                push(build_options, option);
                continue;
            }
            Rosella.Error.error("Invalid option at type resolution: %s", typeof(option));
        }
        return resolver, build_options;
    }

    // Perform the actual type resolution.
    function __resolve_internal(var type, var options)
    {
        :(var resolver, var build_options) = self.__sort_options_resolve(type, options);
        if (resolver == null) {
            if (exists self.type_registry[type])
                resolver = self.type_registry[type];
            if (resolver == null) {
                resolver = new Rosella.Container.Resolver.Type(type);
                resolver.set_options([]);
                // TODO: Should we auto-register this in the type library, or
                // create a new resolver each time?
            }
        }
        var instance = resolver.resolve(self, build_options);
        return instance;
    }

    // Throw an error if multiple Resolver objects are specified for a single
    // type
    function __multiple_resolvers_error(var type)
    {
        Rosella.Error.error("Multiple resolvers specified for type registration %s", Rosella.get_type_name(type));
    }
}
