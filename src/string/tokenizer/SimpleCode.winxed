class Rosella.String.Tokenizer.SimpleCode : Rosella.String.Tokenizer
{
    var operators;
    var cclasses;
    var keywords;

    function SimpleCode()
    {
        self.Tokenizer();
        self.operators = new Rosella.String.Trie();
        int cclasses[] = [CCLASS_WORD, CCLASS_NUMERIC, CCLASS_WHITESPACE, CCLASS_PUNCTUATION];
        self.cclasses = cclasses;
        self.keywords = {};
    }

    function add_keyword(string keyword, var value)
    {
        self.keywords[keyword] = value;
    }

    function add_operator(string operator, var value)
    {
        self.operators.add(operator, value);
    }

    function lex_next_token()
    {
        string str = self.data;
        int len = length(str);
        int curr_cclass = Rosella.String.Tokenizer.CClass.__get_first_cclass(str, self.cclasses);
        if (curr_cclass == 0)
            return new Rosella.String.Tokenizer.Token("unknown sequence", self.__get_chars(1), null);

        int next_idx = find_not_cclass(curr_cclass, str, 0, len);
        string chars = self.__get_chars(next_idx);
        if (curr_cclass == CCLASS_WHITESPACE)
            return new Rosella.String.Tokenizer.Token("whitespace", chars, null);
        if (curr_cclass == CCLASS_PUNCTUATION) {
            :(string seq, var value, string remainder) = self.operators.get_value(chars);
            while(remainder != null && remainder != "") {
                :(string this_seq, var this_value, string rem) = self.operators.get_value(remainder);
                var temp = new Rosella.String.Tokenizer.Token("operator", this_seq, this_value);
                self.unget_token(temp);
                remainder = rem;
            }
            return new Rosella.String.Tokenizer.Token("operator", seq, value);
        }
        if (exists self.keywords[chars])
            return new Rosella.String.Tokenizer.Token("keyword", chars, self.keywords[chars]);
        return new Rosella.String.Tokenizer.Token("identifier", chars, null);
    }
}
