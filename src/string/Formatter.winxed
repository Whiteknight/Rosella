class Rosella.String.Formatter
{
    var converters;
    var default_converter;

    function Formatter()
    {
        self.converters = Rosella.get_pmc_keyed_hash();
        self.default_converter = new Rosella.String.Converter.Sprintf();
    }

    function add_converter(var type, var converter)
    {
        var type_c = Rosella.get_type_class(type);
        self.converters[type_c] = converter;
    }

    function format(string fmt, var args [slurpy])
    {
        int cclass_numeric = Rosella.String.get_character_class("numeric");
        string raw_args[] = [];
        var cache = {};

        string output_array[] = [];
        int fmt_len = length(fmt);
        int out_idx = 0;
        int cur_idx = 0;
        int next_idx = 0;

        while(cur_idx < fmt_len) {
            cur_idx = next_idx;
            next_idx = index_ssi(fmt, "{", cur_idx);
            if (cur_idx != next_idx)
                output_array[out_idx++] = substr(fmt, cur_idx, next_idx - cur_idx);

            if (next_idx == -1) {
                output_array[out_idx++] = substr(fmt, cur_idx);
                break;
            }
            // Else, we've found a format sequence.
            next_idx++;
            if (fmt[next_idx] == "{") {
                output_array[out_idx++] = "{";
                continue;
            }
            int ptr = index_ssi(fmt, "}", next_idx);
            if (ptr == -1) {
                output_array[out_idx++] = substr(fmt, cur_idx);
                break;
            }
            :(int idx, string f) = self.__get_placeholder(fmt, next_idx, ptr);
            next_idx = ptr + 1;
            output_array[out_idx++] = self.__get_string_value(args, cache, idx, f);
        }
        return join("", output_array);
    }

    function __get_placeholder(string fmt, int start_idx, int end_idx)
    {
        string f = substr(fmt, start_idx, end_idx - start_idx);
        var p = split(":", f);
        int num_p = elements(p);
        if (p == 0 || p > 2)
            Rosella.Error.invalid(__FUNCTION__, "Invalid format '%s'", f);
        if (p == 1)
            return int(p[0]), "s";
        if (p == 2)
            return int(p[0]), string(p[1]);
    }

    function __get_string_value(var args, var cache, int idx, string fmt)
    {
        string key = string(idx) + ":" + fmt;
        if (exists cache[key])
            return cache[key];
        var obj = args[idx];
        var obj_c = typeof(obj);
        var converter = null;
        if (exists self.converters[obj_c])
            converter = self.converters[obj_c];
        else
            converter = self.default_converter;
        string value = converter.convert(obj, fmt);
        Rosella.IO.sayf("Got value '%s' from '%s' fmt '%s'", value, obj, fmt);
        cache[key] = value;
        return value;
    }
}
