/* String Namespace
    This namespace contains a number of utility functions for working with
    strings. Some of the utility functions are provided as built-ins by
    various languages such as NQP. These are provided as a way to be
    language-neutral and immune to possible future changes in language and
    core VM behaviors.
*/
namespace Rosella.String
{
    // Determine if the string is null or empty
    function null_or_empty(string s)
    {
        return s == null || length(s) == 0;
    }

    // Look up the character class ID number by name.
    function get_character_class(string name)
    {
        switch (name) {
            // Generic classes
            case "any":          return CCLASS_ANY;
            case "none":         return CCLASS_NONE;

            // Word-like characters
            case "alphabetic":   return CCLASS_ALPHABETIC;
            case "uppercase":    return CCLASS_UPPERCASE;
            case "lowercase":    return CCLASS_LOWERCASE;
            case "word":         return CCLASS_WORD;

            // Numbers
            case "numeric":      return CCLASS_NUMERIC;
            case "hexadecimal":  return CCLASS_HEXADECIMAL;

            case "alphanumeric": return CCLASS_ALPHANUMERIC;

            // Other
            case "punctuation":  return CCLASS_PUNCTUATION;
            case "printing":     return CCLASS_PRINTING;
            case "graphical":    return CCLASS_GRAPHICAL;

            // Whitespace
            case "whitespace":   return CCLASS_WHITESPACE;
            case "blank":        return CCLASS_BLANK;
            case "newline":      return CCLASS_NEWLINE;

            // Control characters
            case "control":      return CCLASS_CONTROL;

            default:
                Rosella.Error.error("Could not find character class '" + name + "'");
        }
    }

    // Find the first instance of something not in the class. Return -1
    // if all characters are in the class
    function first_not_cclass(string str, int cclass)
    {
        int len = length(str);
        int idx = find_not_cclass(cclass, str, 0, len);
        if (idx >= len)
            return -1;
        return idx;
    }

    // Trim items off the start of the string that match the given cclass.
    // defaults to CCLASS_WHITESPACE
    function trim_start(string str, int cclass = -1)
    {
        if (cclass < 0)
            cclass = CCLASS_WHITESPACE;
        int idx = first_not_cclass(str, cclass);
        if (idx == -1)
            return "";
        if (idx == 0)
            return str;
        return substr(str, idx);
    }

    // Find the last instance of a character not in the class. Return -1
    // if all characters are in the class
    function last_not_cclass(string str, int cclass)
    {
        int idx = -1;
        int len = length(str);
        for (int i = len - 1; i >= 0; i--) {
            if (!is_cclass(cclass, str, i)) {
                idx = i + 1;
                break;
            }
        }
        return idx;
    }

    // Trim items off the end of the string which match the given cclass.
    // defaults to CCLASS_WHITESPACE
    function trim_end(string str, int cclass = -1)
    {
        if (cclass < 0)
            cclass = CCLASS_WHITESPACE;
        int len = length(str);
        int idx = last_not_cclass(str, cclass);

        // If we never found something that wasn't in the class, the
        // whole string gets trimmed
        if (idx == -1)
            return "";

        // If the last character is not in the cclass, the whole string is
        // good.
        if (idx == len - 1)
            return str;

        return substr(str, 0, idx);
    }

    // Trim characters from both the start and end of the string which
    // match the given character class. Defaults to CCLASS_WHITESPACE
    function trim(string str, int cclass = -1)
    {
        if (cclass < 0)
            cclass = CCLASS_WHITESPACE;
        int start_idx = first_not_cclass(str, cclass);
        if (start_idx == -1)
            return "";
        int end_idx = last_not_cclass(str, cclass);
        if (end_idx == -1)
            return "";
        return substr(str, start_idx, end_idx - start_idx);
    }

    // Determine if all characters in the string are members of the class
    function is_all_cclass(string str, int cclass)
    {
        int idx = first_not_cclass(str, cclass);
        return idx == -1;
    }

    // Determine if all characters in the string are members of the class
    function is_all_cclass(string str, string cclass_name)
    {
        int cclass = get_character_class(cclass_name);
        int idx = first_not_cclass(str, cclass);
        return idx == -1;
    }

    // sprintf wrapper function
    function sprintf(string format, var args [slurpy])
    {
        return Winxed_Builtins.sprintf(format, args);
    }

    const string DEFAULT_FORMAT_PRINTER = "Rosella.String.format_printer";
    function format_printer()
    {
        return Rosella.Globals.autoget_global(DEFAULT_FORMAT_PRINTER,
            function() {
                return new Rosella.String.FormatPrinter();
            }
        );
    }

    function format(string format, var args [slurpy])
    {
        return format_printer().format_array(args, format);
    }

    function format_obj(string format, var obj)
    {
        return format_printer().format(obj, format);
    }

    // Pad the start of the string with the given substring. Default
    // pad is " "
    function pad_start(string str, int total_width, string char = " ")
    {
        string pad = __create_pad(str, total_width, char);
        return pad + str;
    }

    // Pad the end of the string with the given substring. Default
    // pad is " "
    function pad_end(string str, int total_width,
            string char = " ")
    {
        string pad = __create_pad(str, total_width, char);
        return str + pad;
    }

    // Remove the given number of characters from the start of the string.
    function remove_start(string str, int start)
    {
        if (start < 0 || start > length(str))
            Rosella.Error.error("Start index outside the bounds of the string");
        return substr(str, start);
    }

    // Remove the given number of characters from the end of the string.
    function remove_end(string str, int count)
    {
        if (count < 0 || count > length(str))
            Rosella.Error.error("Length is outside the bounds of the string");
        return substr(str, 0, count);
    }

    // Remove a block of characters from the middle of the string
    function remove_middle(string str, int start, int count)
    {
        int len = length(str);
        if (start < 0 || count < 0 || start + count > len)
            Rosella.Error.error("Cannot substr outside the bounds of the string");
        string first_half = substr(str, 0, start);
        string second_half = substr(str, start + count);
        return first_half + second_half;
    }

    // Replace all instances of a substring with a given substring
    function replace_all(string str, string target, string subst)
    {
        return join(subst, split(target, str));
    }

    // Calculate the Levenshtein distance between the two strings.
    function distance(string str1, string str2)
    {
        int n = length(str1), m = length(str2); // str1 and str2 sizes

        // Shortcuts for empty strings.
        if (n == 0)
            return m;
        if (m == 0)
            return n;

        var matrix = [];

        // Fill matrix with initial values.
        for (int i = 0; i <= m; i++)
            matrix[i] = [];

        for (int i = 0; i <= m; i++)
            matrix[i][0] = i;
        for (int j = 0; j <= n; j++)
            matrix[0][j] = j;

        for (int j = 1; j <= n; j++) {
            for (int i = 1; i <= m; i++) {
                string schar = substr(str1, j - 1, 1);
                string tchar = substr(str2, i - 1, 1);

                if (schar == tchar)
                    matrix[i][j] = matrix[i - 1][j - 1];
                else {
                    matrix[i][j] = __minimum(
                        matrix[i - 1][j] + 1,      // a deletion
                        matrix[i, j - 1] + 1,      // an insertion
                        matrix[i - 1][j - 1] + 1   // a substitution
                    );
                }
            }
        }

        return matrix[m][n];
    }

    function to_integer(string s, int radix = 10, int pos = 0)
    {
        :(int i, int len) = parse_to_integer(s, radix, pos);
        return i;
    }

    const string DIGITS = '0 1 2 3 4 5 6 7 8 9 aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ';

    function parse_to_integer(string source, int radix = 10, int pos = 0)
    {
        if (radix <= 1 || radix >= 36)
            Rosella.Error.error("Invalid radix for integer parsing '%d'", radix);
        if (pos < 0 || pos > length(source))
            Rosella.Error.error("Invalid starting position for integer parsing '%d' (length: %d)", pos, length(source));

        int result = 0;
        int startpos = pos;
        while(pos < length(source)) {
            string s0 = substr(source, pos, 1);
            int digitval = index_of_substr(DIGITS, s0);
            if (digitval < 0)
                break;
            digitval = digitval >> 1;
            if (digitval >= radix)
                break;
            result *= radix;
            result += digitval;
            pos++;
        }
        return result, pos - startpos;
    }

    function to_upper(string s)
    {
        return string_to_upper(s);
    }

    function to_lower(string s)
    {
        return string_to_lower(s);
    }

    /*
    function replace_first(string str, string target, string subst, int count)
    {
        using Rosella.Error.not_implemented;
        not_implemented(__FUNCTION__);
    }

    function replace_skip(string str, string target, string subst, int skip)
    {
        using Rosella.Error.not_implemented;
        not_implemented(__FUNCTION__);
    }

    function indexof_start(string str, string substring)
    {
        using Rosella.Error.not_implemented;
        not_implemented(__FUNCTION__);
    }

    function indexof_end(string str, string substring)
    {
        using Rosella.Error.not_implemented;
        not_implemented(__FUNCTION__);
    }
    */

    /* Internal Helper Functions
    */

    // 3-way min function
    function __minimum(int a, int b, int c)
    {
        if (a < b)
            if (a < c)
                return a;
            else
                return c;
        else if (b < c)
            return b;
        else
            return c;
    }

    // Create the padding strings necessary for pad_start and pad_end
    function __create_pad(string str, int total_width, string char)
    {
        int len = length(str);

        if (char == null || length(char) == 0)
            char = " ";
        else if (length(char) > 1)
            char = substr(char, 0, 1);

        if (len < total_width) {
            int diff = total_width - len;
            return repeat_string(char, diff);
        }
        return "";
    }
}
