/* Class Reflector
    This type is a wrapper around Parrot Class routines and provides reflection
    and other abilities
*/
class Rosella.Reflect.Class
{
    var class_obj;      // The target Class PMC
    var constructor;    // The constructor method name for the class
    var attr_cache;     // Cache for Attribute reflectors
    var attrs_raw;      // The Raw list of attributes from the Class
    var method_cache;   // Cache for Method reflectors

    // Constructor. Take a Class PMC
    function Class(var type)
    {
        var class_obj = Rosella.get_type_class(type);
        self.class_obj = class_obj;
        self.attrs_raw = class_obj.attributes();
        self.attr_cache = {};
        self.method_cache = {};

        string class_name = class_obj.name();
        var constructor = class_obj.find_method(class_name);
        if (constructor != null)
            self.constructor = class_name;
        else {
            constructor = class_obj.find_method("BUILD");
            if (constructor != null)
                self.constructor = "BUILD";
        }
    }

    // Set an alternate constructor
    function set_constructor(string constructor)
    {
        self.constructor = constructor == null ? null : constructor;
    }

    // Get the name of the class
    function name()
    {
        return string(self.class_obj.name());
    }

    // Clear caches
    function purge()
    {
        self.attr_cache = {};
        self.method_cache = {};
    }

    // Instantiate a new object of this type
    function new(var p [slurpy], var n [slurpy,named])
    {
        var obj = Rosella.alloc(self.class_obj);
        if (self.constructor != null) {
            string constructor_name = self.constructor;
            if (constructor_name != null && constructor_name != "") {
                var constructor = Rosella.find_named_method(obj, constructor_name);
                if (constructor != null)
                    obj.*constructor(p:[flat], n:[flat]);
            }
        }
        return obj;
    }

    // Get the attribute reflector of the given name
    function get_attr(string attr_name)
    {
        if (exists self.attr_cache[attr_name])
            return self.attr_cache[attr_name];
        if (!(exists self.attrs_raw[attr_name]))
            Rosella.Error.Invalid(__FUNCTION__, "Attribute %s does not exist in class %s", attr_name, string(self.class_obj));
        var attr = new Rosella.Reflect.Class.Attribute(self, attr_name);
        self.attr_cache[attr_name] = attr;
        return attr;
    }

    // Get the value of the given attribute on the given object
    function get_attr_value(string attr_name, var obj)
    {
        var attr = self.get_attr(attr_name);
        return attr.get_value(obj);
    }

    // Set the value of the given attribute on the given object
    function set_attr_value(string attr_name, var obj, var value)
    {
        var attr = self.get_attr(attr_name);
        attr.set_value(obj, value);
    }

    // Invoke the given method on the object
    function invoke_method(string meth_name, var obj, var p [slurpy], var n [slurpy,named])
    {
        var method = self.get_method(meth_name);
        return method.invoke(obj, p, n);
    }

    // Determine if the given object is a member of this class
    function isa(var obj)
    {
        var class_obj = self.class_obj;
        int isa_this = isa(obj, class_obj);
        return isa_this == 0 ? false : true;
    }

    // Determine if the object has a method with the given name
    function can(string meth_name)
    {
        var method = self.class_obj.find_method(meth_name);
        return method == null ? false : true;
    }

    // Get the Method reflector of the given name
    function get_method(string meth_name)
    {
        if (exists self.method_cache[meth_name])
            return self.method_cache[meth_name];
        var raw_method = self.class_obj.find_method(meth_name);
        if (raw_method == null)
            Rosella.Error.invalid(__FUNCTION__, "Cannot find method %s in class %s", meth_name, string(self.class_obj));
        var method = new Rosella.Reflect.Class.Method(self, meth_name, raw_method);
        self.method_cache[meth_name] = method;
        return method;
    }

    /*
    function set_method(string meth_name, var method)
    {
    }

    function set_vtable_override(string vtable_name, var vtable)
    {
    }

    function get_mro()
    {
    }
    */
}
