/* Rosella Reflect Library
    This library provides tools for reflection and introspection of types and
    objects. This namespace provides the primary API for interacting with this
    library.

    These functions are designed to run in context. In all cases the term
    "current Sub" is used to mean the subroutine that is the direct caller of
    the routines in this namespace.
*/
namespace Rosella.Reflect
{
    // Get the current Module (packfile) where the current sub is located
    function get_current_module()
    {
        var cur_ctx = get_context();
        var pf = cur_ctx.caller_ctx.current_sub.get_packfile();
        return get_module_from_packfile(pf);
    }

    function get_module_from_packfile(var pf)
    {
        var m = __get_cached_reflector(pf, "module");
        if (m == null) {
            m = new Rosella.Reflect.Module(pf);
            __set_cached_reflector(pf, "module", m);
        }
        return m;
    }

    // Get the current Sub object
    function get_current_sub()
    {
        var cur_ctx = get_context();
        var sub = cur_ctx.caller_ctx.current_sub;
        return sub;
    }

    function get_current_function()
    {
        // TODO: Cache the Function as a prop on the Sub for easy lookup
        var cur_ctx = get_context();
        var sub = cur_ctx.caller_ctx.current_sub;
        var f = new Rosella.Reflect.Function(sub);
        return f;
    }

    // Get the current CallContext PMC
    function get_current_context()
    {
        var cur_ctx = get_context();
        var ctx = cur_ctx.caller_ctx;
        return ctx;
    }

    // Get the current object, if the current Sub is a method. Return null
    // otherwise.
    function get_current_object()
    {
        var cur_ctx = get_context();
        var obj = cur_ctx.caller_ctx.current_object;
        return obj;
    }

    // Get the current class if the current Sub is a method. Return null
    // otherwise
    function get_current_class()
    {
        var cur_ctx = get_context();
        var obj = cur_ctx.caller_ctx.current_object;
        if (obj == null)
            return null;
        var c = typeof(obj);
        return get_class_reflector(c);
    }

    // Get a Rosella.Reflect.Class reflector object for the current class.
    // This value may be cached
    function get_class_reflector(var c)
    {
        var rc = __get_cached_reflector(c, "class");
        if (rc == null) {
            rc = new Rosella.Reflect.Class(c);
            __set_cached_reflector(c, "class", rc);
        }
        return rc;
    }
}
