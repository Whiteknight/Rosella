/* Event Manager Class
    The Event.Manager class is the public API for the Event library. It
    provides routines for managing and raising events, and for managing
    lists of subscribers.

    Events are named data containers. When an event is raised, the event
    is populated with various bits of data and is passed to all
    subscribers. Subscribers are Actions (from theRosella.Action library)
    arranged in Queues. Queues are named sets of subscriber actions, which
    can be used to filter events, toggle groups of subscribers, limit the
    subscribers that receive certain events, etc.

    Event.Manager contains a default Queue. If no queue name is specified
    in a subscriber registration call, the default queue is used.
    Otherwise, a specific queue can be created by name.

    Registering a subscriber to a queue automatically creates the Queue
    and the Event if they do not already exist. Likewise, most operations
    should be transparent: If an event or queue does not already exist
    and it is required, it is created; If an event or queue does not
    exist, operations like raise on that even will do nothing. The idea
    is that publishers and subscribers can remain completely unaware of
    what the other side has done.
*/
class Rosella.Event.Manager
{
    var events;

    // Constructor.
    function Manager()
    {
        self.events = {};
    }

    /* Event Management Routines
        Events are registered by name. Names must be unique. If you
        attempt to register a new event with the same name as an existing
        event, the old one will be silently overwritten.
    */

    // Register a new event by name. The object registered must be a valid
    // Event.
    function register_event(string event_name, var event)
    {
        if (!Rosella.isa_type(class Rosella.Event, event))
            Rosella.Error.invalid(__FUNCTION__, "not a valid event");
        if (exists self.events[event_name])
            Rosella.Error.invalid(__FUNCTION__, "Cannot register a new method named " + event_name);
        else
            self.events[event_name] = event;
    }

    // Remove an event by name if it exists.
    function remove_event(string event_name)
    {
        if (exists self.events[event_name])
            delete self.events[event_name];
    }

    function get_event(string event_name)
    {
        if (exists self.events[event_name])
            return self.events[event_name];
        return self.create_event(event_name);
    }

    function create_event(string event_name)
    {
        var e = new Rosella.Event();
        self.register_event(event_name, e);
        return e;
    }

    // Get a count of the number of events in the manager.
    function count_events() { return elements(self.events); }

    function get_pmc_keyed[vtable](string event_name)
    {
        return self.get_event(event_name);
    }

    function set_pmc_keyed[vtable](string event_name, var e)
    {
        self.register_event(event_name, e);
    }

    function elements[vtable]()
    {
        return elements(self.events);
    }

    function delete_keyed(string event_name)
    {
        self.remove_event(event_name);
    }

    function exists_keyed(string event_name)
    {
        if (exists self.events[event_name])
            return true;
        return false;
    }
}

