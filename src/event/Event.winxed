namespace Rosella
{
    /* Event class. An Event is a collection of subscribers (Rosella.Action).
       When we raise the event, all the subscribers are notified.

       Events invoke Actions with only a single argument, the Event itself.
       Actions are allowed to come packaged with their own Action.Arguments
       to fill out a parameter list, but if an Action.Argument overwrites
       the first positional argument (:position(0)), it will overwrite the
       event object being passed.

       When the event is raised, it contains the given arguments as payload.
       The callee can access those arguments in the Event, introspect other
       information about the Event, and set it to handled to prevent other
       Actions from receiving it.
    */
    class Event
    {
        var manager;
        var current_action_name;
        var current_pos_payload;
        var current_named_payload;
        var handled;
        var id_count;

        function Event(var manager, int start_id)
        {
            self.manager = manager;
            self.id_count = start_id;
        }

        /* Payload Routines
            The Event class provides read-only Hash- and Array-like access for
            payload values. Also, the payload properties can be accessed
            directly as a raw Array and Hash.
        */

        function get_pmc_keyed[vtable](var key)
        {
            return self.current_named_payload[key];
        }

        function get_pmc_keyed_int[vtable](int key)
        {
            return self.current_pos_payload[key];
        }

        function positional_payload() { return self.current_pos_payload; }

        function named_payload() { return self.current_named_payload; }

        /* Event Raise Routines
        */

        // Get the name of the currently executing Action. This is only
        // defined during Event raise
        function action_name() { return self.current_action_name; }

        // Set to 0 at the beginning of the raise sequence. The Event
        // continues to execute its member actions until handled is set to 1
        // or until it runs out of actions
        function handled(int handled [optional], int has_h [opt_flag])
        {
            if (has_h)
                self.handled = handled;
            return self.handled;
        }

        function prepare_to_raise(var pos, var named)
        {
            self.handled = 0;
            self.current_pos_payload = pos;
            self.current_named_payload = named;
        }

        function set_active_subscriber(string name)
        {
            self.current_action_name = name;
        }

        /* Internal Routines
        */

        // Get a new ID name which does not conflict with an existing entry
        // name
        function get_new_id()
        {
            string id = null;
            do {
                self.id_count = self.id_count + 1;
                id = "__action_" + string(self.id_count);
            } while (exists self.actions[id]);
            return id;
        }
    }
}
