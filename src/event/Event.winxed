namespace Rosella.Event
{
    const string DEFAULT_SUBSCRIBER_FACTORY = "Rosella.Event.default_subscriber_factory";
    function default_subscriber_factory()
    {
        var d = new Rosella.Event.Subscriber.Factory();
        while(1)
            yield(d);
    }
}

/* Event Class.
    An Event is basically a data object that holds information from the
    publisher to transmit to various subscribers. When an event is raised,
    the event and all its data are passed to Queues and, ultimately, to
    subscribers.

    See the Queue and Manager class documentation for more details.
*/
class Rosella.Event
{
    var subscribers;
    var subscriber_factory;
    var current_pos_payload;
    var current_named_payload;

    // Constructor
    function Event()
    {
        self.subscribers = {};
        self.subscriber_factory = Rosella.Event.default_subscriber_factory();
    }

    function subscribe(string name, var action, string dispatch)
    {
        var subscriber = self.subscriber_factory.create(action, dispatch);
        self.subscribers[name] = subscriber;
    }

    function unsubscribe(event_name)
    {
        if (exists self.subscribers[event_name])
            delete self.subscribers[event_name];
    }

    /* Payload Routines
        The Event class provides read-only Hash- and Array-like access for
        payload values. Also, the payload properties can be accessed
        directly as a raw Array and Hash.
    */

    // Get named data by name
    function get_pmc_keyed[vtable](var key)
    {
        return self.current_named_payload[key];
    }

    // Get position data by index
    function get_pmc_keyed_int[vtable](int key)
    {
        return self.current_pos_payload[key];
    }

    // Get the raw positionals array
    function positional_payload()
    {
        return self.current_pos_payload;
    }

    // Get the raw named hash
    function named_payload()
    {
        return self.current_named_payload;
    }

    /* Event Raise Routines
    */

    function prepare_to_publish(var p, var n)
    {
        self.current_pos_payload = p;
        self.current_named_payload = n;
    }

    function publish(var pos [slurpy], var named [slurpy,named])
    {
        self.prepare_to_publish(pos, named);
        for (string subscriber_name in self.subscribers) {
            var subscriber = self.subscribers[subscriber_name];
            if (subscriber != null)
                subscriber.execute(self);
        }
    }
}
