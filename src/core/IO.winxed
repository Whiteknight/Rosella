namespace Rosella
{
    /* Rosella IO Routines
        These are convenience routines for doing some common IO-related tasks
        in Rosella.
    */
    namespace IO
    {
        // swap the interpreter standard input, error and output handles with
        // a named hash of replacements. Return a hash of the previous values
        // by name
        function swap_handles(var handles)
        {
            var save_handles = {};
            var interp = getinterp();

            if (exists handles["stderr"]) {
                save_handles["stderr"] = interp.stderr_handle();
                interp.stderr_handle(handles["stderr"]);
            }

            if (exists handles["stdin"]) {
                save_handles["stdin"] = interp.stdin_handle();
                interp.stdin_handle(handles["stdin"]);
            }

            if (exists handles["stdout"]) {
                save_handles["stdout"] = interp.stdout_handle();
                interp.stdout_handle(handles["stdout"]);
            }

            return save_handles;
        }

        function capture_output(int together, var func,
                var err_func [optional], int has_err [opt_flag])
        {
            var stdout = new "StringHandle";
            stdout.open("blah", "rw");
            var stderr;
            if (together)
                stderr = stdout;
            else {
                stderr = new "StringHandle";
                stderr.open("blah", "rw");
            }
            var save_handles = swap_handles({"stdout" : stdout, "stderr" : stderr});
            try {
                func();
            } catch(e) {
                if (has_err)
                    err_func(e);
            }
            swap_handles(save_handles);
            string stdout_text = stdout.readall();
            if (together)
                return stdout_text;
            else
                return stdout_text, stderr.readall();
        }

        function execute_pipe(string cmd,
                var on_err [optional], int has_err [opt_flag])
        {
            var pipe = new "FileHandle";
            pipe.encoding('utf8');
            pipe.open(cmd, "rp");
            string output = pipe.readall();
            pipe.close();
            int exit_status = pipe.exit_status();
            if (exit_status != 0 && has_err && on_err != null)
                on_err(exit_status);
            return output;
        }

        // Convenience routines for performing formatted output
        function sayf(string fmt, var args[slurpy]) { say(sprintf(fmt, args)); }
        function printf(string fmt, var args[slurpy]) { print(sprintf(fmt, args)); }
    }
}
