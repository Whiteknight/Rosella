$include_const "iglobals.pasm";

/* Utilities for Parrot-Specific things
*/
namespace Rosella.Parrot
{
    inline __get_config_hash() return var
    {
        return getinterp()[IGLOBALS_CONFIG_HASH];
    }

    // Get the Config hash
    function get_config_hash()
    {
        return __get_config_hash();
    }

    // Return true if this is a Linux machine
    function is_linux()
    {
        return __get_config_hash()["osname"] == "linux";
    }

    // Return true if this is a Windows machine
    function is_windows()
    {
        return __get_config_hash()["osname"] == "windows";
    }

    // Get an array of strings representing a backtrace from the caller
    function get_backtrace_strings()
    {
        var cur_ctx = get_context();
        var last_ctx = cur_ctx.caller_ctx;
        return format_backtrace(last_ctx.backtrace());
    }

    // Get an array of strings representing a backtrace from the exception
    function get_backtrace_ex_strings(var ex)
    {
        var bt = ex.backtrace();
        return format_backtrace(bt);
    }

    // Execute a function. Catch any exceptions and print the message and
    // backtrace out to a specified handle. If no handle is specified,
    // use stdout.
    function try_report(var sub, var handle = null)
    {
        if (handle == null)
            handle = getstdout();
        try {
            sub();
        } catch (e) {
            var fmt = Rosella.Parrot.exception_formatter();
            handle.print(fmt.format_default(e));
        }
    }

    // private routine. Format backtrace information into an array of
    // human-readable strings
    function format_backtrace(var bt)
    {
        var bts = [];
        var fmt = Rosella.Parrot.exception_formatter();
        for (int i = 0; i < elements(bt); i++) {
            var sub; string text;
            :(sub, text) = fmt.format_frame_default(bt[i]);
            bts[i] = text;
            if (sub == null)
                break;
        }
        return bts;
    }

    // Get the default exception formatter object
    function exception_formatter()
    {
        return Rosella.StringFormatter.autoget_type_formatter("Exception",
            function() { return new Rosella.Parrot.ExceptionFormatter(); }
        );
    }
}

class Rosella.Parrot.ExceptionFormatter : Rosella.StringFormatter
{
    function ExceptionFormatter() { }

    // Create a string from an object and a format string
    function format(var obj, string fmt)
    {
        var sb = new 'StringBuilder';
        push(sb, obj.message);
        push(sb, "\n");
        var bt = obj.backtrace();
        for (int i = 0; i < elements(bt); i++) {
            :(var sub, string text) = self.format_frame(bt[i], fmt);
            push(sb, text);
            if (sub == null)
                break;
        }
        return sb;
    }

    // Create a string from the object using a default formatting rule
    function format_default(var obj)
    {
        var sb = new 'StringBuilder';
        push(sb, obj.message);
        push(sb, " at \n");
        var bt = obj.backtrace();
        for (int i = 0; i < elements(bt); i++) {
            :(var sub, string text) = self.format_frame_default(bt[i]);
            push(sb, text);
            push(sb, "\n");
            if (sub == null)
                break;
        }
        return sb;
    }

    // Format a frame
    function format_frame(var frame, var f)
    {
        var sub = frame["sub"];
        string subname = (sub == null) ? "(entry)" : string(sub);
        var annotations = frame["annotations"];
        string filename = annotations["file"];
        if (filename == null || filename == "")
            filename = "<Unknown File>";
        int lineno = annotations["line"];
        string ns;
        string hll_ns;
        if (sub == null) {
            ns = "";
            hll_ns = "";
        } else {
            var ns_parts = sub.get_namespace().get_name();
            hll_ns = ns_parts.shift();
            ns = join(".", ns_parts);
        }

        if (contains_substr(f, "NS"))   f = f.replace("NS", ns);
        if (contains_substr(f, "HLL"))  f = f.replace("HLL", hll_ns);
        if (contains_substr(f, "SUB"))  f = f.replace("SUB", subname);
        if (contains_substr(f, "FILE")) f = f.replace("FILE", filename);
        if (contains_substr(f, "LINE")) f = f.replace("LINE", string(lineno));
        return sub, f;
    }

    // Format a frame using the default formatting
    function format_frame_default(var frame)
    {
        var sub = frame["sub"];
        string subname = (sub == null) ? "(entry)" : string(sub);
        var annotations = frame["annotations"];
        string filename = annotations["file"];
        if (filename == null || filename == "")
            filename = "<Unknown File>";
        int lineno = annotations["line"];
        string ns;
        if (sub == null) {
            ns = "";
        } else {
            var ns_parts = sub.get_namespace().get_name();
            ns_parts.shift();
            ns = join(".", ns_parts);
        }
        string text = Winxed_Builtins.sprintf("\t[%s] '%s'\t(%s  %d)", [ns, subname, filename, lineno]);
        return sub, text;
    }
}
