namespace Rosella
{
    /* Global Instance Registry
        The routines in this file are used to establish a registry for global
        instances. This is useful for situations where we would like to keep
        a single instance of a type around globally, or be able to inject
        global behavior at runtime
    */

    const string DEFAULT_FACTORY_GLOBAL = "Rosella.default_factory";
    const string DEFAULT_LIBREGISTRY_GLOBAL = "Rosella.default_libregistry";

    // Get the hash of globals. Private routine. Should not be called
    // externally
    function __get_globals()
    {
        var globals = {
            DEFAULT_FACTORY_GLOBAL : new Rosella.ObjectFactory(),
            DEFAULT_LIBREGISTRY_GLOBAL : {}
        };
        while (1)
            yield globals;
    }

    // Get a global by name
    function get_global(string name)
    {
        var globals = __get_globals();
        if (exists globals[name])
            return globals[name];
        return null;
    }

    // Register a new global by name
    function register_global(string name, var value)
    {
        var globals = __get_globals();
        globals[name] = value;
    }

    // Helper method to retrieve a global ObjectFactory instance
    function get_default_factory()
    {
        return __get_globals()[DEFAULT_FACTORY_GLOBAL];
    }

    function load_bytecode_file(string file,
            string trigger [optional], int has_trigger [opt_flag])
    {
        var reg = __get_globals()[DEFAULT_LIBREGISTRY_GLOBAL];
        if (exists reg[file])
            return reg[file];

        var packfileview;
        ${ load_bytecode packfileview, file };
        reg[file] = packfileview;
        if (!has_trigger)
            trigger = "";
        if (trigger != "" && trigger != "") {
            var subs = packfileview.subs_by_flag(trigger);
            for (var sub in subs)
                sub();
        }
        return packfileview;
    }

    function unload_bytecode(string file)
    {
        var reg = __get_globals()[DEFAULT_LIBREGISTRY_GLOBAL];
        if (exists reg[file])
            delete reg[file];
        // TODO: Should we destroy the PackfileView?
    }

    function register_bytecode(string file, var pbc)
    {
        var reg = __get_globals()[DEFAULT_LIBREGISTRY_GLOBAL];
        if (exists reg[file])
            Rosella.Error.invalid(__FUNCTION__, "Cannot re-register bytecode %s", file);
        reg[file] = pbc;
    }
}
