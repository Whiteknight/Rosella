namespace Rosella { namespace Proxy
{
    /* Proxy Factory type is used to create proxy objects. Each factory takes
       a target type to shadow and a list of builder objects. Builder objects
       set up the proxy class and the proxy objects to have a variety of
       behaviors.

       Every proxy is associated with a Controller object. The Controller
       implements the behaviors of the proxy, depending on which behaviors
       have been assigned by the builders. If the builders have not prepared
       a particular behavior, the proxy will not direct those kinds of
       requests to the controller.
    */
    class Factory
    {
        var target_class;
        var proxy_class;
        var builders;

        // Construct the factory given the target type to proxy and the
        // list of builders to use. Immediately create a new Class for our
        // proxies, and execute the builders to set it up.
        function BUILD(var target_type, var builders)
        {
            using Rosella.get_type_class;
            using Rosella.Proxy.add_proxy_class_private_attr;

            self.target_class = get_type_class(target_type);
            self.builders = builders;
            self.proxy_class = new 'Class';
            add_proxy_class_private_attr(self.proxy_class, "proxy_controller");
            add_proxy_class_private_attr(self.proxy_class, "proxy_factory");
            add_proxy_class_private_attr(self.proxy_class, "target_class");
            for (var builder in self.builders)
                builder.setup_proxy_class(self.target_class, self.proxy_class);
        }

        // Create a new proxy object. Attach it to the controller and set a
        // little bit of other metadata on it. Execute all the builders on it
        // for any per-instance settings that need to be changed, and then
        // tell the controller to initialize it.
        function get_proxy(var controller)
        {
            using Rosella.Proxy.set_proxy_private_attr;

            var proxy = null;
            var proxy_class = self.proxy_class;
            ${ new proxy, proxy_class };
            set_proxy_private_attr(proxy, "proxy_factory", self);
            set_proxy_private_attr(proxy, "proxy_controller", controller);
            set_proxy_private_attr(proxy, "target_class", self.target_class);
            for (var builder in self.builders)
                builder.setup_proxy_object(proxy, controller);
            controller.initialize_proxy(proxy);
            return proxy;
        }
    }
}}
