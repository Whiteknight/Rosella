namespace Rosella { namespace Proxy
{
    /* Proxy Factory type is used to create proxy objects. Each factory takes
       a target type to shadow and a list of builder objects. Builder objects
       set up the proxy class and the proxy objects to have a variety of
       behaviors.

       Every proxy is associated with a Controller object. The Controller
       implements the behaviors of the proxy, depending on which behaviors
       have been assigned by the builders. If the builders have not prepared
       a particular behavior, the proxy will not direct those kinds of
       requests to the controller.
    */
    class Factory : Rosella.ObjectFactory
    {
        var target_class; // The default target class.
        var proxy_class;  // The default proxy class
        var builders;     // This list of proxy builders

        /* Constructor
        */

        // Construct the factory given the target type to proxy and the
        // list of builders to use. Set up the default proxy_class for use
        // when building proxies.
        function BUILD(var target_type, var builders)
        {
            using Rosella.get_type_class;

            self.target_class = get_type_class(target_type);
            self.builders = builders;
            self.proxy_class = self.create_proxy_class_internal(self.target_class);
        }

        /* ObjectFactory Interface Functions
        */

        // Create a new proxy object. Attach it to the controller and set a
        // little bit of other metadata on it. Execute all the builders on it
        // for any per-instance settings that need to be changed, and then
        // tell the controller to initialize it. p and n are unused
        function create(var controller, var p [slurpy], var n [slurpy,named])
        {
            return self.create_proxy_internal(self.proxy_class, controller);
        }

        // Create a new proxy object, taking a type and a controller. The
        // given type overrides the type provided in the Factory constructor.
        // The same list of builders is executed on the new proxy class and
        // the new proxy. This is useful for creating only a single proxy. It
        // becomes extremely inefficient for more. Create a new Proxy.Factory
        // if you need to create many proxies.
        function create_typed(var target_type, var controller, var p [slurpy],
                var n [slurpy,named])
        {
            using Rosella.get_type_class;

            var target_class = get_type_class(target_type);
            var proxy_class = self.create_proxy_class_internal(target_class);
            return self.create_proxy_internal(proxy_class, controller);
        }

        /* Internal Routines
        */

        // Create a new proxy Class object. This is mostly for internal
        function create_proxy_class_internal(var target_class)
        {
            using Rosella.Proxy.add_proxy_class_private_attr;

            var proxy_class = new 'Class';
            add_proxy_class_private_attr(proxy_class, "proxy_controller");
            add_proxy_class_private_attr(proxy_class, "proxy_factory");
            add_proxy_class_private_attr(proxy_class, "target_class");
            for (var builder in self.builders)
                builder.setup_proxy_class(target_class, proxy_class);
            return proxy_class;
        }

        // Create and instantiate the new proxy object.
        function create_proxy_internal(var proxy_class, var controller)
        {
            using Rosella.Proxy.set_proxy_private_attr;

            var proxy = null;
            ${ new proxy, proxy_class };
            set_proxy_private_attr(proxy, "proxy_factory", self);
            set_proxy_private_attr(proxy, "proxy_controller", controller);
            set_proxy_private_attr(proxy, "target_class", self.target_class);
            for (var builder in self.builders)
                builder.setup_proxy_object(proxy, controller);
            if (controller != null)
                controller.initialize_proxy(proxy);
            return proxy;
        }
    }
}}
