namespace Rosella { namespace Proxy { namespace Builder
{
    class PMCKeyedHash : Rosella.Proxy.Builder
    {
        function setup_proxy_class(var target_class, var proxy_class)
        {
            using Rosella.Proxy.Builder.PMCKeyedHash.get_pmc_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.get_string_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.get_integer_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.set_pmc_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.set_string_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.set_integer_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.defined_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.exists_keyed;
            using Rosella.Proxy.Builder.PMCKeyedHash.delete_keyed;

            proxy_class.add_vtable_override("get_pmc_keyed",     get_pmc_keyed);
            proxy_class.add_vtable_override("get_string_keyed",  get_string_keyed);
            proxy_class.add_vtable_override("get_integer_keyed", get_integer_keyed);
            proxy_class.add_vtable_override("set_pmc_keyed",     set_pmc_keyed);
            proxy_class.add_vtable_override("set_string_keyed",  set_string_keyed);
            proxy_class.add_vtable_override("set_integer_keyed", set_integer_keyed);
            proxy_class.add_vtable_override("defined_keyed",     defined_keyed);
            proxy_class.add_vtable_override("exists_keyed",      exists_keyed);
            proxy_class.add_vtable_override("delete_keyed",      delete_keyed);
        }

        function get_pmc_keyed[nsentry](var key)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.get_keyed(self, "pmc", "pmc", key);
            return null;
        }

        function get_string_keyed[nsentry](var key)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.get_keyed(self, "string", "pmc", key);
            return null;
        }

        function get_integer_keyed[nsentry](var key)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.get_keyed(self, "integer", "pmc", key);
            return null;
        }

        function set_pmc_keyed[nsentry](var key, var value)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                controller.set_keyed(self, "pmc", "pmc", key, value);
        }

        function set_string_keyed[nsentry](var key, var value)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                controller.set_keyed(self, "string", "pmc", key, value);
        }

        function set_integer_keyed[nsentry](var key, var value)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                controller.set_keyed(self, "integer", "pmc", key, value);
        }

        function defined_keyed[nsentry](var key)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.op_keyed(self, "defined", "pmc", key);
            return 0;
        }

        function exists_keyed[nsentry](var key)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.op_keyed(self, "exists", "pmc", key);
            return 0;
        }

        function delete_keyed[nsentry](var key)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.op_keyed(self, "delete", "pmc", key);
            return 0;
        }
    }
}}}
