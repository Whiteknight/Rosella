namespace Rosella { namespace Proxy { namespace Builder
{
    /* Proxy Builder class to imitate an object by intercepting calls to
       isa, does, and can, and forwarding them to the controller. With these
       overrides in place, the proxy object will be transparently usable by
       almost any consumer without appearing to be a different type from the
       class being proxied */
    class Imitate : Rosella.Proxy.Builder
    {
        function setup_proxy_class(var target_class, var proxy_class)
        {
            using Rosella.Proxy.Builder.Imitate.intercept_does;
            proxy_class.add_vtable_override("does", intercept_does);

            using Rosella.Proxy.Builder.Imitate.intercept_isa;
            proxy_class.add_vtable_override("isa", intercept_isa);

            using Rosella.Proxy.Builder.Imitate.intercept_isa_pmc;
            proxy_class.add_vtable_override("isa_pmc", intercept_isa_pmc);
        }

        function intercept_does[nsentry](string role)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.does(self, role);
            return 0;
        }

        function intercept_isa[nsentry](string name)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.isa(self, name);
            return 0;
        }

        function intercept_isa_pmc[nsentry](var parent)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var controller = get_proxy_private_attr(self, "proxy_controller");
            if (controller != null)
                return controller.isa_pmc(self, parent);
            return 0;
        }
    }
}}}
