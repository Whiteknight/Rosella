namespace Rosella
{
    class Path
    {
        var separator;
        var searchers;

        function Path(var searchers [slurpy],
                string separator [optional,named], int has_sep [opt_flag])
        {
            using Rosella.build;

            if (has_sep)
                self.separator = separator;
            else
                self.separator = ".";
            if (elements(searchers) == 0) {
                self.searchers = [];
                self.searchers[0] = build(class Rosella.Path.Searcher.Hash);
                self.searchers[1] = build(class Rosella.Path.Searcher.Attribute);
            }
            else
                self.searchers = searchers;
        }

        function result_is_valid(var result)
        {
            if (result == null)
                return 0;
            int is_defined = 0;
            ${ defined is_defined, result };
            return is_defined;
        }

        function get(var obj, string path)
        {
            int success;
            var result;
            :(success, result) = self.get_recursive(obj, path);

            if (success)
                return result;
            return null;
        }

        function get_recursive(var obj, string path)
        {
            if (path == null || path == "")
                return 1, obj;

            string next_path = path;
            string search_text = path;
            string remainder = "";
            int idx = length(path) - 1;
            var result;
            var found_result;

            while (idx >= 0) {
                int success = 0;

                for (var searcher in self.searchers) {
                    if (!searcher.can_search(obj))
                        continue;
                    var result;

                    :(success, result) = searcher.search(obj, search_text);
                    if (success) {
                        // I don't know why this is necessary, but sometimes
                        // the result variable becomes null once we break out
                        // of the loop
                        found_result = result;
                        break;
                    }
                }

                if (success) {
                    if (remainder == null || remainder == "")
                        return 1, found_result;
                    :(success, result) = self.foo(found_result, remainder);
                    if (success)
                        return 1, result;
                    idx = search_text.reverse_index(self.separator, 0);
                    remainder = substr(next_path, idx + 1);
                    search_text = substr(search_text, 0, idx);
                }
                else {
                    idx = search_text.reverse_index(self.separator, 0);
                    remainder = substr(next_path, idx + 1);
                    search_text = substr(search_text, 0, idx);
                }
            }

            return 0, null;
        }

        function foo(var obj, string rem)
        {
            int success;
            var result;
            :(success, result) = self.get_recursive(obj, rem);
            return success, result;
        }
    }
}
