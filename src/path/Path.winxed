namespace Rosella
{
    /* Path Class
        Path is a utility to search for values in nested aggregates by path
        string. A path string is a string of identifiers separated by a
        separator.

        Path implements a search loop over an array of searchers. Each
        searcher type is able to search different types of objects in
        different ways.

        Path performs a longest-token search, avoiding the semi-predicate
        problem by allowing a separator to appear in search strings. If we
        have the search string "a.b.c.d" with a separator of ".", we will
        search for, in order:

            "a.b.c.d"
            "a.b.c"
            "a.b"
            "a"

        Once a match is found on a substring, the remainder of the string
        is used to continue recursive searching through the next object.
    */
    class Path
    {
        var separator;
        var searchers;

        // Constructor. Take a list of searchers, if any, and maybe a
        // custom separator string. The default separator is "."
        function Path(var searchers [slurpy],
                string separator [optional,named], int has_sep [opt_flag])
        {
            using Rosella.build;

            if (has_sep)
                self.separator = separator;
            else
                self.separator = ".";
            if (elements(searchers) == 0) {
                self.searchers = [];
                self.searchers[0] = build(class Rosella.Path.Searcher.Hash);
                self.searchers[1] = build(class Rosella.Path.Searcher.Attribute);
            }
            else
                self.searchers = searchers;
        }

        // Take an object and a path. Use the path to search for a value
        // inside the object
        function get(var obj, string path)
        {
            int success;
            var result;
            :(success, result) = self.get_recursive(obj, path);

            if (success)
                return result;
            return null;
        }

        // Internal routine to perform a recursive search through the object
        // to look for a value.
        function get_recursive(var obj, string path)
        {
            if (path == null || path == "")
                return 1, obj;

            string next_path = path;
            string search_text = path;
            string remainder = "";
            int idx = length(path) - 1;
            var result;
            var found_result;

            while (idx >= 0) {
                int success = 0;

                for (var searcher in self.searchers) {
                    if (!searcher.can_search(obj))
                        continue;
                    var result;

                    :(success, result) = searcher.search(obj, search_text);
                    if (success) {
                        // I don't know why this is necessary, but sometimes
                        // the result variable becomes null once we break out
                        // of the loop
                        found_result = result;
                        break;
                    }
                }

                if (success) {
                    if (remainder == null || remainder == "")
                        return 1, found_result;
                    :(success, result) = self.get_recursive(found_result, remainder);
                    if (success)
                        return 1, result;
                    idx = search_text.reverse_index(self.separator, 0);
                    remainder = substr(next_path, idx + 1);
                    search_text = substr(search_text, 0, idx);
                }
                else {
                    idx = search_text.reverse_index(self.separator, 0);
                    remainder = substr(next_path, idx + 1);
                    search_text = substr(search_text, 0, idx);
                }
            }

            return 0, null;
        }
    }
}
