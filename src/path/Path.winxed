namespace Rosella { namespace Query
{
    class Path
    {
        var separator;
        var searchers;

        function BUILD(var searchers [slurpy],
                string separator [optional,named], int has_sep [opt_flag])
        {
            using Rosella.build;

            if (has_sep)
                self.separator = separator;
            else
                self.separator = ".";
            if (elements(searchers) == 0)
            {
                self.searchers = []
                self.searchers[0] = build(class Rosella.Path.Searcher.Hash);
                self.searchers[1] = build(class Rosella.Path.Searcher.Attribute);
            }
            else
            {
                self.searchers = searchers;
            }
        }

        function result_is_valid(var result)
        {
            if (result == null)
                return 0;
            int is_defined = 0;
            ${ defined is_defined, result };
            return is_defined;
        }

        function get(var obj, string name)
        {
            //say("get: " + name);
            if (name == null || name == "") {
                return obj;
            }
            for (var searcher in self.searchers) {
                if (!searcher.can_search(obj))
                    continue;

                var result;
                //:(success, name, result) = searcher.search(self, obj, name);
                if (name == null || name == "")
                    return result;
            }
            return null;
        }
    }
}}
