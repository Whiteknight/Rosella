/* Mapping Iterator
    Take each item from the source and perform some mapping on it.
*/
class Rosella.Query.Iterable.Map : Rosella.Query.Iterable
{
    var mapper;

    function Map(var source, var f)
    {
        self.source = source;
        self.mapper = f;
    }

    function next()
    {
        var d = self.source.next();
        var f = self.mapper;
        return f(d);
    }
}

/* Filtering Iterator
    Take each item from the source and propagate it only if it matches the
    given predicate
*/
class Rosella.Query.Iterable.Filter : Rosella.Query.Iterable
{
    var cache;
    var has_cache;
    var func;

    function Filter(var source, var f)
    {
        self.has_cache = false;
        self.source = source;
        self.func = f;
    }

    function has_more()
    {
        var f = self.func;
        int m;
        int has_cache = int(self.has_cache);
        if (has_cache)
            return true;
        if (!self.source.has_more())
            return false;
        do {
            :(var d, m) = self.source.next_and_more();
            if (int(f(d)) == true) {
                self.cache = d;
                self.has_cache = true;
                return true;
            }
        } while(m == true);
        return false;
    }

    function next()
    {
        int has_cache = int(self.has_cache);
        if (has_cache) {
            var d = self.cache;
            self.cache = null;
            self.has_cache = false;
            return d;
        }

        if (!self.source.has_more())
            return false;

        var f = self.func;
        int m;
        do {
            :(var d, m) = self.source.next_and_more();
            if (int(f(d)) == true)
                return d;
        } while(m == true);
        self.__empty();
    }

    function reset()
    {
        self.cache = null;
        self.has_cache = false;
        self.source.reset();
        return self;
    }
}

/* Appending Iterator
    Add a new data source to the end of the current iteration
*/
class Rosella.Query.Iterable.Append : Rosella.Query.Iterable
{
    var extra_sources;
    var source_ptr;

    function Append(var first, var second)
    {
        self.source = first;
        self.extra_sources = [second];
        self.source_ptr = 0;
    }

    function next()
    {
        int sources = elements(self.extra_sources);
        while (!self.source.has_more()) {
            if (sources == 0 || int(self.source_ptr) >= sources)
                self.__empty();
            var s = self.extra_sources[int(self.source_ptr)];
            self.source_ptr++;
            self.source = Rosella.Query.iterable(s);
        }
        return self.source.next();
    }

    function has_more()
    {
        if (self.source.has_more())
            return true;
        for (int i = 0; i < elements(self.extra_sources); i++) {
            if (elements(self.extra_sources[i]) > 0)
                return true;
        }
        return false;
    }

    function append(var d)
    {
        push(self.extra_sources, d);
        return self;
    }

    function reset()
    {
        self.source_ptr = 0;
        self.source.reset();
        for (int i = 0; i < elements(self.extra_sources); i++)
            self.extra_sources[i].reset();
        return self;
    }
}

/* Take/Skip Windowing Iterator
    Iterate over the source items, optionally skipping some from the beginning
    and ignoring some from the end
*/
class Rosella.Query.Iterable.TakeSkip : Rosella.Query.Iterable
{
    var take;
    var skip;
    var func;

    function TakeSkip(var source, var f, int take, int skip)
    {
        self.source = source;
        self.func = f;
        self.take = take;
        if (skip == 0)
            self.skip = null;
        else
            self.skip = skip;
    }

    function _skip()
    {
        int skip = self.skip;
        var f = self.func;

        if (skip > 0) {
            if (f != null) {
                int m = self.source.has_more();
                for (int i = 0; i < skip && m == true; ) {
                    :(var d, m) = self.source.next_and_more();
                    if (f(d))
                        i++;
                }
            } else {
                int m = self.source.has_more();
                for (int i = 0; i < skip && m == true; i++) {
                    :(var d, m) = self.source.next_and_more();
                }
            }
        }
        self.skip = null;
    }

    function next()
    {
        if (self.skip != null)
            self._skip();
        int take = int(self.take);
        if (take == 0 || !self.source.has_more())
            self.__empty();
        :(var d, int m) = self.source.next_and_more()
        if (m == false)
            take = 0;
        else
            take--;
        self.take = take;
        return d;
    }

    function has_more()
    {
        if (self.skip != null)
            self._skip();
        int take = int(self.take);
        return take != 0 && self.source.has_more();
    }

    // TODO: We can probably optimize repeated take/skip calls to reuse the
    // same iterator, if the predicates are both null

    // TODO: Need reset()
}

/* Flattening Iterator
    Flatten nested data structures
*/
class Rosella.Query.Iterable.Flatten : Rosella.Query.Iterable
{
    var cache;
    var cached_item;
    var has_cached_item;
    var levels;

    function Flatten(var source, int levels)
    {
        self.source = source;
        self.has_cached_item = false;
        self.levels = levels;
    }

    function next()
    {
        if (!self.has_more())
            self.__empty();

        do {
            if (self.has_cached_item == true) {
                var i = self.cached_item;
                self.cached_item = null;
                self.has_cached_item = false;
                return i;
            }

            if (self.cache.has_more()) {
                :(var d, int m) = self.cache.next_and_more();
                if (m == false)
                    self.cache = null;
                return d;
            } else
                self.cache = null;
        } while (self.has_more() == true);

        self.__empty();
    }

    function has_more()
    {
        if (self.has_cached_item == true)
            return true;

        if (self.cache != null) {
            if (self.cache.has_more())
                return true;
            self.cache = null;
        }

        if (!self.source.has_more())
            return false;

        if (self.levels == 0) {
            self.cached_item = self.source.next();
            self.has_cached_item = true;
            return true;
        }

        var d;
        int m;
        do {
            :(d, m) = self.source.next_and_more();
            var item;
            var has_item = false;
            var i = Rosella.Query.array_or_hash(d,
                function(var a) {
                    if (elements(a) > 0)
                        return new Rosella.Query.Iterable.Array(a);
                    return null;
                },
                function(var h) {
                    if (elements(h) > 0)
                        return new Rosella.Query.Iterable.Hash(h);
                    return null;
                },
                function(var s) {
                    self.cached_item = s;
                    self.has_cached_item = true;
                    return null;
                }
            );
            if (i == null) {
                if (int(self.has_cached_item) == true)
                    return true;
            } else {
                var cache = new Rosella.Query.Iterable.Flatten(i, self.levels - 1);
                if (cache.has_more()) {
                    self.cache = cache;
                    return true;
                }
            }
        } while (m == true);

        return false;
    }

    function reset()
    {
        self.source.reset();
        self.cache = null;
        self.cached_item = null;
        self.has_cached_item = false;
        return self;
    }
}

/* Projecting Iterator
    Project each incoming data item to a set of zero or more data items to
    iterate over inline
*/
class Rosella.Query.Iterable.Project : Rosella.Query.Iterable
{
    var func;
    var cache;

    function Project(var source, var f)
    {
        self.source = source;
        self.func = f;
        self.cache = null;
    }

    function next()
    {
        if (self.cache == null) {
            if (!self.source.has_more())
                self.__empty();

            var f = self.func;
            :(var d, int m) = self.source.next_and_more();
            d = f(d);
            while (elements(d) == 0 && m == true) {
                :(d, m) = self.source.next_and_more();
                d = f(d);
            }
            if (m == false || elements(d) == 0)
                self.__empty();
            self.cache = new Rosella.Query.Iterable.Array(d);
        }
        if (!self.cache.has_more())
            self.__empty();

        :(var a, int o) = self.cache.next_and_more();
        if (o == false)
            self.cache = null;
        return a;
    }

    function has_more()
    {
        if (self.cache != null) {
            if (self.cache.has_more())
                return true;
            else
                self.cache = null;
        }
        if (!self.source.has_more())
            return false;

        var f = self.func;
        :(var d, int m) = self.source.next_and_more();
        d = f(d);
        while (elements(d) == 0 && m == true) {
            :(d, m) = self.source.next_and_more();
            d = f(d);
        }
        if (elements(d) == 0)
            return false;
        self.cache = new Rosella.Query.Iterable.Array(d);
        return self.cache.has_more();
    }

    function reset()
    {
        self.cache = null;
        self.source.reset();
        return self;
    }
}

/* Iterator Tap
    For each item iterated, perform a callback operation before returning the
    value
*/
class Rosella.Query.Iterable.Tap : Rosella.Query.Iterable
{
    var func;

    function Tap(var source, var f)
    {
        self.source = source;
        self.func = f;
    }

    function next()
    {
        var d = self.source.next();
        var f = self.func;
        f(d);
        return d;
    }
}

/* Sorting Iterator.
    Sorts the incoming data by greedly reading the source to completion and
    then sorting the resulting array in-place.
*/
class Rosella.Query.Iterable.Sort : Rosella.Query.Iterable
{
    var func;
    var sorted;
    var is_sorted;

    function Sort(var source, var f, int is_sorted)
    {
        self.source = source;
        self.func = f;
        self.is_sorted = is_sorted;
        self.sorted = null;
    }

    function next()
    {
        if (self.sorted == null) {
            int is_sorted = int(self.is_sorted);
            var d = self.source.to_array();
            var f = self.func;
            Rosella.Query.sort_array(d, 0, elements(d), f, is_sorted:[named("is_sorted")]);
            self.sorted = new Rosella.Query.Iterable.Array(d);
        }
        if (!self.sorted.has_more())
            self.__empty();
        return self.sorted.next();
    }

    function has_more()
    {
        if (self.sorted != null)
            return self.sorted.has_more();
        return self.source.has_more();
    }

    function reset()
    {
        self.sorted = null;
        self.source.reset();
        return self;
    }
}

class Rosella.Query.Iterable.Shuffle : Rosella.Query.Iterable
{
    var shuffled;

    function Shuffle(var source)
    {
        self.source = source;
    }

    function next()
    {
        if (self.shuffled == null) {
            var d = self.source.to_array();
            Rosella.Random.shuffle_array(d);
            self.shuffled = new Rosella.Query.Iterable.Array(d);
        }
        if (!self.shuffled.has_more())
            self.__empty();
        return self.shuffled.next();
    }

    function has_more()
    {
        if (self.shuffled != null)
            return self.shuffled.has_more();
        return self.source.has_more();
    }

    function reset()
    {
        self.shuffled = null;
        self.source.reset();
        return self;
    }
}

class Rosella.Query.Iterable.GroupBy : Rosella.Query.Iterable
{
    var func;
    var grouped;

    function GroupBy(var source, var f)
    {
        self.source = source;
        self.func = f;
        self.grouped = null;
    }

    function next()
    {
        if (self.grouped != null) {
            if (self.grouped.has_more())
                return self.grouped.next();
            self.__empty();
        }

        if (!self.source.has_more())
            self.__empty();
        var f = self.func;
        var groups = Rosella.pmc_keyed_hash();
        :(var d, int m) = self.next_and_more();
        var key = f(d);
        groups[key] = [d];
        while (m == true) {
            :(d, m) = self.next_and_more();
            key = f(d);
            if (!(exists groups[key]))
                groups[key] = [];
            push(groups[key], d);
        }
        self.grouped = new Rosella.Query.Iterable.Hash(groups);
        return self.grouped.next();
    }

    function has_more()
    {
        if (self.grouped != null)
            return self.grouped.has_more();
        return self.source.has_more();
    }

    function reset()
    {
        self.grouped = null;
        self.source.reset();
        return self;
    }
}
