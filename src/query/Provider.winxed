/* Provider Namespace
    This namespace has some helper methods for maintaining singletons for
    various provider types. Providers tend not to have state, so they can
    be reused as singletons
*/
namespace Rosella.Query.Provider
{
    const string DEFAULT_ARRAY_PROVIDER = "Rosella.Query.Provider.array_provider";
    const string DEFAULT_HASH_PROVIDER = "Rosella.Query.Provider.hash_provider";
    const string DEFAULT_SCALAR_PROVIDER = "Rosella.Query.Provider.scalar_provider";

    // Get the Array provider
    function get_array_provider()
    {
        return Rosella.Globals.autoget_global(DEFAULT_ARRAY_PROVIDER,
            function() { return new Rosella.Query.Provider.Array(); }
        );
    }

    // Get the Hash Provider
    function get_hash_provider()
    {
        return Rosella.Globals.autoget_global(DEFAULT_HASH_PROVIDER,
            function() { return new Rosella.Query.Provider.Hash(); }
        );
    }

    // Get the Scalar Provider
    function get_scalar_provider()
    {
        return Rosella.Globals.autoget_global(DEFAULT_SCALAR_PROVIDER,
            function() { return new Rosella.Query.Provider.Scalar(); }
        );
    }
}

/* Provider Class
    This is an abstract base class for all Providers. It implements some
    common behaviors and specifies an interface that other Providers must
    use. Do not use this class directly, use a subclass.
*/
class Rosella.Query.Provider
{
    function name()
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function foreach(var data, var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Map the data
    function map(var data, var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Filter the data
    function filter(var data, var func,
            int limit [optional], int has_limit [opt_flag])
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Fold the data
    function fold(var seed, var data, var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Return a count of elements. If a predicate is provided, return a
    // count of elements which satisfy that predicate
    function count(var data, var func)
    {
        if (func != null)
            data = self.filter(data, func);
        return elements(data);
    }

    // Return true if the aggregate contains any elements, or any elements
    // which match the predicate.
    function any(var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Return the single element in the aggregate, or the single element
    // which matches the predicate. If there are more than or less than
    // exactly 1 elements, throw an exception.
    function single(var data, var func)
    {
        if (func != null)
            data = self.filter(data, func);
        if (self.count(data, null) != 1)
            Rosella.Error.error("Aggregate has more than one entry");
        return self.unwrap_first(data);
    }

    // Return the first element in the aggregate, or the first element
    // which matches the predicate. If there are none, throw an exception.
    function first(var data, var func)
    {
        data = self.take(data, 1, func);
        if (self.count(data, null) < 1)
            Rosella.Error.error("Aggregate does not have at least one entry");
        return self.unwrap_first(data);
    }

    // Return the first element in the aggregate, or the first element
    // which matches the predicate. If there are none, return a default
    // value
    function first_or_default(var data, var func, var def)
    {
        data = self.take(data, 1, func);
        if (self.count(data, null) == 0)
            return def;
        return self.unwrap_first(data);
    }

    // Take from the data
    function take(var data, int count, var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Skip some of the data
    function skip(var data, int count, var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Combine two aggregates
    function combine(var a, var b,
            var filter [optional], int has_filter [opt_flag],
            var key_func [optional], int has_key_func [opt_flag],
            var dispute [optional], int has_dispute [opt_flag])
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    function project(var data, var f)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Unwrap the first data item from the aggregate
    function unwrap_first(var data)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Convert to an array
    function to_array(var data)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Convert to a hash
    function to_hash(var data, var func)
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Convert the aggregate to an array and sort it, according to the
    // comparison function given. This will create a sorted copy of the data,
    // leaving the original copy in the original order.
    function sort(var data, var func)
    {
        var new_data = self.to_array(data);
        Rosella.Query.sort_array(new_data, func);
        return new_data;
    }

    // Sort the data in-place without creating a copy
    function sort_self(var data, var func)
    {
        Rosella.Error.error("Provider %s does not support .sort_self()", self.name());
    }

    // Shuffle the data, return the shuffled copy
    function shuffle(var data)
    {
        var new_data = self.to_array(data);
        Rosella.Random.shuffle_array(new_data);
        return new_data;
    }

    // Shuffle the data in place.
    function shuffle_self(var data)
    {
        Rosella.Error.error("Provider %s does not support .shuffle_self()", self.name());
    }

    // Return the list of keys of the aggregate
    function keys(var data)
    {
        Rosella.Error.error("Provider %s does not support .keys()", self.name());
    }

    // Flatten a nested structure into a single flat array.
    function flatten(var data)
    {
        var results = [];
        self.__flatten_internal(results, data);
        return results;
    }

    // Internal helper routine to flatten nested aggregates
    function __flatten_internal(var results, var data)
    {
        Rosella.Query.array_or_hash(data,
            function(a) {
                for (var item in a)
                    self.__flatten_internal(results, item);
            },
            function(h) {
                var a = Rosella.Query.as_queryable(h).to_array().data();
                for (var item in a)
                    self.__flatten_internal(results, item);
            },
            function(s) { push(results, s); }
        );
    }

    // Append the contents of the second array into the first
    function append(var target, var source)
    {
        for (var i in source)
            push(target, i);
        return target;
    }

    // Group the data according to similar keys.
    function group_by(var target, var f)
    {
        Rosella.Error.error("Provider %s does not support .group_by()", self.name());
    }
}
