/* Queryable Class
    This class is a wrapper type which provides higher-order behaviorsor
    for existing aggregate types. To provide this behavior, we pair each
    aggregate with a Provider. The Provider implements all the behaviors.
*/
class Rosella.Query.Queryable
{
    var data;
    var provider;
    var factory;

    // Constructor. Store the data and get a suitable provider. It is
    // probably better to use Rosella.Query.as_queryable instead of
    // creating this directly.
    function Queryable(var data, var factory [optional], int has_f [opt_flag])
    {
        self.data = data;
        if (!has_f)
            factory = Rosella.Query.default_provider_factory();
        self.factory = factory;
        self.provider = factory.create(data);
    }

    /* Queryable API
        These routines are used to create and manipulate Queryables
    */

    // Get the raw data back
    function data()
    {
        return self.data;
    }

    // Wrap the given data in a Queryable. In the default case, create a
    // new Queryable
    function as_queryable(var data)
    {
        return new Rosella.Query.Queryable(data, self.factory);
    }

    /* Query Routines
    */

    // Perform some action for every element in the aggregate
    function foreach(var func)
    {
        self.provider.foreach(self.data, func);
        return self;
    }

    // Perform a callback on the current value of the data
    function tap(var func)
    {
        func(self.data);
        return self;
    }

    // Return a new aggregate where each element is a function of the
    // elements in the data
    function map(var mapper)
    {
        var data = self.provider.map(self.data, mapper);
        return self.as_queryable(data);
    }

    // A special case of map. Replace every item in the aggregate by the
    // value of a particular named attribute
    function pick(string attr)
    {
        return self.map(function(var d) { return d.*attr; });
    }

    // A special case of map. Replace each element in the aggregate by
    // the result of a specific method call
    //function map_method(string meth_name, var p [slurpy], var n [slurpy,named])
    //{
    //    return self.map(function(var d) {
    //        return Rosella.invoke_method(d, meth_name, p, n);
    //    });
    //}

    // Return a new aggregate where only the elements from the original
    // data which satisfy a test are included
    function filter(var func)
    {
        var data = self.provider.filter(self.data, func);
        return self.as_queryable(data);
    }

    // Combine elements from the aggregate into a single value and
    // return that.
    function fold(var func, var seed [optional], int has_seed [opt_flag])
    {
        if (!has_seed)
            seed = null;
        var value = self.provider.fold(seed, self.data, func);
        return self.as_queryable(value);
    }

    // Sort the data using a given comparison routine
    function sort(var func)
    {
        var result = self.provider.sort(self.data, func);
        return self.as_queryable(result);
    }

    // Return a count of elements
    function count(var func [optional], int has_func [opt_flag])
    {
        return self.provider.count(self.data, has_func ? func : null);
    }

    // Return true if any element in the aggregate satisfies the predicate
    // false otherwise. Short-circuits
    function any(var func [optional], int has_func [opt_flag])
    {
        return self.provider.any(self.data, has_func ? func : null);
    }

    // Return the first item in the aggregate if the aggregate contains
    // only one item. If it contains more items, throw an exception
    function single(var func [optional], int has_func [opt_flag])
    {
        var data = self.provider.single(self.data, has_func ? func : null);
        return self.as_queryable(data);
    }

    // Return the first item in the aggregate, throwing an exception if
    // it is empty.
    function first(var func [optional], int has_func [opt_flag])
    {
        var data = self.provider.first(self.data, has_func ? func : null);
        return self.as_queryable(data);
    }

    // Return the first item in the aggregate, returning a default value
    // if empty
    function first_or_default(var func [optional], int has_func [opt_flag],
            var def [optional], int has_def [opt_flag])
    {
        var data = self.provider.first_or_default(self.data, has_func ? func : null, has_def ? def : null);
        return self.as_queryable(data);
    }

    // Return an aggregate of the first N elements in the data. If a
    // predicate is provided, return the first N which satisfy the
    // prediate
    function take(int count, var func [optional], int has_func [opt_flag])
    {
        var data = self.provider.take(self.data, count, has_func ? func : null);
        return self.as_queryable(data);
    }

    // Return all but the first N elements. If a predicate is provided,
    // return all by the first N elements which satisfy the predicate.
    function skip(int count, var func [optional], int has_func [opt_flag])
    {
        var data = self.provider.skip(self.data, count, has_func ? func : null);
        return self.as_queryable(data);
    }

    function flatten()
    {
        var data = self.provider.flatten(self.data);
        return self.as_queryable(data);
    }

    //function combine() { }

    // Return the data as an array
    function to_array()
    {
        var data = self.provider.to_array(self.data);
        return self.as_queryable(data);
    }

    // Return the data as a hash
    function to_hash(var func)
    {
        var data = self.provider.to_hash(self.data, func);
        return self.as_queryable(data);
    }

    // For hashes, return an array of keys. For everything else, throw an
    // exception
    function keys()
    {
        var keys = self.provider.keys(self.data);
        return self.as_queryable(keys);
    }

    function append(var s)
    {
        var target = self.provider.to_array(self.data);
        var source = Rosella.Query.as_queryable(s).to_array().data();
        var result = self.provider.append(target, source);
        return self.as_queryable(result);
    }

    function group_by(var f)
    {
        var groups = self.provider.group_by(self.data, f);
        return self.as_queryable(groups);
    }

    /* Vtables and Low-level access
    */

    // Get an iterator over the data
    function get_iter[vtable]()
    {
        var iter = null;
        var data = self.data;
        ${ iter iter, data };
        return data;
    }

    /*
    function get_pmc_keyed_int[vtable](int key)
    {
        return self.data[key];
    }

    function get_integer_keyed_int[vtable](int key)
    {
        int i = self.data[key];
        return i;
    }

    function get_string_keyed_int[vtable](int key)
    {
        string s = self.data[key];
        return s;
    }

    function get_number_keyed_int[vtable](int key)
    {
        float n = self.data[key];
        return n;
    }
    */
}
