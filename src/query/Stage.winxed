namespace Rosella.Query
{
    class Stage
    {
        var previous;
        var func;

        function Stage(var prev, var func)
        {
            self.previous = prev;
            self.func = func;
        }

        function next()
        {
            Rosella.Error.must_subclass(__CLASS__);
        }

        function gobble_all()
        {
            var d = [];
            :(int is_valid, var value) = self.previous.next();
            if (!is_valid)
                return null;
            while (is_valid) {
                push(d, value);
                :(is_valid, value) = self.previous.next();
            }
            return d;
        }
    }

    namespace Stage
    {
        class Source : Rosella.Query.Stage
        {
            var iterator;
            function Source(var data)
            {
                var i;
                ${ iter i, data };
                self.iterator = i;
            }

            function next()
            {
                if (self.iterator) {
                    var d;
                    var i = self.iterator;
                    ${ shift d, i };
                    return true, d;
                }
                return false, null;
            }
        }

        class ForEach : Rosella.Query.Stage
        {
            function ForEach(var p, var f) { self.Stage(p, f); }

            function next()
            {
                :(var is_valid, var value) = self.previous.next();
                if (!is_valid)
                    return false, null;
                var(self.func)(value);
                return true, value;
            }
        }

        class Tap : Rosella.Query.Stage
        {
            var cache;
            function Tap(var p, var f) { self.Stage(p, f); }

            function next()
            {
                if (self.cache == null)
                    self.cache = self.gobble_all();
                if (elements(self.cache) == 0)
                    return false, null;
                return true, self.cache.shift();
            }
        }

        class Map : Rosella.Query.Stage
        {
            function Map(var p, var f) { self.Stage(p, f); }

            function next()
            {
                :(int is_valid, var value) = self.previous.next();
                if (!is_valid)
                    return false, null;
                var f = self.func;
                return true, f(value);
            }
        }

        class Filter : Rosella.Query.Stage
        {
            function Filter(var p, var f) { self.Stage(p, f); }

            function next()
            {
                :(int is_valid, var value) = self.previous.next();
                if (!is_valid)
                    return false, null;
                var f = self.func;
                int matches_filter = f(value);
                while (is_valid && !matches_filter) {
                    :(is_valid, value) = self.previous.next();
                    if (!is_valid)
                        break;
                    matches_filter = f(value);
                }
                if (is_valid && matches_filter)
                    return true, value;
                return false, null;
            }
        }

        class Fold : Rosella.Query.Stage
        {
            var seed;
            function Fold(var p, var f, var seed)
            {
                self.Stage(p, f);
                self.seed = seed;
            }

            function next()
            {
                var d = self.gobble_all();
                if (d == null || elements(d) == 0)
                    return false, null;
                var value = self.seed;
                var f = self.func;
                for (int i = 0; i < elements(d); i++)
                    value = f(value, d[i]);
                return true, value;
            }
        }

        class Sort : Rosella.Query.Stage
        {
            var cache;
            function Sort(var p, var f) { self.Stage(p, f); }

            function next()
            {
                if (self.cache == null) {
                    var d = self.gobble_all();
                    Rosella.Query.Provider.qsort(d, 0, elements(d), self.func);
                    self.cache = d;
                }

                if (elements(self.cache) == 0)
                    return false, null;
                return true, self.cache.shift();
            }
        }

        class Take : Rosella.Query.Stage
        {
            var limit;
            var count;
            function Take(var p, var f, int i)
            {
                self.Stage(p, f);
                self.count = 0;
                self.limit = i;
            }

            function next()
            {
                if (self.count >= self.limit)
                    return false, null;
                :(int is_valid, var value) = self.previous.next();
                if (!is_valid)
                    return false, null;

                var f = self.func;
                if (f == null) {
                    self.count = self.count + 1;
                    return is_valid, value;
                } else {
                    int matches = f(value);
                    while (!matches) {
                        :(is_valid, value) = self.previous.next();
                        if (!is_valid)
                            break;
                        matches = f(value);
                    }
                    if (!is_valid || !matches)
                        return false, null;

                    return true, value;
                }
            }
        }

        class Skip : Rosella.Query.Stage
        {
            var limit;
            var count;
            function Skip(var p, var f, int i)
            {
                self.Stage(p, f);
                self.limit = i;
                self.count = 0;
            }

            function next()
            {
                var f = self.func;
                int is_valid = false;
                var value = null;
                while (self.count < self.limit) {
                    :(is_valid, value) = self.previous.next();
                    if (!is_valid)
                        return false, null;
                    if (f == null || f(value))
                        self.count = self.count + 1;
                }
                :(is_valid, value) = self.previous.next();
                if (!is_valid)
                    return false, null;
                if (f == null || f(value))
                    return true, value;
                return false, null;
            }
        }
    }
}
