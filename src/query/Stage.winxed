/* Stream stages
    Stages implement most of the higher-order operations on Streams.
    This is an abstract base class. Use a subclass instead.
*/
class Rosella.Query.Stage
{
    var previous;   // The previous stage, from which we pull values
    var func;       // The function reference to use, if any

    // Basic constructor. Save the previous stage and the func reference
    function Stage(var prev, var func)
    {
        self.previous = prev;
        self.func = func;
    }

    // Get the next value from the previous stage
    function next()
    {
        Rosella.Error.must_subclass(__CLASS__);
    }

    // Gobble all data from previous stages. This is bad to do if the
    // source iterator is infinite.
    function gobble_all()
    {
        var d = [];
        :(int is_valid, var value) = self.previous.next();
        if (!is_valid)
            return null;
        while (is_valid) {
            push(d, value);
            :(is_valid, value) = self.previous.next();
        }
        return d;
    }
}

namespace Rosella.Query.Stage
{
    /* The Source stage
        The soruce stage performs low-level iteration on the data source. It
        pulls data from the source one item at a time and feeds that data to
        subsequent stages.
    */
    class Source : Rosella.Query.Stage
    {
        var iterator;
        function Source(var data)
        {
            var i;
            ${ iter i, data };
            self.iterator = i;
        }

        function next()
        {
            if (self.iterator) {
                var d;
                var i = self.iterator;
                ${ shift d, i };
                return true, d;
            }
            return false, null;
        }
    }

    /* Foreach Stage
        Perform an action for each data item. Pass the data item along
        unaltered.
    */
    class ForEach : Rosella.Query.Stage
    {
        function ForEach(var p, var f) { self.Stage(p, f); }

        function next()
        {
            :(var is_valid, var value) = self.previous.next();
            if (!is_valid)
                return false, null;
            var f = self.func;
            f(value);
            return true, value;
        }
    }

    class Tap : Rosella.Query.Stage
    {
        var cache;
        function Tap(var p, var f) { self.Stage(p, f); }

        function next()
        {
            :(int is_valid, var value) = self.previous.next();
            if (is_valid && self.func != null) {
                var f = var(self.func);
                f();
            }
            return is_valid, value;
        }
    }

    /* Map Stage
        Perform a mapping. For each input, call a function and return the
        result instead.
    */
    class Map : Rosella.Query.Stage
    {
        function Map(var p, var f) { self.Stage(p, f); }

        function next()
        {
            :(int is_valid, var value) = self.previous.next();
            if (!is_valid)
                return false, null;
            var f = self.func;
            return true, f(value);
        }
    }

    /* Filter Stage
        For each item, execute a predicate. If true, the item is returned.
        If false, get the next item.
    */
    class Filter : Rosella.Query.Stage
    {
        function Filter(var p, var f) { self.Stage(p, f); }

        function next()
        {
            :(int is_valid, var value) = self.previous.next();
            if (!is_valid)
                return false, null;
            var f = self.func;
            int matches_filter = f(value);
            while (is_valid && !matches_filter) {
                :(is_valid, value) = self.previous.next();
                if (!is_valid)
                    break;
                matches_filter = f(value);
            }
            if (is_valid && matches_filter)
                return true, value;
            return false, null;
        }
    }

    /* Fold Stage
        Gobble all data eagerly and fold it all into a single value. This is
        an eager stage and is bad to use on an infinite source
    */
    class Fold : Rosella.Query.Stage
    {
        var seed;
        function Fold(var p, var f, var seed)
        {
            self.Stage(p, f);
            self.seed = seed;
        }

        function next()
        {
            var d = self.gobble_all();
            if (d == null || elements(d) == 0)
                return false, null;
            var value = self.seed;
            var f = self.func;
            for (int i = 0; i < elements(d); i++)
                value = f(value, d[i]);
            return true, value;
        }
    }

    /* Sort Stage
        Sort the data according to a given sort routine. This is an eager
        stage and should not be used on infinite sources.
    */
    class Sort : Rosella.Query.Stage
    {
        var cache;
        function Sort(var p, var f) { self.Stage(p, f); }

        function next()
        {
            if (self.cache == null) {
                var d = self.gobble_all();
                Rosella.Query.qsort(d, 0, elements(d), self.func);
                self.cache = d;
            }

            if (elements(self.cache) == 0)
                return false, null;
            return true, self.cache.shift();
        }
    }

    /* Take Stage
        Limiter. Only read the first N values from the stream. Subsequent
        read attempts will fail.
    */
    class Take : Rosella.Query.Stage
    {
        var limit;
        var count;
        function Take(var p, var f, int i)
        {
            self.Stage(p, f);
            self.count = 0;
            if (i <= 0)
                Rosella.Error.invalid(__FUNCTION__, "value in take must be positive: %d", i);
            self.limit = i;
        }

        function next()
        {
            if (self.count >= self.limit)
                return false, null;
            :(int is_valid, var value) = self.previous.next();
            if (!is_valid)
                return false, null;

            var f = self.func;
            if (f == null) {
                self.count = self.count + 1;
                return is_valid, value;
            } else {
                int matches = f(value);
                while (!matches) {
                    :(is_valid, value) = self.previous.next();
                    if (!is_valid)
                        break;
                    matches = f(value);
                }
                if (!is_valid || !matches)
                    return false, null;

                return true, value;
            }
        }
    }

    /* Skip Stage
        Read and discard the first N items in the stream. Return the
        remainder.
    */
    class Skip : Rosella.Query.Stage
    {
        var limit;
        var count;
        function Skip(var p, var f, int i)
        {
            self.Stage(p, f);
            if (i <= 0)
                Rosella.Error.invalid(__FUNCTION__, "value in skip must be positive: %d", i);
            self.limit = i;
            self.count = 0;
        }

        function next()
        {
            var f = self.func;
            int is_valid = false;
            var value = null;
            while (self.count < self.limit) {
                :(is_valid, value) = self.previous.next();
                if (!is_valid)
                    return false, null;
                if (f == null || f(value))
                    self.count = self.count + 1;
            }
            :(is_valid, value) = self.previous.next();
            if (!is_valid)
                return false, null;
            if (f == null || f(value))
                return true, value;
            return false, null;
        }
    }

    /* Project Stage
        For every item, replace it with several values, added to the stream
        inline.
    */
    class Project : Rosella.Query.Stage
    {
        var cache;
        function Project(var p, var f)
        {
            self.Stage(p, f);
            self.cache = [];
        }

        function next()
        {
            if (elements(self.cache) > 0)
                return true, self.cache.shift();
            :(int is_valid, var value) = self.previous.next();
            if (!is_valid)
                return false, null;
            var f = self.func;
            var results = f(value);
            for (var r in results)
                push(self.cache, r);
            if (elements(self.cache) > 0)
                return true, self.cache.shift();
            return false, null;
        }
    }

    /* Flatten Stage
        Flatten a nested aggregate and return a sequence of scalar values
    */
    class Flatten : Rosella.Query.Stage
    {
        var in_cache;
        var out_cache;

        function Flatten(var p)
        {
            self.Stage(p, null);
            self.in_cache = [];
            self.out_cache = [];
        }

        function __next_input()
        {
            if (elements(self.in_cache) > 0)
                return true, self.in_cache.shift();
            :(int is_valid, var value) = self.previous.next();
            return is_valid, value;
        }

        function next()
        {
            if (elements(self.out_cache) > 0)
                return true, self.out_cache.shift();
            int is_valid = false;
            while (!is_valid) {
                :(is_valid, var value) = self.__next_input();
                if (!is_valid)
                    return false, null;

                Rosella.Query.array_or_hash(value,
                    function(a) {
                        for (var item in a)
                            push(self.in_cache, item);
                        is_valid = false;
                    },
                    function(h) {
                        var a = Rosella.Query.as_queryable(h).to_array().data();
                        for (var item in a)
                            push(self.in_cache, item);
                        is_valid = false;
                    },
                    function(s) { is_valid = true; }
                );
                if (is_valid)
                    return true, value;
            }
            return false, null;
        }
    }

    /* Append Stage
        Append additional data items to the end of the stream. The new data
        items are only added when the stream has been exhaused
    */
    class Append : Rosella.Query.Stage
    {
        var cache;
        var use_cache;
        function Append(var p, var s)
        {
            self.Stage(p, null);
            self.cache = s;
            self.use_cache = false;
        }

        function next()
        {
            if (self.use_cache == true) {
                if (elements(self.cache) > 0)
                    return true, self.cache.shift();
                return false, null;
            }
            :(int is_valid, var value) = self.previous.next();
            if (is_valid == true)
                return true, value;
            self.use_cache = true;
            if (elements(self.cache) > 0)
                return true, self.cache.shift();
            return false, null;
        }
    }
}
