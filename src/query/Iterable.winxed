class Rosella.Query.Iterable : Rosella.IteratorBase
{
    var source;

    /* Utility Functions
    */

    function empty()
    {
        Rosella.Error.invalid(__FUNCTION__, "Attempt to read from empty iterator of type '%s'", string(typeof(self)));
    }

    function next()
    {
        if (self.source == null)
            self.empty();
        return self.source.next();
    }

    function next_and_more()
    {
        if (self.source == null)
            self.empty();
        var d = self.next();
        int m = self.has_more();
        return d, m;
    }

    function has_more()
    {
        if (self.source == null)
            return false;
        return self.source.has_more();
    }

    function reset()
    {
        self.source.reset();
        return self;
    }

    function need_reset()
    {
        return self.source.need_reset();
    }

    /* Iterator Vtables
    */

    function get_bool[vtable]()
    {
        return self.has_more();
    }

    function shift_string[vtable]()
    {
        return self.next();
    }

    function shift_pmc[vtable]()
    {
        return self.next();
    }

    function shift_integer[vtable]()
    {
        return self.next();
    }

    function get_iter[vtable]()
    {
        return self;
    }

    /* Data Access Methods
    */

    function to_array()
    {
        var d = [];
        if (!self.has_more())
            return d;
        :(var v, int m) = self.next_and_more();
        push(d, v);
        while (m == true) {
            :(v, m) = self.next_and_more();
            push(d, v);
        }
        return d;
    }

    function to_hash(var key_f, var value_f [optional], int has_vf [opt_flag])
    {
        var d = {};
        if (!self.has_more())
            return d;

        :(var v, int m) = self.next_and_more();
        var key = key_f(v);

        if (has_vf) {
            d[key] = value_f(v);
            while (m == true) {
                :(v, m) = self.next_and_more();
                key = key_f(v);
                d[key] = value_f(v);
            }
        } else {
            d[key] = v;
            while (m == true) {
                :(v, m) = self.next_and_more();
                key = key_f(v);
                d[key] = v;
            }
        }
        return d;
    }

    function foreach(var f)
    {
        if (!self.has_more())
            return;
        :(var v, int m) = self.next_and_more();
        f(v);
        while (m == true) {
            :(v, m) = self.next_and_more();
            f(v);
        }
    }

    function execute()
    {
        if (!self.has_more())
            return;
        :(var v, int m) = self.next_and_more();
        while (m == true) {
            :(v, m) = self.next_and_more();
        }
    }

    /* Lazy Iterable Methods
    */

    function map(var f)
    {
        return new Rosella.Query.Iterable.Map(self, f);
    }

    function fold(var f)
    {
        if (!self.has_more())
            self.empty();

        :(var seed, int m) = self.next_and_more();
        while(m == true) {
            :(var d, m) = self.next_and_more();
            seed = f(seed, d);
        }
        return seed;
    }

    function filter(var f)
    {
        return new Rosella.Query.Iterable.Filter(self, f);
    }

    function append(var d)
    {
        return new Rosella.Query.Iterable.Append(self, d);
    }

    function take(int count, var f [optional], int has_f [opt_flag])
    {
        if (!has_f)
            f = null;
        return new Rosella.Query.Iterable.TakeSkip(self, f, count, 0);
    }

    function skip(int count, var f [optional], int has_f [opt_flag])
    {
        if (!has_f)
            f = null;
        return new Rosella.Query.Iterable.TakeSkip(self, f, -1, count);
    }

    function flatten()
    {
        return new Rosella.Query.Iterable.Flatten(self);
    }

    function project(var f)
    {
        return new Rosella.Query.Iterable.Project(self, f);
    }

    /* Eager Iterable Methods
    */

    function sort(var f [optional], int has_f [opt_flag])
    {
        if (!has_f)
            f = Rosella.Query.get_default_comparer();
        var d = self.to_array();
        Rosella.Query.qsort(d, 0, elements(d), f);
        return new Rosella.Query.Iterable.Array(d);
    }

    function cache_sort(var get_key, var compare_key [optional], int has_comparer [opt_flag])
    {
        if (!has_comparer)
            compare_key = Rosella.Query.get_default_comparer();
        return self
            .map(function(i) { return [get_key(i), i]; })
            .sort(function(a, b) { return compare_key(a[0], b[0]); })
            .map(function(i) { return i[1]; });
    }

    function shuffle()
    {
        var d = self.to_array();
        Rosella.Random.shuffle_array(d);
        return new Rosella.Query.Iterable.Array(d);
    }

    function count(var f [optional], int has_f [opt_flag])
    {
        if (!self.has_more())
            return 0;

        int i = 0;
        if (has_f) {
            :(var v, int m) = self.next_and_more();
            if (f(v))
                i++;
            while (m == true) {
                :(v, m) = self.next_and_more();
                if (int(f(v)) == true)
                    i++;
            }
        } else {
            :(var v, int m) = self.next_and_more();
            i++;
            while (m == true) {
                :(v, m) = self.next_and_more();
                i++;
            }
            return i;
        }
    }

    function any(var f [optional], int has_f [opt_flag])
    {
        :(var v, int m) = self.next_and_more();
        if (has_f) {
            if (f(v))
                return true;
            while (m == true) {
                :(v, m) = self.next_and_more();
                if (int(f(v)) == true)
                    return true;
            }
            return false;
        } else {
            return self.has_more();
        }
    }

    function single(var f [optional], int has_f [opt_flag])
    {
        if (!self.has_more())
            self.empty();
        :(var d, int m) = self.next_and_more();
        if (m == true)
            Rosella.Error.invalid(__FUNCTION__, ".single() expects a sequence with exactly one element");
        return d;
    }

    function first(var f [optional], int has_f [opt_flag])
    {
        if (!self.has_more())
            self.empty();
        if (has_f) {
            :(var d, int m) = self.next_and_more();
            if (f(d))
                return d;
            while (m == true) {
                :(d, m) = self.next_and_more();
                if (int(f(d)) == true)
                    return d;
            }
            Rosella.Error.invalid(__FUNCTION__, ".first() expects at least one matching item");
        } else {
            return self.next();
        }
    }

    function first_or_default(var f [optional], int has_f [opt_flag], var def [named,optional], int has_def [opt_flag])
    {
        if (!has_def)
            def = null;
        if (!self.has_more())
            return def;
        if (has_f) {
            :(var d, int m) = self.next_and_more();
            if (f(d))
                return d;
            while (m == true) {
                :(d, m) = self.next_and_more();
                if (int(f(d)) == true)
                    return d;
            }
            return def;
        } else {
            return self.next();
        }
    }

    function group_by(var f)
    {
        if (!self.has_more())
            self.empty();
        var groups = Rosella.pmc_keyed_hash();
        :(var d, int m) = self.next_and_more();
        var key = f(d);
        groups[key] = [d];
        while (m == true) {
            :(d, m) = self.next_and_more();
            key = f(d);
            if (!(exists groups[key]))
                groups[key] = [];
            push(groups[key], d);
        }
        return new Rosella.Query.Iterable.Hash(groups);
    }
}

