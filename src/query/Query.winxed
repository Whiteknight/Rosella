namespace Rosella
{
    namespace Query
    {
        function err_no_provider(var data)
        {
            using Rosella.get_type_name;
            var class_obj = typeof(data);
            string class_name = get_type_name(class_obj);
            die("Query: Can not find provider for " + class_name);
        }

        function get_provider(var data, var provider)
        {
            if (provider != null)
                return provider;
            using Rosella.build;
            int satisfies = 0;
            ${ does satisfies, data, "array" };
            if (satisfies)
                return build(class Rosella.Query.Provider.Array);
            ${ does satisfies, data, "hash" };
            if (satisfies)
                return build(class Rosella.Query.Provider.Hash);
            err_no_provider(data);
        }

        function map(var data, var mapper,
            var provider [named,optional], int has_provider [opt_flag])
        {
            if (!has_provider)
                provider = null;
            provider = get_provider(data, provider);
            return provider.map(data, mapper);
        }

        function filter(var data, var func,
                var provider [named,optional], int has_provider [opt_flag])
        {
            if (!has_provider)
                provider = null;
            provider = get_provider(data, provider);
            return provider.filter(data, func);
        }

        function fold(var seed, var data, var func,
                var provider [named,optional], int has_provider [opt_flag])
        {
            if (!has_provider)
                provider = null;
            provider = get_provider(data, provider);
            return provider.fold(seed, data, func);
        }
    }
}
