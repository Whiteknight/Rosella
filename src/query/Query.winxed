/* Query Library
    This library implements a series of higher-order functions for
    working with aggregates.

    To work with the Query library, you must wrap your aggregate in a
    Queryable. Use Query.as_queryable to do this easily. Once you have a
    Queryable, you can call and chain methods on it to produce results.
*/
namespace Rosella.Query
{
    // Get a Queryable. The optional second argument determines the type
    // of queryable wrapper to use. 0 (default) = a normal Queryable.
    // 1 = in-place queryable. In-place produces less churn, but is not
    // immutable.
    function as_queryable(var data, int inplace [optional], int has_ip [opt_flag])
    {
        if (has_ip && inplace)
            return new Rosella.Query.Queryable.InPlace(data);
        else
            return new Rosella.Query.Queryable(data);
    }

    function as_stream(var data)
    {
        return new Rosella.Query.Stream(data);
    }

    // Helper function. Determine if the aggregate is an array
    function is_array(var data)
    {
        int flag;
        ${ does flag, data, "array" };
        return flag;
    }

    // Helper function. Determine if the aggregate is a hash
    function is_hash(var data)
    {
        int flag;
        ${ does flag, data, "hash" };
        return flag;
    }

    // Helper function. Excute one callback depending on whether the given
    // data is an array, a hash, or anything else.
    function array_or_hash(var data, var array_func, var hash_func, var scalar_func)
    {
        int flag;
        ${ does flag, data, "array" };
        if (flag)
            return array_func(data);
        ${ does flag, data, "hash" };
        if (flag)
            return hash_func(data);
        return scalar_func(data);
    }

    // lightly-optimized implementation of Quicksort.
    function qsort(var d, int s, int n, var cmp)
    {
        int last = n-1;
        while (last > s) {
            int pivot = s + int((n - s) / 2);
            int store = s;
            var tmp;

            var piv = d[pivot];
            d[pivot] = d[last];
            d[last] = piv;

            for(int ix = s; ix < last; ix++) {
                if (cmp(d[ix], piv) < 0) {
                    tmp = d[store];
                    d[store] = d[ix];
                    d[ix] = tmp;
                    store++;
                }
            }

            tmp = d[last];
            d[last] = d[store];
            d[store] = tmp;
            pivot = store;
            qsort(d, s, pivot, cmp);
            s = pivot + 1;
        }
    }

    function knuth_fisher_yates_shuffle(var d)
    {
        int i = elements(d);
        var rand = new 'Integer';
        for (int i = elements(d) - 1; i > 0; i--) {
            rand.set_random(i + 1);
            int n = rand;
            var v = d[i];
            d[i] = d[n];
            d[n] = v;
        }
    }

    function install_to_type(var type)
    {
        var type_class = Rosella.get_type_class(type);
        type_class.add_method("queryable", function(var obj) {
            return Rosella.Query.as_queryable(obj);
        });
        type_class.add_method("stream", function(var obj) {
            return Rosella.Query.as_queryable(obj);
        });
    }

    /* Default Provider Factory
    */

    const string DEFAULT_PROVIDER_FACTORY = "Rosella.Query.default_provider_factory";

    // Get the global default provider factory
    function default_provider_factory()
    {
        var temp = Rosella.Globals.get_global(DEFAULT_PROVIDER_FACTORY);
        if (temp == null) {
            temp = new Rosella.Query.Provider.Factory(
                new Rosella.Query.Provider.Scalar(), {
                    "array" : new Rosella.Query.Provider.Array(),
                    "hash"  : new Rosella.Query.Provider.Hash()
                }, null);
            Rosella.Globals.register_global(DEFAULT_PROVIDER_FACTORY, temp);
        }
        return temp;
    }

    // Set a customer global provider factory
    function set_provider_factory(var factory)
    {
        Rosella.Globals.register_global(DEFAULT_PROVIDER_FACTORY, factory);
    }

}
