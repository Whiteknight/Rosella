namespace Rosella { namespace Harness { namespace TestFile
{
    /* TestFile Factory Class
        Load TestFile objects from a list of files or a list of directories.
        The exact type of TestFile object to load is selectable.
    */
    class Factory : Rosella.ObjectFactory
    {
        var os;

        /* Public API Functions
        */

        function Factory(var testfile_type)
        {
            self.ObjectFactory(testfile_type);
            loadlib("os");
            self.os = new 'OS';
        }

        // Make a suitable TestFile object for the given file.
        function create_typed(var type, string filename)
        {
            using Rosella.construct;
            return construct(type, filename);
        }

        // Return a list of TestFile objects from a list of directories.
        // Search through those directories, possibly recursively, for a list
        // of files which appear to be tests.
        function create_tests_from_dirs(var test_type, var dirs, int recurse)
        {
            var tests = [];
            for (string dirpath in dirs) {
                var rawfiles = [];
                var dir = new Rosella.FileSystem.Directory(dirpath);
                using is_test;
                dir.walk_func(is_test);
                self.get_dir_contents(dir, recurse, rawfiles);
                for (string filename in rawfiles) {
                    var testobj = self.create_typed(test_type, filename);
                    push(tests, testobj);
                }
            }
            return tests;
        }

        // Return a list of TestFile objects from a list of files. Do not do
        // any detection or sanity checking, all files in the list are
        // assumed to be valid test files for this loader.
        function create_tests_from_files(var test_type, var filenames)
        {
            var tests = [];
            for (string filename in filenames) {
                var testobj = self.create_typed(test_type, filename);
                push(tests, testobj);
            }
            return tests;
        }

        // Determine if the file is a valid test. Probably best to override this in
        // a subclass if you need different behaviors.
        // TODO: Maybe read the shebang preamble to make sure we have the
        //       correct type of file.
        function is_test(string filename)
        {
            if (indexof(filename, ".t") == -1)
                return;
            if (indexof(filename, ".OLD") != -1)
                return;
            return filename;
        }
    }
}}}

