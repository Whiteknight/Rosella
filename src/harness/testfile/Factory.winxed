namespace Rosella { namespace Harness { namespace TestFile
{
    /* TestFile Factory Class
        Load TestFile objects from a list of files or a list of directories.
        The exact type of TestFile object to load is selectable.
    */
    class Factory : Rosella.ObjectFactory
    {
        var os;

        /* Public API Functions
        */

        function Factory(var testfile_type)
        {
            self.ObjectFactory(testfile_type);
            self.os = Rosella.FileSystem.get_os_pmc();
        }

        // Make a suitable TestFile object for the given file.
        function create_typed(var type, string filename)
        {
            return Rosella.construct(type, filename);
        }

        // Return a list of TestFile objects from a list of directories.
        // Search through those directories, possibly recursively, for a list
        // of files which appear to be tests.
        function create_tests_from_dirs(var test_type, var dirs, int recurse)
        {
            return Rosella.Query.as_queryable(dirs)
                .map(function(d) { return new Rosella.FileSystem.Directory(d); })
                .map(function(dir) {
                    if (recurse)
                        return dir.walk_func(function(file) { return file; });
                    else
                        return dir.get_files();
                })
                .flatten()
                .filter(function(f) { return f.path_obj().extension() == "t"; })
                .map(function(f) { return self.create_typed(test_type, string(f)); })
                .data();
        }

        // Return a list of TestFile objects from a list of files. Do not do
        // any detection or sanity checking, all files in the list are
        // assumed to be valid test files for this loader.
        function create_tests_from_files(var test_type, var filenames)
        {
            return Rosella.Query.as_queryable(filenames).map(function(filename) {
                var file = new Rosella.FileSystem.File(filename);
                if (!file.exists())
                    Rosella.Error.invalid(__FUNCTION__, "file '%s' does not exist", filename);
                return self.create_typed(test_type, filename);
            }).data();
        }

        // Determine if the file is a valid test. Probably best to override this in
        // a subclass if you need different behaviors.
        // TODO: Maybe read the shebang preamble to make sure we have the
        //       correct type of file.

    }
}}}

