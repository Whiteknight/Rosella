/* Harness Utility Routines
*/
namespace Rosella.Harness
{
    const string DEFAULT_FILERESULT_FACTORY = "Rosella.Harness.FileResult_factory";

    // Get a factory for creating FileResults
    function default_fileresult_factory()
    {
        var temp = Rosella.Globals.get_global(DEFAULT_FILERESULT_FACTORY);
        if (temp == null) {
            temp = new Rosella.ObjectFactory(class Rosella.Harness.FileResult);
            Rosella.Globals.register_global(DEFAULT_FILERESULT_FACTORY, temp);
        }
        return temp;
    }

    // Set the global default FileResult factory
    function set_fileresult_factory(var f)
    {
        Rosella.Globals.register_global(DEFAULT_FILERESULT_FACTORY, f);
    }
}

/* TAP Harness class. Contains a list of TestFile objects and executes
   each in a loop. The Harness keeps statistics about the test run, and
   passes them off to other routines for display and analysis.

   Harness is the Controller object in the MVC system. Harness.View is
   the view which displays to the user, and the model is made of
   Harness.TestRun and Harness.FileResult objects.
*/
class Rosella.Harness
{
    var testrun_factory;
    var view;
    var saved_runs;
    var container;

    // Constructor
    function Harness()
    {
        self.testrun_factory = new Rosella.Harness.TestRun.Factory();
        self.saved_runs = [];
        self.container = Rosella.Container.default_container();
        self.register_types();
    }

    /* Setup Routines
    */

    // Set a customer TestRun.Factory object
    function set_testrun_factory(var factory)
    {
        self.testrun_factory = factory;
        return self;
    }

    // Add a custom testfile type
    function add_testfile_type(string name, var type)
    {
        self.testrun_factory.add_testfile_type(name, type);
        return self;
    }

    function set_view(var view)
    {
        self.view = view;
    }

    // Set a view to use
    function view()
    {
        if (self.view == null)
            self.view = new Rosella.Harness.View();
        return self.view;
    }

    /* Routines for adding tests to the harness
    */

    // Add test directories to the current TestRun being constructed
    function add_test_dirs(string testfile_type_s, var dirs [slurpy],
        var options [slurpy,named])
    {
        self.testrun_factory.add_test_dirs(testfile_type_s, dirs:[flat],
            options:[flat,named]);
        return self;
    }

    // Add specific test files to the current TestRun
    function add_test_files(string testfile_type_s, var files [slurpy],
        var options [slurpy,named])
    {
        self.testrun_factory.add_test_files(testfile_type_s, files:[flat],
            options:[flat,named]);
        return self;
    }

    // Return the current test run
    function setup_test_run(var view = self.view(), var options [named,slurpy])
    {
        var run = self.testrun_factory.create(options:[flat,named]);
        view.add_run(run, 0);
        push(self.saved_runs, run);
        return run;
    }

    function show_results()
    {
        var view = self.view();
        view.show_results();
    }

    /* Routines for Running the Harness
    */

    // Run the harness. Get argument values and pass them to run_internal
    function run(var test_runs = self.saved_runs,
            var test_executor [named,optional], int has_te [opt_flag],
            int debug [named,optional], int has_dbg [opt_flag])
    {
        if (!has_te)
            test_executor = self.container.resolve(class Rosella.Harness.TestExecutor);
        if (!has_dbg)
            debug = 0;
        if (test_runs instanceof Rosella.Harness.TestRun)
            test_runs = [test_runs];

        var fileresult_factory = self.container.resolve(class Rosella.Harness.FileResult.Factory);
        var view = self.view();
        return self.run_internal(test_runs, test_executor, fileresult_factory, view, debug);
    }

    // Show the results with the View
    function show_results()
    {
        var view = self.view();
        view.show_results();
    }

    /* Private Internal Routines
    */

    // Internal routine to run the harness
    function run_internal(var test_runs, var executor, var fileresult_factory,
            var view, int debug)
    {
        for (var test_run in test_runs) {
            for (var test in test_run.tests()) {
                var result = fileresult_factory.create(test);
                view.start_test(string(test));
                executor.run(view, test, result, debug);
                view.end_test(result);
            }
            test_run.mark_completed();
            view.test_run_complete(test_run);
            if (!test_run.run_was_success())
                return false;
        }
        return true;
    }

    function register_types()
    {
        var c = self.container;
        if (!c.is_registered(class Rosella.Harness.TapParser)) {
            c.register(class Rosella.Harness.TapParser,
                new Rosella.Container.LifetimeManager.Transient(),
                new Rosella.Container.Resolver.TypeConstructor(
                    class Rosella.Harness.TapParser,
                    "TapParser"
                )
            );
        }
        if (!c.is_registered(class Rosella.Harness.TestExecutor)) {
            c.register(class Rosella.Harness.TestExecutor,
                new Rosella.Container.LifetimeManager.Transient(),
                new Rosella.Container.Resolver.TypeConstructor(
                    class Rosella.Harness.TestExecutor,
                    "TestExecutor",
                    new Rosella.Container.Argument.Resolve(
                        class Rosella.Harness.TapParser
                    )
                )
            );
        }
        if (!c.is_registered(class Rosella.Harness.FileResult.Factory)) {
            c.register(class Rosella.Harness.FileResult.Factory,
                new Rosella.Container.LifetimeManager.Permanent()
            );
        }
    }
}

