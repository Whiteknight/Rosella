namespace Rosella.Harness
{
    /* Test Executor Class
        Central engine for executing tests. Executes one test at a time.
    */
    class TestExecutor
    {
        const int MODE_SPAWN_EXECUTE = 0;
        const int MODE_COMPILE_INLINE = 1;

        // Two modes: spawn/execute and compile inline. See the constants above
        var mode;

        // Constructor
        function TestExecutor(int mode)
        {
            self.mode = mode;
        }

        /* Public API
        */

        // Execute a single test, using the given parser, and sending update
        // commands to the view.
        function run(var view, var file, var result, var parser, int debug)
        {
            var stream;
            if (int(self.mode) == MODE_COMPILE_INLINE)
                stream = self.compile_and_execute(file, result);
            else
                stream = self.open_pipe_stream(file);
            if (result.status == null || result.status != "ABORTED") {
                try {
                    parser.parse(stream, view, result);
                } catch (e) {
                    /*
                    if (__DEBUG__) {
                        say("");
                        say(e.message);
                        for(string bt in e.backtrace_strings())
                            say(bt);
                    }
                    */
                    result.mark_test_abort(e.message);
                }
            }
            int exit_status = self.close_stream(file, stream);
            if (exit_status != 0 || (result.status != null && result.status == "ABORTED"))
                result.mark_test_abort("Test aborted with exit code " + string(exit_status));
        }

        /* Internal Helper Methods
        */

        // Compile the TestFile inline and execute it. Return a Stream over
        // a StringHandle used to capture output
        function compile_and_execute(var file, var result)
        {
            var sub = file.compile_test();
            var handle = Rosella.IO.capture_output(1, sub,
                function(e) {
                    result.mark_test_abort(e);
                }
            );
            var ihandle = Rosella.FileSystem.iterable_handle(handle);
            return Rosella.Query.as_stream(ihandle);
        }

        // Open a stream for a pipe to a separate process where the test will
        // be run.
        function open_pipe_stream(var file)
        {
            string filename = file.setup_spawn();
            if (filename == null)
                return null;
            string cmd = file.get_spawn_command(filename);
            var pipe = Rosella.IO.open_pipe(cmd);
            var ihandle = Rosella.FileSystem.iterable_handle(pipe);
            return Rosella.Query.as_stream(ihandle);
        }

        // Close the stream. Check the exit status if the test was aborted
        // prematurely
        function close_stream(var file, var stream)
        {
            int exit_code = stream.on_data(function(ih) {
                var handle = ih.handle();
                handle.close();
                int can_exit_status;
                ${ can can_exit_status, handle, "exit_status" };
                return can_exit_status == 1 ? handle.exit_status() : 0;
            });
            file.cleanup_spawn();
            return exit_code;
        }
    }
}
