/* Test Executor Class
    Central engine for executing tests. Executes one test at a time.
*/
class Rosella.Harness.TestExecutor
{
    var parser;

    // Constructor
    function TestExecutor(var parser)
    {
        self.parser = parser;
    }

    /* Public API
    */

    // Execute a single test, using the given parser, and sending update
    // commands to the view.
    function run(var view, var file, var result, int debug)
    {
        result.start_test(floattime());
        var stream = self.open_stream(file, result);
        if (result.status == null || result.status != "ABORTED") {
            try {
                self.parser.parse(stream, view, result);
            } catch (e) {
                //if (__DEBUG__) {
                    say("");
                    say(e.message);
                    for(string bt in e.backtrace_strings())
                        say(bt);
                //}
                result.mark_test_abort(e.message);
            }
        }
        int exit_status = self.close_stream(file, stream);
        result.end_test(floattime(), exit_status);

        // TODO: Move this logic into FileResult
        if (exit_status != 0 || (result.status != null && result.status == "ABORTED"))
            result.mark_test_abort("Test aborted with exit code " + string(exit_status));
    }

    /* Internal Helper Methods
    */

    // Open a stream for a pipe to a separate process where the test will
    // be run.
    function open_stream(var file, var result)
    {
        string filename = file.setup_spawn();
        if (filename == null)
            return null;
        string cmd = file.get_spawn_command(filename);
        var pipe = Rosella.IO.open_pipe(cmd);
        var ihandle = Rosella.FileSystem.iterable_handle(pipe);
        return Rosella.Query.iterable(ihandle);
    }

    // Close the stream. Check the exit status if the test was aborted
    // prematurely
    function close_stream(var file, var stream)
    {
        int exit_code = stream.on_data(function(ih) {
            var handle = ih.handle();
            handle.close();
            int can_exit_status = can(handle, "exit_status");
            return can_exit_status == 1 ? handle.exit_status() : 0;
        });
        file.cleanup_spawn();
        return exit_code;
    }
}

class Rosella.Harness.TestExecutor.Inline : Rosella.Harness.TestExecutor
{
    // Compile the TestFile inline and execute it. Return a Stream over
    // a StringHandle used to capture output
    function open_stream(var file, var result)
    {
        var sub = file.compile_test();
        var handle = Rosella.IO.capture_output(1, sub,
            function(e) {
                result.mark_test_abort(e);
            }
        );
        var ihandle = Rosella.FileSystem.iterable_handle(handle);
        return Rosella.Query.iterable(ihandle);
    }
}
