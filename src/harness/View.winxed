/* Default Harness View
    View class for the Harness. Displays running status and result
    information to the user on the commandline.
*/
class Rosella.Harness.View
{
    const int MIN_NUM_ELLIPSES = 3;

    var handle;
    var test_runs;
    var line_length;
    var total_files;
    var num_failed_files;
    var num_passed_tests;
    var num_failed_tests;
    var num_aborted_files;
    var need_backspaces;

    // Constructor
    function View(var handle = null)
    {
        self.handle = handle == null ?  getstdout() : handle;
        self.test_runs = [];
        self.line_length = 0;
        self.total_files = 0;
        self.num_passed_tests = 0;
        self.num_failed_files = 0;
        self.num_failed_tests = 0;
        self.num_aborted_files = 0;
        self.need_backspaces = 0;
    }

    /* View API.
        These are the functions that a View should implement to be used
        with the Harness.
    */

    // Add in a TestRun object to the view
    function add_run(var test_run, int line_length)
    {
        push(self.test_runs, test_run);
        int maxlength = test_run.max_file_length(line_length);
        if (self.line_length > maxlength)
            maxlength = self.line_length;
        if (line_length > maxlength)
            maxlength = line_length;
        self.line_length = maxlength;
    }

    // Start an individual test
    function start_test(string name)
    {
        int diff = int(self.line_length) - length(name) + MIN_NUM_ELLIPSES;
        string elipses = repeat(".", diff);
        self.printf("%s %s ", name, elipses);
    }

    // Show the current progress of a test being executed
    function show_current_test_progress(int done, int total)
    {
        if (self.need_backspaces > 0) {
            int num_b = int(self.need_backspaces);
            string b = repeat("\b", num_b);
            self.printf(b + " ");
            self.need_backspaces = 0;
        }
        string p = Rosella.String.sprintf("%d/%d", done, total);
        self.need_backspaces = length(p) + 1;
        self.printf(p);
    }

    // End a test
    function end_test(var result)
    {
        if (self.need_backspaces > 0) {
            int num_b = int(self.need_backspaces);
            string b = repeat("\b", num_b);
            self.printf(b + " ");
            self.need_backspaces = 0;
        }
        string msg;
        if (result.status() != "PASSED")
            msg = Rosella.String.sprintf("not ok (%s)", self.get_result_status(result));
        else
            msg = "ok";
        msg = Rosella.String.pad_end(msg, 10);
        self.sayf(msg);
        string error_details = result.error_details();
        if (error_details != null) {
            var lines = split("\n", error_details);
            for (string line in lines)
                self.sayf("# %s", line);
        }
    }

    // Mark the TestRun as being complete
    function test_run_complete(var test_run)
    {
        self.total_files       += test_run.num_files();
        self.num_passed_tests  += test_run.num_tests_by_status("PASSED");
        self.num_failed_files  += test_run.num_files_by_status("FAILED");
        self.num_failed_files  += test_run.num_files_by_status("BADPLAN");
        self.num_failed_tests  += test_run.num_tests_by_status("FAILED");
        self.num_aborted_files += test_run.num_files_by_status("ABORTED");
    }

    // Show the results to the user
    function show_results()
    {
        self.show_basic_result_info();

        if (int(self.num_aborted_files) == 0 && int(self.num_failed_files) == 0) {
            self.show_result_coda("PASS");
            return;
        }
        self.sayf("\nTest Summary Report\n-------------------");

        // TODO: Should record and output error codes or other error info.
        // Display some diagnostics here
        self.get_all_files_by_status("ABORTED")
            .foreach(function(f) {
                self.show_file_result_info(f);
                self.sayf("\tTest aborted with non-zero exit code");
            });

        self.get_all_files_by_status("BADPLAN")
            .foreach(function(f) {
                self.show_file_result_info(f);
                var r = f.get_result();
                self.sayf("\tBad Plan. Planned %d tests, ran %d", r.total_tests(), r.ran_tests());
            });

        self.get_all_files_by_status("FAILED")
            .tap(function(f) {
                self.show_file_result_info(f);
                var r = f.get_result();
                int total_tests = r.total_tests();
                int ran_tests = r.ran_tests();
                if (total_tests != ran_tests)
                    self.sayf("\tBad Plan. Planned %d tests, ran %d", total_tests, ran_tests);
            })
            .project(function(f) { return f.result.list_of_failures(); })
            .foreach(function(f) {
                self.sayf("  Failed test: %s", f);
            });

        self.show_result_coda("FAIL");
    }

    // Show basic run information about the test file if needed
    function show_file_result_info(var file)
    {
        var r = file.get_result();
        self.sayf("%s (exit code: %d Tests: %d Failed: %d)", file, r.exit_code(), r.ran_tests(), r.num_subtest_failures());
    }

    // Show a quick summary about the test run, after all tests but before
    // detailed summary info
    function show_basic_result_info()
    {
        int num_aborted_files = int(self.num_aborted_files);
        int num_failed_files = int(self.num_failed_files);
        if (num_aborted_files == 0 && num_failed_files == 0) {
            self.sayf("All tests successful");
            return;
        }

        int num_failed_tests = int(self.num_failed_tests);
        int num_passed_tests = int(self.num_passed_tests);
        if (num_failed_tests == 0) {
            self.sayf("All %d subtests passed", num_passed_tests);
            return;
        }
    }

    /* Internal Helper Routines
    */

    // Helper routine to show a PASSED/FAILED headline message, and
    // a count of how many tests passed.
    function show_result_coda(string result)
    {
        int num_runs = int(self.test_runs);
        self.sayf("Passed %d tests in %d files (%d test run%s, %0.2f seconds)",
            self.num_passed_tests,
            self.total_files,
            num_runs,
            num_runs == 1 ? "" : "s",
            self.get_total_test_time()
        );
        self.sayf("Result: %s", result);
    }

    // Get a list of all executed files from all runs with the given
    // status
    function get_all_files_by_status(string status)
    {
        return Rosella.Query.iterable(self.test_runs)
            .filter(function(tr) { return tr.is_complete() != 0; })
            .project(function(tr) { return tr.files_by_status(status); });
    }

    // Get the total amount of execution time for the test run
    function get_total_test_time()
    {
        return Rosella.Query.iterable(self.test_runs)
            .filter(function(tr) { return tr.is_complete() != 0; })
            .project(function(tr) { return tr.tests(); })
            .map(function(t) { return t.get_result(); })
            .fold(function(float s, r) { return s + float(r.run_time()); }, 0.0);
    }

    // Get a status string describing the results of the test
    function get_result_status(var result)
    {
        string status = result.status();
        int total_tests = result.total_tests();
        switch(status) {
            case "EMPTY":
                return "No tests run or no TAP output";
            case "ABORTED":
                return "Test exited prematurely";
            case "PASSED":
                return "All subtests pass";
            case "FAILED":
                int failed_tests = elements(result.list_of_failures());
                return Rosella.String.sprintf("Failed %d / %d", failed_tests, total_tests);
            case "BADPLAN":
                return "Bad plan";
            default:
                return "Unknown status '" + status + "'";
        }
    }

    /* IO Routines
    */

    // Print out a debug message
    function debug(int dbg, var msg)
    {
        self.sayf("DEBUG: %s\n", msg);
    }

    // sayf, using the view handle
    function sayf(string fmt, var args [slurpy])
    {
        Rosella.IO.sayf(fmt, args:[flat], self.handle:[named("handle")]);
    }

    // printf, using the view handle
    function printf(string fmt, var args [slurpy])
    {
        Rosella.IO.printf(fmt, args:[flat], self.handle:[named("handle")]);
    }
}
