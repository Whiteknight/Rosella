namespace Rosella { namespace Harness
{
    /* View class for the Harness. Displays running status and result
       information to the user on the commandline.
    */
    class View
    {
        var test_runs;
        var line_length;
        var total_files;
        var num_passed_files;
        var num_failed_files;
        var num_passed_tests;
        var num_failed_tests;
        var num_aborted_files;

        function View()
        {
            self.test_runs = [];
            self.line_length = 0;
            self.total_files = 0;
            self.num_passed_files = 0;
            self.num_passed_tests = 0;
            self.num_failed_files = 0;
            self.num_failed_tests = 0;
            self.num_aborted_files = 0;
        }

        /* View API.
            These are the functions that a View should implement to be used
            with the Harness.
        */

        // Add in a TestRun object to the view
        function add_run(var test_run, int line_length)
        {
            push(self.test_runs, test_run);
            int maxlength = test_run.max_file_length(line_length);
            if (self.line_length > maxlength)
                maxlength = self.line_length;
            if (line_length > maxlength)
                maxlength = line_length;
            self.line_length = maxlength;
        }

        // Start an individual test
        function start_test(var test)
        {
            string filename = test.filename();
            int len = length(filename);
            int line_length = self.line_length;
            int diff = line_length - len + 3;
            string elipses = "";
            ${ repeat elipses, '.', diff };
            Rosella.IO.printf("%s %s ", filename, elipses);
        }

        // End a test
        function end_test(var test)
        {
            if (test.result != null)
                sayf("not ok (%s)", test.result);
            else
                say("ok");
            string error_details = test.error_details();
            if (error_details != null)
                Rosella.IO.sayf("# %s", error_details);
        }

        // Mark the TestRun as being complete
        function test_run_complete(var test_run)
        {
            self.total_files       += test_run.num_files();
            self.num_passed_files  += test_run.num_files_by_status("PASSED");
            self.num_passed_tests  += test_run.num_tests_by_status("PASSED");
            self.num_failed_files  += test_run.num_files_by_status("FAILED");
            self.num_failed_tests  += test_run.num_tests_by_status("FAILED");
            self.num_aborted_files += test_run.num_files_by_status("ABORTED");
        }

        // Show the results to the user
        function show_results()
        {
            self.show_results_summary();
            self.show_error_detail();
            self.show_failure_detail();
        }

        /* Results Displaying Routines
            These routines are used internally to display result information.
        */

        // A quick summary showing whether the test run passed or failed
        function show_results_summary()
        {
            if (int(self.num_aborted_files) || int(self.num_failed_files)) {
                self.show_result_headline("FAILED");

                var failed_files  = self.get_all_files_by_status("FAILED");
                if (self.num_aborted_files)
                    Rosella.IO.sayf("\tFailed %d files due to premature exit", self.num_aborted_files);
                if (self.num_failed_tests)
                    Rosella.IO.sayf("\tFailed %d tests in %d files", self.num_failed_tests, self.num_failed_files);
                say("");
            } else
                self.show_result_headline("PASSED");
        }

        function show_error_detail()
        {
            if (self.num_failed_tests == 0)
                return;

            var failed_files = self.get_all_files_by_status("FAILED");

            say("\tList of failed tests by file:");
            for (var test in failed_files) {
                Rosella.IO.sayf("\t\t%s", test.filename());
                for (var failure in test.list_of_failures())
                    Rosella.IO.sayf("\t\t\t%s", failure);
            }
        }

        function show_failure_detail()
        {
            var aborted_files = self.get_all_files_by_status("ABORTED");

            if (self.num_aborted_files) {
                say("\tList of files with premature exits:");
                for (var file in aborted_files) {
                    // TODO: Should record and output error codes or other
                    //       error info. Display some diagnostics here
                    Rosella.IO.sayf("\t\t%s", file.filename());
                }
            }
        }

        function debug(int dbg, var msg)
        {
            Rosella.IO.sayf("DEBUG: %s\n", msg);
        }

        /* Internal Helper Routines
        */

        // Helper routine to show a PASSED/FAILED headline message, and
        // a count of how many tests passed.
        function show_result_headline(string result)
        {
            Rosella.IO.sayf("Result: %s", result);
            Rosella.IO.sayf("\tPassed %d tests in %d files (%d test runs)",
                self.num_passed_tests, self.total_files, int(self.test_runs)
            );
        }

        // Get a list of all executed files from all runs with the given
        // status
        function get_all_files_by_status(string status)
        {
            var files_with_status = [];
            for (var testrun in self.test_runs) {
                if (testrun.is_complete() == 0)
                    continue;
                var failed_tests = testrun.files_by_status(status);
                for (var failed_test in failed_tests)
                    push(files_with_status, failed_test);
            }
            return files_with_status;
        }
    }
}}
