namespace Rosella { namespace Harness
{
    class TapParser
    {
        var tokenizer;

        function TapParser()
        {
            using Rosella.String.get_character_class;
            self.tokenizer = new Rosella.String.Tokenizer.CClass([
                get_character_class("punctuation"),
                get_character_class("numeric"),
                get_character_class("word")
            ]);
        }

        function parse(var stream, var result)
        {
            var plan_stream = stream
                .take(1)
                .map(function(l) {
                    self.tokenizer.add_data(l);
                    return self.get_plan(self.tokenizer.all_tokens(), result);
                });
            if (plan_stream.has_more() == false || plan_stream.next() == false) {
                result.mark_test_empty();
                return;
            }
            stream
                .clear_stages()
                .map(function(l) {
                    self.tokenizer.add_data(l);
                    return Rosella.Query.as_stream(self.tokenizer)
                        .filter(function(t) { return int(t.metadata()) != 0; })
                        .map(function(t) { return t.data(); })
                        .data();
                })
                .filter(function(l) { return elements(l) >= 2 && substr(l[0], 0, 1) != "#"; })
                .map(function(l) {
                    int i = 0;
                    string r = l[i++];
                    int result;
                    if (r == "ok")
                        result = 1;
                    else if (r == "not" && l[i++] == "ok")
                        result = 0;
                    else
                        Rosella.Error.invalid(__FUNCTION__, "Unknown TAP sequence: '%s' ('%s', '%s')", join(" ", l), r, l[1]);
                    int num = int(l[i++]);
                    if (i >= elements(l))
                        return ["", num, result, 0];
                    if (l[i] == "-")
                        i++;
                    string name = "";
                    while(i < elements(l) && l[i] != "#") {
                        name = name + string(l[i]) + " ";
                        i++;
                    }
                    if (i < elements(l) && l[i] == "#" && i + 1 < elements(l) && l[i + 1] == "TODO")
                        return [name, num, result, 1];
                    return [name, num, result, 0];
                })
                .foreach(function(r) { result.*(r[2] == 1 ? "add_pass" : "add_fail")(r[0], r[1], r[3]); })
                .execute();
        }

        function get_plan(var tokens, var result)
        {
            if (tokens[0].data() != "1" || tokens[1].data() != "..")
                return false;

            var plan_t = tokens[2];
            int num_cclass = Rosella.String.get_character_class("numeric");
            if (plan_t.metadata() != num_cclass)
                return false;

            string lim = plan_t.data();
            result.set_plan(int(lim));
            return true;
        }
    }
}}
