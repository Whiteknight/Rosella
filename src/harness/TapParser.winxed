namespace Rosella { namespace Harness
{
    class TapParser
    {
        var tokenizer;

        function TapParser()
        {
            using Rosella.String.get_character_class;
            self.tokenizer = new Rosella.String.Tokenizer.CClass([
                get_character_class("punctuation"),
                get_character_class("numeric"),
                get_character_class("word")
            ]);
        }

        function parse(string text, var result)
        {
            self.tokenizer.add_data(text);
            if (!self.tokenizer.has_tokens() || !self.get_plan(result)) {
                result.mark_test_empty();
                return;
            }
            self.parse_internal(result);
        }

        function get_plan(var result)
        {
            if (self.tokenizer.get_token().data() != "1" ||
                self.tokenizer.get_token().data() != "..")
                return false;

            int num_cclass = Rosella.String.get_character_class("numeric");
            var plan_t = self.tokenizer.get_token();
            if (plan_t.metadata() != num_cclass || indexof("\n", self.tokenizer.get_token().data()) == -1)
                return false;

            string lim = plan_t.data();
            result.set_plan(int(lim));
            return true;
        }

        function parse_internal(var result)
        {
            Rosella.Query.as_queryable(self.get_lines())
                .filter(function(l) { return elements(l) >= 2 && substr(l[0], 0, 1) != "#"; })
                .map(function(l) {
                    int i = 0;
                    string r = l[i++];
                    int result;
                    if (r == "ok")
                        result = 1;
                    else if (r == "not" && l[i++] == "ok")
                        result = 0;
                    else
                        Rosella.Error.invalid(__FUNCTION__, "Unknown TAP sequence: '%s' ('%s', '%s')", join(" ", l), r, l[1]);
                    int num = int(l[i++]);
                    if (i >= elements(l))
                        return ["", num, result, 0];
                    if (l[i] == "-")
                        i++;
                    string name = "";
                    while(i < elements(l) && l[i] != "#") {
                        name = name + string(l[i]) + " ";
                        i++;
                    }
                    if (i < elements(l) && l[i] == "#" && i + 1 < elements(l) && l[i + 1] == "TODO")
                        return [name, num, result, 1];
                    return [name, num, result, 0];
                })
                .foreach(function(r) { result.*(r[2] == 1 ? "add_pass" : "add_fail")(r[0], r[1], r[3]); });
        }

        function get_lines()
        {
            var lines = [[]];
            int i = 0;
            while(self.tokenizer.has_tokens()) {
                var t = self.tokenizer.get_token();
                string d = t.data();
                if (indexof("\n", d) != -1) {
                    i++;
                    lines[i] = [];
                    continue;
                }
                if (int(t.metadata()) != 0)
                    push(lines[i], d);
            }
            return lines;
        }
    }
}}
