namespace Rosella { namespace Action
{
    namespace Argument
    {
        // Verify that the given list of args are all either valid Argument
        // objects, or that they can be used to resolve arguments
        function verify_all_arguments(string caller, var args)
        {
            for (var arg in args) {
                int is_argument = 0;
                ${ can is_argument, arg, "resolve_to" };
                if (!is_argument)
                    Rosella.Error.invalid_type(__FUNCTION__, class Rosella.Action.Argument, typeof(arg));
            }
        }
    }

    /* An argument object for Actions.
        Each Argument object may create one or more actual arguments for a
        function or method call. These arguments may be cached or generated
        on a per-case basis.

        Argument class is an abstract parent type which should not be used
        directly. Use subclasses instead.
    */
    class Argument
    {
        var position;
        var name;

        // Set the name of the Argument. It is now a named argument, not a
        // positional one.
        function name(string name)
        {
            self.name = name;
            self.position = -1;
        }

        // Set the position of the Argument. It is now a positional argument,
        // not a named one.
        function position(int pos)
        {
            self.position = pos;
            self.name = null;
        }

        // Setup the type and location of the argument. It can be either
        // positional or named
        function setup_positioning(
                int position [named,optional], int have_pos [opt_flag],
                string name [named,optional], int have_name [opt_flag])
        {
            if (have_pos)
                self.position(position);
            else if (have_name)
                self.name(name);
        }

        // Take an array and a hash of arguments. Insert the value or values
        // from this argument into the appropriate places.
        function resolve_to(var pos, var named)
        {
            var value = self.resolve_value();
            if (self.name != null)
                named[self.name] = value;
            else if (self.position >= 0)
                pos[self.position] = value;
            else
                ${ push pos, value };
        }

        // Get the actual value. This happens in a subclass.
        function resolve_value()
        {
            Rosella.Error.must_subclass(__CLASS__);
        }
    }
}}

