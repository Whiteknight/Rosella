namespace Rosella
{
    class Action
    {
        var method;
        var args;

        function BUILD(var method,
                var args [optional], int has_args [opt_flag])
        {
            self.method = method;
            if (has_args)
                self.args = args;
            else
                self.args = [];
        }

        function prepare_args(var pos, var named,
                var overrides [optional], int has_overrides [opt_flag])
        {
            for (var arg in self.args)
                arg.resolve_to(pos, named);
            if (has_overrides) {
                for (var override in overrides)
                    override.resolve_to(pos, named);
            }
        }

        function execute(var obj)
        {
            var pos = [];
            var named = {};
            self.prepare_args(pos, named);
            self.execute_initializer(obj, pos, named);
        }

        function execute_initializer(var obj, var pos, var named)
        {
            using Rosella.Error.must_subclass;
            must_subclass("execute_initializer");
        }
    }

    namespace Action
    {
        class Method : Rosella.Action
        {
            function execute_initializer(var obj, var pos, var named)
            {
                using Rosella.call_parrot_method;
                call_parrot_method(obj, self.method, pos, named);
            }
        }

        class Sub : Rosella.Action
        {
            function execute_initializer(var obj, var pos, var named)
            {
                var sub = self.method;
                sub(obj, pos:[flat], named:[flat,named]);
            }
        }
    }
}
