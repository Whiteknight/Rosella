namespace Rosella { namespace FileSystem
{
    /* File Namespace
        This namespace provides utilities to set a global FileHandle factory
        instance, and use it to get instances of FileHandle for various
        purposes. The user can set a custom factory for creating FileHandles
        if a subclass or replacement class should be used instead.
    */
    namespace File
    {
        const string FILEHANDLE_FACTORY_GLOBAL = "Rosella.FileSystem.FileHandleFactory";

        // Get a FileHandle object from a filehandle factory.
        function get_filehandle()
        {
            using Rosella.get_global;
            var factory = get_global(FILEHANDLE_FACTORY_GLOBAL);
            if (factory == null) {
                factory = new Rosella.ObjectFactory("FileHandle");
                set_filehandle_factory(factory);
            }
            while(1) {
                return factory.create();
                factory = get_global(FILEHANDLE_FACTORY_GLOBAL);
            }
        }

        // Set the global FileHandle factory to use.
        function set_filehandle_factory(var factory)
        {
            using Rosella.register_global;
            register_global(FILEHANDLE_FACTORY_GLOBAL, factory);
        }
    }

    /* File Class
        This class represents a file. The file can be created, examined,
        modified, and deleted using methods on this object.
    */
    class File : Rosella.FileSystem.Entry
    {
        // Constructor
        function File(string filepath,
                var parent_dir [optional], int has_dir [opt_flag])
        {
            if (has_dir)
                filepath = string(parent_dir) + filepath;
            self.Entry(filepath);
        }

        // Open the file for reading, returning the open FileHandle. The user
        // must close the filehandle themselves.
        function open_read()
        {
            var filehandle = get_filehandle();
            filehandle.open(self.path, "r");
            return filehandle;
        }

        // Open the file for writing, returning the open FileHandle. The user
        // must close the FileHandle themselves.
        function open_write()
        {
            var filehandle = get_filehandle();
            filehandle.open(self.path, "w");
            return filehandle;
        }

        function open_append()
        {
            var filehandle = get_filehandle();
            filehandle.open(self.path, "a");
            return filehandle;
        }

        // Return all text from the file in a single string.
        function read_all_text()
        {
            var filehandle = self.open_read();
            string text = filehandle.readall();
            filehandle.close();
            return text;
        }

        // Return all text from the file, as an array of lines.
        function read_all_lines(string delim [optional], int has_d [opt_flag])
        {
            if (!has_d)
                delim = "\n";
            string text = self.read_all_text();
            return split(delim, text);
        }

        // Write the text to the file. Create the file if it does not exist,
        // overwrite it if it does.
        function write_all_text(string text)
        {
            var filehandle = self.open_write();
            filehandle.print(text);
            filehandle.close();
        }

        // Write the array of lines to the file, separated by newlines
        function write_all_lines(var lines, string delim [optional], int has_d [opt_flag])
        {
            if (!has_d)
                delim = "\n";
            string text = join(delim, lines);
            self.write_all_text(text);
        }

        // Append the given text to the file without disrupting the existing
        // contents.
        function append_text(string text)
        {
            var filehandle = self.open_append();
            filehandle.print(text);
            filehandle.close();
        }

        // Copy one file to a new destination.
        function copy(string dest)
        {
            var file = new Rosella.FileSystem.File(dest);
            string txt = self.read_all_text();
            file.write_all_text(txt);
            return file;
        }

        // Get a Rosella.FileSystem.Path object to get path information about
        // the filename
        function path_obj()
        {
            string path = self.path;
            return new Rosella.FileSystem.FilePath(path);
        }
    }
}}
