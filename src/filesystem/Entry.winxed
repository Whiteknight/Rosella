namespace Rosella.FileSystem.Entry
{
    // Get a new Entry object (either a File or Directory) for the given path.
    // Throw an exception if it does not exist or is neither a File nor a
    // Directory
    function get_entry(string name)
    {
        int exist = Rosella.FileSystem.get_os_pmc().exists(name);
        if (!exist)
            Rosella.Error.error("Path '%s' does not exist", name);

        if (Rosella.FileSystem.is_directory(name))
            return new Rosella.FileSystem.Directory(name);
        else if (Rosella.FileSystem.is_file(name))
            return new Rosella.FileSystem.File(name);
        Rosella.Error.error("Path '%s' is not a file or a directory", name);
    }
}

/* File System Entry Class
    Entry is the parent object of all items which may appear in a file
    system. It is the parent object of both the File and Directory objects
    and provides some common behavior for both.
*/
class Rosella.FileSystem.Entry
{
    var path;

    // Constructor. Set the path of this Entry. The path is relative to
    // the current working directory of the program
    function Entry(string path)
    {
        self.path = path;
    }

    // Get the name of the entry
    function get_string[vtable]()
    {
        return self.path;
    }

    // Delete the entry
    function delete()
    {
        var os = Rosella.FileSystem.get_os_pmc();
        if (!os.exists(self.path))
            Rosella.Error.error("Cannot delete an Entry that does not exist");
        os.rm(self.path);
    }

    // Determine if the file exists. Returns non-zero if it exists, 0
    // otherwise. Does not verify that the given path points to a file
    // (as opposed to a directory)
    function exists()
    {
        return Rosella.FileSystem.get_os_pmc().exists(self.path);
    }

    // Rename the file. Update the path name stored in this object
    function rename(string new_name)
    {
        Rosella.FileSystem.get_os_pmc().rename(self.path, new_name);
        self.path = new_name;
    }

    // Get the short name of this Entry
    function short_name()
    {
        string sep = Rosella.FileSystem.path_separator();
        var parts = split(sep, self.path);
        for (int i = elements(parts) - 1; i >= 0; i--) {
            string part = parts[i];
            if (part != null && part != "")
                return part;
        }
        return null;
    }
}
