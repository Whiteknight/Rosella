/* Utilities for working with Directories
*/
namespace Rosella.FileSystem.Directory
{
    // Get the current directory object where the application is
    // executing.
    function current_directory()
    {
        string cwd = Rosella.FileSystem.get_os_pmc().cwd();
        return new Rosella.FileSystem.Directory(cwd);
    }
}

/* Directory Class
    This object represents a directory in a file system.
*/
class Rosella.FileSystem.Directory : Rosella.FileSystem.Entry
{
    // Constructor. Build a directory with the given path name
    function Directory(string path, var parent_dir [optional], int has_parent [opt_flag])
    {
        if (path == null || path == "")
            Rosella.Error.invalid(__FUNCTION__, "Directory needs a valid path");

        string path_sep = Rosella.FileSystem.path_separator();
        int len = length(path);
        string lastchar = substr(path, len - 1);
        if (lastchar != path_sep)
            path = path + path_sep;
        if (has_parent)
            path = string(parent_dir) + path;
        self.Entry(path);
    }

    // Delete the directory. If the recursive argument is provided and is
    // non-zero, the directory is deleted by recursively deleting all
    // contents. Otherwise, only an empty directory can be deleted.
    function delete_recursive()
    {
        if (!self.exists())
            Rosella.Error.invalid(__FUNCTION__, "Cannot delete a Directory that does not exist");
        var deleter = new Rosella.FileSystem.Visitor.Delete();
        return self.walk(deleter);
    }

    // Create the directory, if it does not already exist.
    function create()
    {
        var os = Rosella.FileSystem.get_os_pmc();
        if (!os.exists(self.path))
            os.mkdir(self.path, 493);       // 493 = 0755 octal.
    }

    // Get a list of all files in this directory (but not in all
    // subdirectories).
    function get_files()
    {
        return self.__get_entries(1, 0);
    }

    // Get a list of all subdirectories in this directory.
    function get_subdirectories()
    {
        return self.__get_entries(0, 1);
    }

    // Get a list of all entries in this directory. This will be an
    // intermingled list of File and Directory objects
    function get_entries()
    {
        return self.__get_entries(1, 1);
    }

    // Walk this directory recursively using a Visitor object.
    function walk(var visitor [optional], int has_v [opt_flag])
    {
        if (!has_v)
            visitor = new Rosella.FileSystem.Visitor.List();

        visitor.begin_directory(self);
        var files = self.get_files();
        for (var file in files)
            visitor.visit_file(file);
        var subdirs = self.get_subdirectories();
        for (var dir in subdirs)
            dir.walk(visitor);
        visitor.end_directory(self);
        return visitor.result();
    }

    // Walk this directory recursively, applying a function to all files
    // in the directory.
    function walk_func(var func, var named [slurpy,named])
    {
        var visitor = new Rosella.FileSystem.Visitor.Function(func, named:[flat,named]);
        return self.walk(visitor);
    }

    // Get an entry from the directory by name. This could return either
    // a File or a Directory object
    function get_pmc_keyed[vtable](var key)
    {
        string path = string(self.path);
        string name = path + string(key);
        return Rosella.FileSystem.Entry.get_entry(name);
    }

    // Determines if the directory Entry with that name exists
    function exists_keyed[vtable](var key)
    {
        string path = string(self.path);
        string name = path + string(key);
        int exist = Rosella.FileSystem.get_os_pmc().exists(name);
        return exist;
    }

    // Deletes the directory Entry. Deletion in this case is non-recursive
    // so non-empty subdirectories will not be deleted.
    function delete_keyed[vtable](var key)
    {
        string path = string(self.path);
        string name = path + string(key);
        var os = Rosella.FileSystem.get_os_pmc();
        if (os.exists(name))
            os.rm(name);
    }

    // Get an iterator over all entries in this directory
    function get_iter[vtable]()
    {
        return new Rosella.FileSystem.DirectoryIterator(self);
    }

    /* Private Helper Methods
    */

    // Get a list of entries in the directory. Can be files, directories,
    // or both.
    function __get_entries(int include_files, int include_dirs)
    {
        string path = string(self.path);
        var names = Rosella.FileSystem.get_os_pmc().readdir(path);
        var entries = [];

        for (string name in names) {
            if (name == "." || name == "..")
                continue;
            name = path + name;
            if (include_dirs && Rosella.FileSystem.is_directory(name))
                push(entries, new Rosella.FileSystem.Directory(name));
            else if (include_files && Rosella.FileSystem.is_file(name))
                push(entries, new Rosella.FileSystem.File(name));
        }
        return entries;
    }
}
