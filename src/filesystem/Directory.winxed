namespace Rosella { namespace FileSystem
{
    /* Utilities for working with Directories
    */
    namespace Directory
    {
        // Get the current directory object where the application is
        // executing.
        function current_directory()
        {
            using Rosella.FileSystem.get_os_pmc;
            string cwd = get_os_pmc().cwd();
            return new Rosella.FileSystem.Directory(cwd);
        }
    }

    /* Directory Class
        This object represents a directory in a file system.
    */
    class Directory : Rosella.FileSystem.Entry
    {
        // Constructor. Build a directory with the given path name
        function Directory(string path) {
            if (path == null || path == "") {
                using Rosella.Error.invalid;
                invalid(__FUNCTION__, "Directory needs a valid path");
            }
            int len = length(path);
            string lastchar = substr(path, len - 1);
            if (lastchar != "/")
                path = path + "/";
            self.Entry(path);
        }

        // Delete the directory. If the recursive argument is provided and is
        // non-zero, the directory is deleted by recursively deleting all
        // contents. Otherwise, only an empty directory can be deleted.
        function delete_recursive()
        {
            var deleter = new Rosella.FileSystem.Visitor.Delete();
            return self.walk(deleter);
        }

        // Create the directory, if it does not already exist.
        function create()
        {
            using Rosella.FileSystem.get_os_pmc;
            var os = get_os_pmc();
            if (!os.exists(self.path))
                os.mkdir(self.path, 493);       // 493 = 0755 octal.
        }

        // Get a list of all files in this directory (but not in all
        // subdirectories).
        function get_files()
        {
            using Rosella.FileSystem.get_os_pmc;
            string path = string(self.path);
            var file_names = get_os_pmc().readdir(path);
            var files = [];
            using Rosella.FileSystem.is_file;
            for (string file_name in file_names) {
                if (file_name == "." || file_name == "..")
                    continue;
                file_name = path + file_name;
                if (is_file(file_name))
                    push(files, new Rosella.FileSystem.File(file_name));
            }
            return files;
        }

        // Get a list of all subdirectories in this directory.
        function get_subdirectories()
        {
            using Rosella.FileSystem.get_os_pmc;
            string path = string(self.path);
            var names = get_os_pmc().readdir(path);
            var dirs = [];
            using Rosella.FileSystem.is_directory;
            for (string name in names) {
                if (name == "." || name == "..")
                    continue;
                name = path + name;
                if (is_directory(name))
                    push(dirs, new Rosella.FileSystem.Directory(name));
            }
            return dirs;
        }

        // Walk this directory recursively using a Visitor object.
        function walk(var visitor [optional], int has_v [opt_flag])
        {
            if (!has_v)
                visitor = new Rosella.FileSystem.Visitor.List(1, 1);
            visitor.begin_directory(self);
            var files = self.get_files();
            for (var file in files)
                visitor.visit_file(file);
            var subdirs = self.get_subdirectories();
            for (var dir in subdirs)
                dir.walk(visitor);
            visitor.end_directory(self);
            return visitor.result();
        }

        // Walk this directory recursively, applying a function to all files
        // in the directory.
        function walk_func(var func, var named [slurpy,named])
        {
            var visitor = new Rosella.FileSystem.Visitor.Function(func, named:[flat,named]);
            return self.walk(visitor);
        }

        // Get an entry from the directory by name. This could return either
        // a File or a Directory object
        function get_pmc_keyed[vtable](var key)
        {
            string path = string(self.path);
            string name = path + string(key);
            using Rosella.FileSystem.get_os_pmc;
            int exist = get_os_pmc().exists(name);
            if (!exist)
                return null;

            using Rosella.FileSystem.is_file;
            if (is_file(name))
                return new Rosella.FileSystem.File(name);

            using Rosella.FileSystem.is_directory;
            if (is_directory(name))
                return new Rosella.FileSystem.Directory(name);
            return null;
        }

        // Determines if the directory Entry with that name exists
        function exists_keyed[vtable](var key)
        {
            string path = string(self.path);
            string name = path + string(key);
            using Rosella.FileSystem.get_os_pmc;
            int exist = get_os_pmc().exists(name);
            return exist;
        }

        // Deletes the directory Entry. Deletion in this case is non-recursive
        // so non-empty subdirectories will not be deleted.
        function delete_keyed[vtable](var key)
        {
            string path = string(self.path);
            string name = path + string(key);
            using Rosella.FileSystem.get_os_pmc;
            var os = get_os_pmc();
            int exist = os.exists(name);
            if (exist)
                os.rm(name);
        }
    }
}}
