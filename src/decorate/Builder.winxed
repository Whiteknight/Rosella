namespace Rosella { namespace Decorator
{
    class Builder : Rosella.Proxy.Builder
    {
        function setup_proxy_class(var target_class, var proxy_class)
        {
            using Rosella.Proxy.add_proxy_class_private_attr;
            using Rosella.Proxy.add_proxy_class_public_attr;

            // This should transparently pass through all other vtables.
            // TODO: Doing this creates all sorts of problems. Find a better
            //       way.
            proxy_class.add_parent(target_class);

            add_proxy_class_private_attr(proxy_class, "methods");
            add_proxy_class_private_attr(proxy_class, "attributes");
            add_proxy_class_private_attr(proxy_class, "target");

            using Rosella.Decorator.Builder.intercept_find_method;
            using Rosella.Decorator.Builder.intercept_get_attr_str;
            using Rosella.Decorator.Builder.intercept_set_attr_str;
            proxy_class.add_vtable_override("find_method", intercept_find_method);
            proxy_class.add_vtable_override("get_attr_str", intercept_get_attr_str);
            proxy_class.add_vtable_override("set_attr_str", intercept_set_attr_str);
        }

        function intercept_find_method[nsentry](string name)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var methods = get_proxy_private_attr(self, "methods");
            if (exists methods[name])
                return methods[name];
            var target = get_proxy_private_attr(self, "target");
            var method = find_method(target, name);
            return function(var p [slurpy], var n [slurpy,named]) {
                var me = null;
                ${ shift me, p };
                return target.*method(p:[flat], n:[flat,named]);
            };
        }

        function intercept_get_attr_str[nsentry](string name)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            if (name == "proxy")
                return get_proxy_private_attr(self, "target");
            var attrs = get_proxy_private_attr(self, "attributes");
            if (exists attrs[name])
                return attrs[name];
            var target = get_proxy_private_attr(self, "target");
            var value = null;
            ${ getattribute value, target, name };
            return value;
        }

        function intercept_set_attr_str[nsentry](string name, var value)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var attrs = get_proxy_private_attr(self, "attributes");
            if (exists attrs[name])
                attrs[name] = value;
            else {
                var target = get_proxy_private_attr(self, "target");
                ${ setattribute target, name, value };
            }
        }
    }
}}
