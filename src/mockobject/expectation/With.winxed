namespace Rosella { namespace MockObject { namespace Expectation
{
    /* Class to tell what arguments or values an action is expected to have.
    */
    class With
    {
        function match(var pos, var named)
        {
            Rosella.Error.must_subclass("Rosella.MockObject.Expectation.With");
        }
    }

    namespace With
    {
        class Args : Rosella.MockObject.Expectation.With
        {
            var pos_args;          // Positional arguments
            var named_args;        // Named arguments

            function Args(var pos, var named)
            {
                self.pos_args = pos;
                self.named_args = named;
            }

            function match(var pos, var named)
            {
                // Check that we have the correct number of args.
                if (int(pos) != int(self.pos_args))
                    return 0;
                if (int(named) != int(self.named_args))
                    return 0;

                // Check that we have the correct values
                for (int i = 0; i < int(pos); i++) {
                    if (pos[i] != self.pos_args[i])
                        return 0;
                }
                for (string name in named) {
                    if (!(exists self.named_args[name]))
                        return 0;
                    if (named[name] != self.named_args[name])
                        return 0;
                }
                return 1;
            }
        }

        class Any : Rosella.MockObject.Expectation.With
        {
            function Any() { }

            function match(var pos, var named)
            {
                return 1;
            }
        }

        class None : Rosella.MockObject.Expectation.With
        {
            function None() { }

            function match(var pos, var named)
            {
                if (int(pos) != 0 || int(named) != 0)
                    return 0;
                return 1;
            }
        }
    }
}}}
