namespace Rosella { namespace MockObject
{
    /* Mock Object Factory.
        Uses the Proxy factory to create and configure mock object
        controllers.
    */
    class Factory : Rosella.ObjectFactory
    {
        var proxy_factories;

        function BUILD()
        {
            self.proxy_factories = {};
        }

        // Get a new Mock and Controller. Return the Controller, from which
        // we can get the mock later
        function create_typed(var type_to_mock, var opts [slurpy,named])
        {
            using Rosella.build;
            var factory = self.get_controller_factory_internal(type_to_mock, opts);

            var controller = build(class Rosella.MockObject.Controller);
            controller.mock = factory.create(controller);
            return controller;
        }

        // Get a new proxy factory for the given type. For internal use only.
        function get_controller_factory_internal(var type_to_mock, var opts)
        {
            using Rosella.build;
            using Rosella.get_type_name;

            string type_name = get_type_name(type_to_mock);
            if (exists self.proxy_factories[type_name])
                return self.proxy_factories[type_name];

            var builders = self.get_builder_types();

            var factory = build(class Rosella.Proxy.Factory, type_to_mock, builders);
            self.proxy_factories[type_name] = factory;
            return factory;
        }

        function get_builder_types()
        {
            using Rosella.Proxy.Builder.get_builders;
            var builder_types = [
                "MethodIntercept",
                "AttributeIntercept",
                "InvokeIntercept"
            ];
            return get_builders(builder_types);
        }
    }
}}
