namespace Rosella { namespace Test
{
    namespace Testcase
    {
        function test(var testproto,
                var loaderproto [named,optional[, int has_lp [opt_flag],
                var opts [slurpy])
        {
            var loader;
            using Rosella.build;
            if (has_lp)
                loader = build(loaderproto);
            else
                loader = build(class Rosella.Test.Loader);

            var suite = loader.load_tests_from_testcase(testproto);
            using Rosella.get_type_name;
            suite.name("Test suite for " + get_type_name($testproto));
            suite.run();
        }
    }

    class Testcase
    {
        var todo;
        var verify;
        var name;

        function BUILD(string name)
        {
            self.name = name;
        }

        function __name() { return self.name; }

        function __num_tests() { return 1; }

        function __set_up() { }

        function __tear_down() { }

        # Provide an alternate text to display on output
        function verify(string verify [optional], int has_v [opt_flag])
        {
            if (has_v)
                self.verify = verify;
            return self.verify;
        }

        function todo(string todo [optional], int has_todo [opt_flag])
        {
            if (has_todo)
                self.todo = todo;
            return self.todo;
        }

        function unimplemented(string msg)
        {
            using Assert.fail;
            self.todo(msg);
            fail("Unimplemented: " + string(self.name));
        }
    }
}}
