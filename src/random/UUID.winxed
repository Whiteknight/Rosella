/* UUID Namespace
    This namespace provides some utilities for working with UUIDs
*/
namespace Rosella.Random.UUID
{
    // Get a new UUID using a default algorithm
    function new_uuid()
    {
        return new Rosella.Random.UUID.Version4();
    }

    // Get an empty (default) UUID

    function empty()
    {
        const string EMPTY_GUID = "Rosella.Random.UUID.empty";
        return Rosella.Globals.autoget_global(EMPTY_GUID,
            function() { return new Rosella.Random.UUID.Version4("00000000-0000-0000-0000-000000000000"); }
        );
    }

    // Determine if the given string is a valid UUID
    function is_uuid(string uuid)
    {
        if (length(uuid) != 36)
            return false;
        if (substr(uuid, 8, 1) != "-" ||
            substr(uuid, 13, 1) != "-" ||
            substr(uuid, 18, 1) != "-" ||
            substr(uuid, 23, 1) != "-")
            return false;
        string shorter = substr(uuid, 0, 8) + substr(uuid, 9, 4) + substr(uuid, 14, 4) + substr(uuid, 19, 4) + substr(uuid, 24);
        int is_ok = Rosella.String.is_all_cclass(shorter, "hexadecimal");
        return is_ok;
    }
}

/* UUID Base Class
    All UUID subclasses should inherit from this class. Do not use this class
    directly, use a subclass.
*/
class Rosella.Random.UUID
{
    var value;

    // Every UUID has a type name, since different algorithms create slightly
    // different results
    function type_name() { return "UNKNOWN UUID TYPE"; }

    // Determine if two UUIDs are equal. They are equal if they are the same
    // underlying type and if they have the same stringified value
    function is_equal[vtable](var b)
    {
        if (b == null)
            return false;
        if (!isa(b, class Rosella.Random.UUID))
            return false;
        if (self.type_name() != b.type_name())
            return false;
        return string(self.value) == string(b.value);
    }

    // Get a string representation of the UUID
    function get_string[vtable]()
    {
        return string(self.value);
    }
}
