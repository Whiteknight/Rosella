namespace Rosella { namespace Memoize
{
    /* Memoize Controller
        A proxy controller for memoizing proxies. Intercepts invoke vtables
        and checks the cache.
    */
    class Controller : Rosella.Proxy.Controller
    {
        // Intercept invoke vtable. Check the cache to see if we have the
        // value and return it if we do. Otherwise, fall back to invoke the
        // original function
        function invoke(var proxy, var p, var n)
        {
            using Rosella.Proxy.get_proxy_private_attr;
            var cache = get_proxy_private_attr(proxy, "memoize_cache");
            var func = get_proxy_private_attr(proxy, "target_object");

            if (cache == null) {
                using Rosella.Error.invalid;
                invalid(__FUNCTION__, "no cache in memoize proxy");
            }

            var cache_item = cache.get_item(p, n);
            if (cache_item.valid)
                return cache_item.value;
            var answer = func(p:[flat], n:[flat,named]);
            cache_item.update_value(answer);
            return answer;
        }
    }
}}
