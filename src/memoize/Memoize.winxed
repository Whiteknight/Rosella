
// Here's one idea for a memoizer which doesn't use Proxy as a base. We don't
// have as much flexibility here as we might with Proxy.
// TODO: Implement a new version using Proxy. Benchmark them to see if there
//       is an appreciable difference in runtime. If Proxy is slower, we might
//       want to offer both, with this version listed as "simple". If the
//       times are nearly the same, scrap this simplistic version and use
//       proxy only.
namespace Rosella { namespace Memoize
{
    function memoize(var func, var cache [optional], int has_cache [opt_flag])
    {
        if (!has_cache) {
            using Rosella.build;
            cache = build(class Rosella.Memoize.Cache.SimpleString);
        }
        var _cache = cache;
        var f = func;

        var memfunc = function(var p [slurpy], var n [named,slurpy]) {
            var cache_item = _cache.get_item(p, n);
            if (cache_item.valid)
                return cache_item.value;
            var value = f(p:[flat], n:[flat,named]);
            cache_item.update_value(value);
            return value;
        };
        // TODO: If we are going to be using getprop/setprop to attach
        //       metadata for the library, we should probably add helper
        //       methods somewhere.
        // TODO: Use this to attach a reference to the original function, so
        //       we can get it back later if we want.
        //${ setprop memfunc, "!!!Rosella.Memoize!!!orig_func", f };

        // TODO: Use this so we can keep a reference to the cache and clear or
        //       modify it.
        //${ setprop memfunc, "!!!Rosella.Memoize!!!cache", cache };
        return memfunc;
    }

    // TODO: Method to memorize a method in-place (open the Class, replace the
    //       method object). Ability to undo.

    // Y combinator with built-in memoization. Inspired by matt.might.net
    function Y(var f,
            var cache [optional,named], int has_cache [opt_flag])
    {
        if (!has_cache) {
            using Rosella.build;
            cache = build(class Rosella.Memoize.Cache.SimpleString);
        }
        var _cache = cache;
        var F = f;

        return function(var p [slurpy], var n [slurpy,named]) {
            var cache_item = _cache.get_item(p, n);
            if (cache_item.valid)
                return cache_item.value;
            var value = (F(function(var _p [slurpy], var _n [slurpy,named]) {
                return (Y(F, _cache))(_p:[flat], _n:[flat,named]);
            }))(p:[flat], n:[flat,named]);
            cache_item.update_value(value);
            return value;
        };
    }
}}
