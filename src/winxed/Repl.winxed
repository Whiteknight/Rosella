namespace Rosella { namespace Winxed
{
    class Repl
    {
        var compiler;
        var count;
        var commands;

        function BUILD()
        {
            self.compiler = load_language("winxed");
            self.count = 0;
            self.commands = {
                "quit" : function (var state) { state.stop(); },
                "help" : function (var state) { say("Just type some winxed code!"); },
                "codeon" : function (var state) { state.showcode = 1; },
                "codeoff" : function (var state) { state.showcode = 0; }
            };
        }

        function run()
        {
            using Rosella.build;
            var state = build(class Rosella.Winxed.ReplState);
            var stdin = getstdin();

            while (state.keep_running)
            {
                var input = stdin.readline_interactive("\nWinxed-Rosella> ");
                if (input == null)
                    break;
                if (!self.run_command(input, state)) {
                    var result = self.eval(input, state);
                    if (result != null)
                        self.print_message("Result", "'%s'", result);
                }
            }
        }

        function run_command(string input, var state)
        {
            if (exists self.commands[input]) {
                self.commands[input](state);
                return 1;
            }
            return 0;
        }

        function eval(string code, var state)
        {
            var func = self.compile(code, state);
            try {
                return func(state);
            } catch (e) {
                say("Error: " + string(e["message"]));
                return null;
            }
        }

        function compile(string code, var state)
        {
            self.count = self.count + 1;
            string func_c = sprintf("function __REPL_line_%d(var state) { var result = null; %s; return result; }", [self.count, code]);
            if (state.showcode)
                self.print_message("Code", "'%s'", func_c);
            return self.compiler.compile(func_c);
        }

        function print_message(string name, string fmt, var args [slurpy])
        {
            string fmt1 = sprintf("\t>>> %s = ", [name]);
            say(sprintf(fmt1 + fmt, args));
        }
    }
}}
