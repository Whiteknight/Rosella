namespace Rosella.Net.UserAgent.SimpleHttp
{
    function setup_post(var form_fields, var files)
    {
        return function(r) {
            if (form_fields != null && elements(form_fields) > 0) {
                for (string field_name in form_fields)
                    r.add_form_field(field_name, form_fields[field_name]);
            }

            if (files != null && elements(files) > 0) {
                for (string file_name in files)
                    r.add_form_field_filename(file_name, files[file_name]);
            }
        };
    }

    function setup_put(string content)
    {
        return function(r) {
            r.set_content(content);
        };
    }
}

/* Basic HTTP User Agent
    This UserAgent encapsulates logic for making HTTP requests. It exposes
    methods for making different types of requests. It returns Http.Response
    objects for each type of request.
*/
class Rosella.Net.UserAgent.SimpleHttp : Rosella.Net.UserAgent
{
    var use_ipv6;

    function SimpleHttp(int use_ipv6 = false)
    {
        // TODO: Find out if the platform supports IPv6 first, and set the
        // default accordingly.
        self.use_ipv6 = use_ipv6;
    }

    /* Standard UserAgent Interface
    */

    // This UserAgent supports http and file uris
    function supported_protocols()
    {
        return {
            "http": true,
            "file": true,
            "https": false  // TODO
        };
    }

    /* HTTP Request Methods
    */

    function request(string mode, string uri, var form_fields = null, var files = null, var headers [named, optional])
    {
        var cb = null;
        if (mode == "POST")
            cb = Rosella.Net.UserAgent.SimpleHttp.setup_post(form_fields, files);
        if (mode == "PUT")
            cb = Rosella.Net.UserAgent.SimpleHttp.setup_put(string(form_fields));
        return self.__dispatch_request(mode, uri, headers, cb);
    }

    // Perform an HTTP GET
    function get(string uri, var headers [named,optional])
    {
        return self.__dispatch_request("GET", uri, headers, null);
    }

    // Perform an HTTP POST
    function post(string uri, var form_fields, var files = null, var headers [named,optional])
    {
        return self.__dispatch_request("POST", uri, headers, Rosella.Net.UserAgent.SimpleHttp.setup_post(form_fields, files));
    }

    // Perform an HTTP PUT
    function put(string uri, string content, var headers [named,optional])
    {
        return self.__dispatch_request("PUT", uri, headers, Rosella.Net.UserAgent.SimpleHttp.setup_put(content));
    }

    // Perform an HTTP DELETE
    function delete(string uri, var headers [named,optional])
    {
        return self.__dispatch_request("DELETE", uri, headers, null);
    }

    // Perform an HTTP HEAD
    function head(string uri, var headers [named,optional])
    {
        return self.__dispatch_request("HEAD", uri, headers, null);
    }

    // Determine whether requests through this agent should use ipv6
    function use_ipv6()
    {
        return self.use_ipv6;
    }

    /* Private Helper Routines
    */


    // Dispatch the request.
    function __dispatch_request(string request_method, string uri_raw, var headers, var setup_request)
    {
        if (uri_raw == null || uri_raw == "")
            Rosella.Error.error("Invalid request. Uri is missing");
        var uri = Rosella.Net.Uri.get_uri(uri_raw);
        string uri_protocol = uri.protocol();
        if (!self.can_handle_protocol(uri_protocol))
            Rosella.Error.error("This UserAgent cannot support protocol '%s'", uri_protocol);
        var protocol = Rosella.Net.default_protocol_factory().create(uri);
        if (protocol == null)
            Rosella.Error.error("Could not dispatch protocol '%s'", uri_protocol);

        var request = new Rosella.Net.Http.Request();
        request.set_method(request_method);
        request.set_uri(uri);

        if (setup_request != null)
            setup_request(request);
        protocol.prepare_request(request, self);
        if (headers != null && elements(headers) > 0) {
            for (string header_name in headers)
                request.set_header(header_name, headers[header_name]);
        }

        return protocol.request(request, self);
    }
}
