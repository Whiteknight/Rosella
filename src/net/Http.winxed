/* HTTP Utilities Namespace
    This namespace contains utility helper functions for HTTP-related requests
*/
namespace Rosella.Net.Http
{
    // Encode form data for an HTTP request. Spaces become '+', and all other
    // non-alphanumerics are percent-encoded
    function formdata_encode(string s)
    {
        int s_enc = get_string_encoding(s);
        int utf8_enc = get_encoding_id("utf8");
        if (s_enc != get_encoding_id("ascii") && s_enc != utf8_enc)
            s = reencode_string(s, utf8_enc);

        var buf = new 'ByteBuffer';
        var result = new 'ByteBuffer';
        buf =: s;
        for (int code in buf) {
            if (code == ASCII_SPACE) {
                push(result, ASCII_PLUS);
                continue;
            }
            if (is_ascii_alphanumeric(code))
                push(result, code);
            else {
                push(result, ASCII_PERCENT);
                push(result, get_codepoint(HEXDIGITS, int(code/16)));
                push(result, get_codepoint(HEXDIGITS, int(code%16)));
            }
        }
        s = result.get_string("ascii");
        return s;
    }

    // Format an HTTP request header, given an HTTP.Header object
    function format_request_header(string request_method, string fullpath, var request_header)
    {
        var sb = new 'StringBuilder';
        push(sb, request_method);
        push(sb, " ");
        push(sb, fullpath);
        push(sb, " HTTP/1.1");
        push(sb, CRLF);
        push(sb, request_header.get_header_text());
        push(sb, CRLF);
        return sb;
    }

    // Get the target host information, taking into account the existence of a
    // proxy
    function get_host_information(var request, var proxy, var user_agent)
    {
        string request_method = request.get_method();
        var uri = request.get_uri();
        string host, port, fullpath;
        if (proxy != null) {
            host = proxy.host();
            port = proxy.port();
            fullpath = string(uri.host()) + ":" + string(uri.port());
        } else {
            host = uri.host();
            port = uri.port();
            fullpath = uri.path_query();
            if (index_of_substr(fullpath, "/") != 0)
                fullpath = "/" + fullpath;
        }
        int port_num = (port == null || port == "") ? 80 : int(port);
        return host, port_num, fullpath;
    }
}
