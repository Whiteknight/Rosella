/* HTTP Protocol
    This class implements the basics of the HTTP protocol. It handles making
    requests to a remote server and reading back the response if any.
*/
class Rosella.Net.Protocol.Http : Rosella.Net.Protocol
{
    // Constructor
    function Http() { }

    /* Public Interface Methods
    */

    // This is the "http" protocol
    function protocol_name() { return "http"; }

    // Prepare the request headers. Add in authorization, proxy-authorization,
    // connection and other standard headers that belong in all requests
    function prepare_request(var request, var user_agent)
    {
        var header = request.header();
        var uri = request.get_uri();
        var proxy = request.get_proxy();

        string host = uri.authority();
        string userinfo;
        int amp_idx = index_of_substr(host, "@");
        if (amp_idx >= 0) {
            userinfo = substr(host, 0, amp_idx);
            amp_idx++;
            host = substr(host, amp_idx);
            string auth = header.get_value("Authorization");
            if (auth != "") {
                string mimed = Rosella.Net.MimeBase64.encode(auth);
                header.add_value("Authorization", "Basic " + mimed);
            }
        }
        header.add_value("Host", host);
        if (proxy != null) {
            string userinfo = proxy.userinfo();
            if (userinfo != "") {
                string mimed = Rosella.Net.MimeBase64.encode(userinfo);
                header.add_value("Proxy-Authorization", "Basic " + mimed);
            }
        }
        if (!header.contains_value("Connection"))
            header.add_value("Connection", "Keep-Alive");
        if (!header.contains_value("User-Agent")) {
            string ua_string = user_agent.get_version_string();
            if (ua_string != null && ua_string != "")
                header.add_value("User-Agent", ua_string);
        }
    }

    // Execute the request object. Return a response.
    function request(var request, var user_agent)
    {
        :(string host, int port, string fullpath) = Rosella.Net.Http.get_host_information(request, request.get_proxy(), user_agent);
        var socket = self.__get_socket(host, port, user_agent);

        if (!self.__send_request(socket, request, fullpath, user_agent))
            return Rosella.Net.Http.Response.__error_network_failure(request);
        user_agent.request_sent();

        :(int ok, var response) = self.__receive_status_line(socket);
        if (ok != 1)
            return response;
        user_agent.request_progress(PERCENT_REQUEST_SENT);

        var header_lines = self.__receive_header(socket);
        response.header().set_header_lines(header_lines);
        user_agent.request_progress(PERCENT_HEADERS_RECEIVED);

        if (!self.__receive_response_content(socket, response, user_agent))
            return Rosella.Net.Http.Response.__error_receive_failure(request, response);
        user_agent.request_complete();

        socket.close();
        return response;
    }

    /* Private Helper Routines
    */

    // Get a socket
    function __get_socket(string host, int port, var user_agent)
    {
        // TODO: Once we have an SSL socket factory, take an option whether to
        // use SSL or not
        int use_ipv6 = user_agent.use_ipv6();
        var socket_factory = use_ipv6 ? Rosella.Net.tcp_socket_factory_ipv6() : Rosella.Net.tcp_socket_factory_ipv4();
        return socket_factory.create(host, port);
    }

    // Receive the HTTP response/status link
    function __receive_status_line(var socket)
    {
        string status_line = socket.readline();
        status_line = Rosella.String.trim_end(status_line);
        int idx = index_of_substr(status_line, " ");

        if (idx < 0)
            return false, new Rosella.Net.Http.Response(0, status_line);

        string protocol = substr(status_line, 0, idx);
        int next_idx = idx + 1;
        idx = index_of_substr_from(status_line, " ", next_idx);
        if (idx < 0)
            return false, new Rosella.Net.Http.Response(0, status_line, protocol);

        int diff = idx - next_idx;
        string code = substr(status_line, next_idx, diff);
        return true, new Rosella.Net.Http.Response(int(code), status_line, protocol);
    }

    // Receive the response header. Return it as an array of lines
    function __receive_header(var socket)
    {
        string header_lines[] = [];
        while (true) {
            string raw = socket.readline();
            raw = Rosella.String.trim_end(raw);
            if (raw == null || raw == "")
                break;
            push(header_lines, raw);
        }
        return header_lines;
    }

    // Transmit the request
    function __send_request(var socket, var request, string fullpath, var user_agent)
    {
        string content = request.get_content();
        string header_raw = Rosella.Net.Http.format_request_header(request.get_method(), fullpath, request.header());
        if (socket.puts(header_raw) < 0)
            return false;
        if (content != null && content != "") {
            if (socket.puts(content) < 0)
                return false;
        }
        return true;
    }

    // Receive a normal response
    function __receive_response_content_normal(var socket, var response, var buf, var user_agent)
    {
        int content_length = response.get_content_length_header();
        int recv_length = 0;
        if (content_length == 0) {
            while(true) {
                string raw = socket.recv();
                if (raw == null || raw == "")
                    break;
                recv_length += length(raw);
                user_agent.request_progress(__status_percent(content_length, recv_length));
                push(buf, raw);
            }
        } else {
            while (recv_length < content_length) {
                string raw = socket.recv();
                if (raw == "")
                    break;
                recv_length += length(raw);
                user_agent.request_progress(__status_percent(content_length, recv_length));
                push(buf, raw);
            }
        }
    }

    // Receive a chunked response
    function __receive_response_content_chunked(var socket, var response, var buf, var user_agent)
    {
        int hex_class = Rosella.String.get_character_class("hexadecimal");
        while(true) {
            string line = socket.readline();
            int line_length = length(line);
            int substr_idx = Rosella.String.first_not_cclass(line, hex_class);
            line = substr(line, 0, substr_idx);
            int chunk_length = Rosella.String.to_integer(line, 16);
            if (chunk_length == 0)
                break;
            string raw = socket.read(chunk_length);
            push(buf, raw);
            socket.readline();
            user_agent.request_progress_tick();
        }
        var header_lines = self.__receive_header(socket);
        response.header().set_header_lines(header_lines);
    }

    // Receive response content.
    function __receive_response_content(var socket, var response, var user_agent)
    {
        var buf = new 'StringBuilder';
        string transfer_encoding = response.get_header("Transfer-Encoding");
        if (contains_substr(transfer_encoding, "chunked"))
            self.__receive_response_content_chunked(socket, response, buf, user_agent);
        else
            self.__receive_response_content_normal(socket, response, buf, user_agent);
        response.set_content(string(buf));
        return true;
    }
}
