/* User Agent
    The UserAgent encapsulates behavior for interacting with a remote resource.
    Each UserAgent contains behavior specific to its type of prototype and
    offers a user-friendly interface over some of the more complicated protocol
    behaviors.

    This is the abstract parent type of UserAgents. Use a subclass instead.
*/
class Rosella.Net.UserAgent
{
    var dbghandle;

    // Constructor
    function UserAgent() { }

    /* Public Interface
        All UserAgent types must implement these interface methods. Each
        UserAgent may supply additional methods, but this is the only guaranteed
        common set.
    */

    // Get the version string to send along with a request
    function get_version_string()
    {
        var cv = Rosella.Version.get_version("core");
        var nv = Rosella.Version.get_version("net");
        string ua = Rosella.String.sprintf("parrot-rosella/%s.0 net/%s.0 (%s)", cv.library_version(), nv.library_version(), nv.library_state());
        return ua;
    }

    // The request has been successfully dispatched. This may not be called if
    // errors on the sending client prevent the message from being sent (a
    // Response will still be returned with error information)
    function request_sent() { }

    // The request is in progress. Takes a percentage where 0.0 is the request
    // not yet started and 1.0 is the request completed
    function request_progress(float percent) { }

    // The request is executing. Progress has been made, but exactly how much
    // can not be determined.
    function request_progress_tick() { }

    // The request is complete
    function request_complete() { }

    // A hash of protocols supported. If null, nothing is supported
    function supported_protocols() { return null; }

    // Returns true if this UserAgent can work with the given protocol
    function can_handle_protocol(string protocol)
    {
        var supported_protocols = self.supported_protocols();
        if (supported_protocols == null || elements(supported_protocols) == 0)
            return false;
        if (exists supported_protocols[protocol])
            return int(supported_protocols[protocol]);
        return false;
    }

    /* Debugging Interface
    */

    function set_dbg_handle(var handle)
    {
        self.dbghandle = handle;
    }

    function display_output(string text)
    {
        if (self.dbghandle == null)
            return;
        var lines = split("\n", text);
        for (string line in lines)
            self.dbghandle.print("> " + line + "\n");
    }

    function display_input(string text)
    {
        if (self.dbghandle == null)
            return;

        var lines = split("\n", text);
        int lines_max = elements(lines);
        if (lines_max > 1 && length(lines[lines_max - 1]) == 0)
            lines.pop();
        for (string line in lines)
            self.dbghandle.print("< " + line + "\n");
    }
}
