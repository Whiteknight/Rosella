/* Test Status class
    TestStatus keeps track of the status of the currently executing test
    and can be used to set status information while the test is running.
*/
class Rosella.Test.TestStatus
{
    var current_test;   // The current test object
    var test_name;      // The name of the current test
    var test_todo;      // A to-do message
    var suite;          // The Suite object
    var cleanups;       // An array of cleanup routines to run after the test

    // Constructor
    function TestStatus(string test_name, var test, var suite)
    {
        self.current_test = test;
        self.test_name = test_name;
        self.test_todo = null;
        self.cleanups = [];
        self.suite = suite;
    }

    // Get the displayable name of the test. Should not be null.
    function display_name()
    {
        return self.test_name;
    }

    // Displayable text showing a todo note. Should be null if the test
    // is not todo'd
    function test_todo()
    {
        return self.test_todo;
    }

    // Add a cleanup routine to be called after the function executes
    // regardless of outcome
    function add_cleanup_routine(var cleanup_func)
    {
        push(self.cleanups, cleanup_func);
    }

    // Execute any cleanup routines
    function cleanup()
    {
        for (var cleanup in self.cleanups)
            cleanup();
        self.cleanups = [];
    }

    // Get the currently executing TestCase object
    function current_test()
    {
        return self.current_test;
    }

    // Get the currently executing Suite object
    function suite()
    {
        return self.suite;
    }

    // Mark the currently-executing test as TODOd
    function todo(string msg)
    {
        self.test_todo = msg;
    }

    // Change the displayed name of the test
    function verify(string msg)
    {
        self.test_name = msg;
    }

    // Mark the test as being incomplete or unimplemented
    function unimplemented(string msg)
    {
        self.test_todo = msg;
        Rosella.Test.internal_fail("Unimplemented: " + msg, 1, null);
    }
}

