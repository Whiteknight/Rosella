namespace Assert
{
    function default_message(string msg, int has_msg, string def)
    {
        if (has_msg)
            return msg;
        return def;
    }

    function fail(string why [optional], int has_why [opt_flag])
    {
        why = default_message(why, has_why, "Unknown failure");
        using Rosella.build;
        var ex = build(class Rosella.Test.Failure);
        ex.message(why);
        ex.throw();
    }

    function block(string message, var block)
    {
        if (!block())
            fail(message);
    }

    function block_false(string message, var block)
    {
        if (block())
            fail(message);
    }

    function can(var obj, string method,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "item failed 'can'");
        int i_can = 0;
        ${ can i_can, obj, method };
        if (!i_can)
            fail(message);
    }

    function can_not(var obj, string method,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "item failed 'can_not'");
        int i_can = 0;
        ${ can i_can, obj, method };
        if (i_can)
            fail(message);
    }

    function defined(var obj,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "item not defined");
        int is_defined = 0;
        ${ defined is_defined, obj };
        if (!is_defined)
            fail(message);
    }

    function not_defined(var obj,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "item is defined");
        int is_defined = 0;
        ${ defined is_defined, obj };
        if (is_defined)
            fail(message);
    }

    function does(var obj, var role,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "item failed 'does'");
        int obj_does = 0;
        ${ does obj_does, obj, role };
        if (!obj_does)
            fail(message);
    }

    function does_not(obj, role, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "item failed 'does'");
        int obj_does = 0;
        ${ does obj_does, obj, role };
        if (obj_does)
            fail(message);
    }

    function equal(var o1, var o2,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "objects not equal");
        int equal = 0;
        ${ iseq equal, o1, o2 };
        if (!equal)
            fail(message);
    }

    function not_equal(var o1, var o2,
            string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "objects equal");
        int equal = 0;
        ${ iseq equal, o1, o2 };
        if (equal)
            fail(message);
    }

    function instance_of(var obj, var type, string message [optional], int has_msg [opt_flag]) {
        message = default_message(message, has_msg, "object is not instance_of");
        using Rosella.get_type_class;
        var class_obj = get_type_class(type);
        int it_isa = 0;
        ${ isa it_isa, obj, class_obj };
        if (!it_isa)
            fail(message);
    }

    //function not_instance_of($obj, $class, string message [optional], int has_msg [opt_flag] = "object is instance of") {
    //    fail($message) if pir::class__PP($obj) == P6metaclass.get_parrotclass($class);
    //}

    //function isa($obj, $class, string message [optional], int has_msg [opt_flag] = "object not isa") {
    //    fail($message) unless pir::isa__iPP($obj, P6metaclass.get_parrotclass($class));
    //}

    //function not_isa($obj, $class, string message [optional], int has_msg [opt_flag] = "object isa") {
    //    fail($message) if pir::isa__iPP($obj, P6metaclass.get_parrotclass($class));
    //}

    // TODO: Port matcher library
    //function match($obj, $matcher, string message [optional], int has_msg [opt_flag] = "match failed") {
    //    unless $matcher.matches($obj) {
    //        my $explain = $matcher.describe_self("\nExpected ")
    //            ~ $matcher.describe_failure("\nbut ", $obj);
    //        fail($message ~ $explain);
    //    }
    //}

    //function not_match($obj, $matcher, string message [optional], int has_msg [opt_flag]) {
    //    if $matcher.matches($obj) {
    //        fail($message);
    //    }
    //}

    function is_null(var obj, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "object is not null");
        if (obj != null)
            fail(message);
    }

    function not_null(var obj, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "object is null");
        if (obj == null)
            fail(message);
    }

    function same(var o1, var o2, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "objects not same");
        if (o1 !== o2)
            fail(message);
    }

    function not_same(var o1, var o2, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "objects are same");
        if (o1 === o2)
            fail(message);
    }

    function throws(var block, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "does not throw");
        try {
            block();
            fail(message);
        } catch() {}
    }

    function throws_nothing(var block, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "block throws");
        try {
            block();
        } catch() {
            fail(message);
        }
    }

    function is_true(int bool, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "is not true");
        if (!bool)
            fail(message);
    }

    function is_false(int bool, string message [optional], int has_msg [opt_flag])
    {
        message = default_message(message, has_msg, "is not false");
        if (bool)
            fail(message);
    }

    //function within_delta($o1, $o2, $delta, string message [optional], int has_msg [opt_flag] "difference not within delta") {
    //    my $difference = $o1 - $o2;
    //    $difference = - $difference if $difference < 0;
    //    fail($message) unless $difference < $delta;
    //}

    //#~ like(obj, regex, message)
    //#~ not_like

    //#function want_fail($message, &block) {
    //#    throws(Exception::RosellaFailure, $message, &block);
    //#}

    //#function want_pass($message, &block) {
    //#    throws_nothing($message, &block);
    //#}
}
