/* TAP output builder.
    This class is a low-level TAP outputter. It can be used similarly to the
    Test::More library from the Parrot distribution. This class is used by the
    Test library to implement TAP output for unit tests, and is not used by
    itself very often. As such, it may be missing features that other TAP
    producer libraries offer.
*/
class Rosella.Test.Builder
{
    var test_number;    // The number of the current test, starting at 1
    var output;         // The output Handle
    var nest_level;     // The level of TAP nesting

    // Constructor
    function Builder(int nest_level, var output = null)
    {
        if (output == null)
            output = getstdout();
        self.test_number = 0;
        self.nest_level = nest_level;
        self.output = output;
    }

    // Helper printf function
    function _printf(string fmt, var args [slurpy])
    {
        int nest_level = int(self.nest_level);
        string prefix = repeat("    ", nest_level);
        self.output.print(prefix + sprintf(fmt, args));
    }

    // Reset the count
    function reset()
    {
        self.test_number = 0;
    }

    // Display a todo result. pass=1 means an unexpected pass. pass=0 is
    // an expected failure
    function todo(int pass, string msg, string todo = "")
    {
        self.test_number = self.test_number + 1;
        string output = self._get_result_text(self.test_number, pass, msg);
        self._printf("%s # TODO %s\n", output, todo);
    }

    // Display a normal result. pass=1 is an expected test pass. pass=0
    // is an unexpected failure
    function ok(int pass, string msg = null)
    {
        self.test_number = self.test_number + 1;
        string result_text = self._get_result_text(self.test_number, pass, msg);
        self._printf("%s\n", result_text);
    }

    // helper function to get the display text for the result
    function _get_result_text(int number, int pass, string msg)
    {
        string result = null;
        if (pass)
            result = "ok " + number;
        else
            result = "not ok " + number;
        if (msg != null)
            return result + " - " + msg;
        else
            return result;
    }

    // display diagnostics information as comments
    function diag(var error)
    {
        if (error instanceof "Exception") {
            var errmsg = error.message;
            var lines = split("\n", errmsg);
            for (string line in lines)
                self._printf("# %s\n", line);

            var bt_list = Rosella.Parrot.get_backtrace_ex_strings(error);
            var display_bt;
            if (__DEBUG__ || Rosella.Test.debug())
                display_bt = bt_list;
            else {
                display_bt = [];
                int i = 0;
                for (; i < elements(bt_list); i++) {
                    if (!contains(bt_list[i], "rosella/test.winxed"))
                        break;
                }
                int j = 0;
                display_bt[j++] = bt_list[i - 1];
                for (; i < elements(bt_list); i++) {
                    if (contains(bt_list[i], "execute_test") && contains(bt_list[i], "rosella/test.winxed"))
                        break;
                    display_bt[j++] = bt_list[i];
                }
            }
            for (string bt in display_bt)
                self._printf("# %s\n", bt);
        } else
            self._printf("# %s\n", string(error));
    }

    // print out a plan
    function plan(int count)
    {
        self._printf("1..%d\n", count);
    }
}
