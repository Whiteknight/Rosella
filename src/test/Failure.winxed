namespace Rosella.Test.Failure
{
    // Extract a Failure object from an Exception, if available. If the
    // exception is not a Failure, return null
    function get_exception_failure(var ex)
    {
        var payload = ex.payload;
        if (payload == null)
            return null;
        if (Rosella.isa_type(class Rosella.Test.Failure, payload))
            return payload;
        return null;
    }
}

/* Test Failure Exception
    Wrapper type for Parrot's Exception object which holds some metadata about
    test failures and other errors
*/
class Rosella.Test.Failure
{
    var exception;      // The Parrot Exception object
    var inner_ex;       // The inner exception
    var is_internal;    // Whether this exception is an internal error message or a user-visible failure

    // Build the exception object. If the exception is_internal, we won't
    // show a backtrace.
    function Failure(string msg, var inner_ex, int is_internal)
    {
        self.is_internal = is_internal;
        self.exception = new 'Exception';
        self.exception.message = msg;
        self.exception.payload = self;
        self.inner_ex = inner_ex;
    }

    // Throw the failure exception
    function throw()
    {
        throw self.exception;
    }
}
