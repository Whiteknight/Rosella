namespace Rosella
{
    /* The Rosella Test Library
        This library is used to implement unit tests, although not a test
        harness. By default, the test library produces TAP output, although
        that and much other behavior can be overridden by subclassing
    */
    namespace Test
    {
        /* Test options:
            suite_type: The type of Suite object to use.
            testcase_type: The type of TestCase object to use.
            context: The TestContext object instance to use. Stored in $!context
            test_prefix: A prefix string that all test methods must have.
            asserter: The assertion object. Stored in $!assert
        */
        // Setup and run a test using Testcase-based tests. This is basically
        // a thin facade over SuiteFactory and Suite with some defaults thrown
        // in. Returns 1 if the test was a success, 0 otherwise.
        function test(var test_type, var options [slurpy,named])
        {
            __default_options(options);
            var suitefactory = new Rosella.Test.SuiteFactory(test_type, options);
            var suite = suitefactory.create();
            var result = suite.run();
            return result.was_successful();
        }

        function test_vector(var func, var tests, var options [slurpy,named])
        {
            __default_options(options);
            var suitefactory = new Rosella.Test.SuiteFactory.Vector(func, tests, options);
            var suite = suitefactory.create();
            var result = suite.run();
            return result.was_successful();
        }

        function __default_options(var options)
        {
            if (!(exists options["suite_type"]))
                options["suite_type"] = class Rosella.Test.Suite;
            if (!(exists options["testcase_type"]))
                options["testcase_type"] = class Rosella.Test.TestCase;
            if (!(exists options["context"]))
                options["context"] = new Rosella.Test.TestContext();
            if (!(exists options["test_prefix"]))
                options["test_prefix"] = "";
            if (!(exists options["asserter"]))
                options["asserter"] = new Rosella.Test.Asserter;
        }

        // Unconditional fail. Throws a Rosella.Test.Failure
        // This is for internal use only. You probably want Asserter.fail
        // instead.
        function internal_fail(string why, int is_internal, var exception)
        {
            var ex = new Rosella.Test.Failure(why, exception, is_internal);
            ex.throw();
        }
    }
}
