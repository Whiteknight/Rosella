/* The Rosella Test Library
    This library is used to implement the logic of unit tests. It is not
    used to implement a test harness. Use the Rosella Harness for making a
    harness. By default, the test library produces TAP output, although
    that and much other behavior can be overridden by subclassing.

    The routines in this namespace are convenience facade routines for
    interacting with the Test library. This is not the only way to use the
    library, just the most convenient.
*/
namespace Rosella.Test
{
    /* Public API functions
    */

    /* Test options:
        suite_type: The type of Suite object to use.
        testcase_type: The type of TestCase object to use.
        context: The TestContext object instance to use. Stored in $!context
        test_prefix: A prefix string that all test methods must have.
        asserter: The assertion object. Stored in $!assert
    */

    // Setup and run a test using Testcase-based tests. This is basically
    // a thin facade over SuiteFactory and Suite with some defaults thrown
    // in. Returns 1 if the test was a success, 0 otherwise.
    function test(var test_type, var options [slurpy,named])
    {
        __default_options(options);
        __initialize_test(options);

        var suitefactory = new Rosella.Test.SuiteFactory(options["suite_type"]);
        var test_factory = new Rosella.Test.TestFactory(options["testcase_type"]);

        var class_obj = Rosella.get_type_class(test_type);
        var test_methods = internal_get_test_methods(class_obj, options["test_prefix"]);

        var suite = suitefactory.create(test_factory, test_methods);
        var result = suite.run(options["result"], options["context"], options["asserter"]);
        return result.was_successful();
    }

    function build_suite(var test_type)
    {
        var suitefactory = new Rosella.Test.SuiteFactory();
        var test_factory = new Rosella.Test.TestFactory();

        var class_obj = Rosella.get_type_class(test_type);
        var test_methods = internal_get_test_methods(class_obj, "");

        return suitefactory.create(test_factory, test_methods);
    }

    // Setup and run a single test function over a sequence of data
    // objects.
    function test_vector(var func, var tests, var options [slurpy,named])
    {
        __default_options(options);
        __initialize_test(options);

        var suitefactory = new Rosella.Test.SuiteFactory.Vector(options["suite_type"]);
        var test_factory = new Rosella.Test.TestFactory(options["testcase_type"]);

        var suite = suitefactory.create(test_factory, tests, func);
        var result = suite.run(options["result"], options["context"], options["asserter"]);
        return result.was_successful();
    }

    function build_suite_vector(var func, var tests)
    {
        var suitefactory = new Rosella.Test.SuiteFactory.Vector();
        var test_factory = new Rosella.Test.TestFactory();

        return suitefactory.create(test_factory, tests, func);
    }

    // Tests in the form of a list. The first argument is a list of callback
    // functions to execute as individual tests
    function test_list(var list, var options [slurpy,named])
    {
        __default_options(options);
        __initialize_test(options);

        var suitefactory = new Rosella.Test.SuiteFactory.List(options["suite_type"]);
        var test_factory = new Rosella.Test.TestFactory(options["testcase_type"]);

        var suite = suitefactory.create(test_factory, list);
        var result = suite.run(options["result"], options["context"], options["asserter"]);
        return result.was_successful();
    }

    function build_suite_list(var list)
    {
        var suitefactory = new Rosella.Test.SuiteFactory.Vector();
        var test_factory = new Rosella.Test.TestFactory();

        return suitefactory.create(test_factory, list);
    }

    function test_suites(var suites, var options[slurpy,named])
    {
        test_vector(
            function(var test, var suite) {
                var parent_suite = test.status.suite();
                var result = parent_suite.result.get_sub_result();
                result = suite.run(result, parent_suite.context, parent_suite.asserter);
                if (!result.was_successful()) {
                    string msg = sprintf("Failed %d of %d subtests", [result.num_failures, result.total_tests]);
                    parent_suite.asserter.fail(msg, 1, null);
                }
            },
            suites,
            options:[flat,named]
        );
    }

    // Get the matcher factory
    const string DEFAULT_MATCHER_FACTORY = "Rosella.Test.matcher_factory";
    function matcher_factory()
    {
        var temp = Rosella.Globals.get_global(DEFAULT_MATCHER_FACTORY);
        if (temp == null) {
            temp = new Rosella.Test.Matcher.Factory();
            Rosella.Globals.register_global(DEFAULT_MATCHER_FACTORY, temp);
        }
        return temp;
    }

    // Get a default test builder
    const string DEFAULT_TEST_BUILDER = "Rosella.Test.default_test_builder";
    function default_test_builder()
    {
        var temp = Rosella.Globals.get_global(DEFAULT_TEST_BUILDER);
        if (temp == null) {
            temp = new Rosella.Test.Builder(0);
            Rosella.Globals.register_global(DEFAULT_TEST_BUILDER);
        }
        return temp;
    }

    // Add a new matcher to the registry by name
    function add_matcher(string name, var matcher)
    {
        Rosella.Test.matcher_factory().add_matcher(name, matcher);
    }

    // Remove a matcher to the registry by name
    function remove_matcher(string name)
    {
        Rosella.Test.matcher_factory().remove_matcher(name);
    }

    const string TEST_DEBUG_MODE = "Rosella.Test.debug";
    function debug(int isdebug [optional], int has_debug [opt_flag])
    {
        var temp;
        if (has_debug) {
            temp = isdebug;
            Rosella.Globals.register_global(TEST_DEBUG_MODE, temp);
        } else {
            temp = Rosella.Globals.get_global(TEST_DEBUG_MODE);
            if (temp == null) {
                temp = false;
                Rosella.Globals.register_global(TEST_DEBUG_MODE, temp);
            }
        }
        return temp;
    }

    /* Private or Internal Routines
    */

    // Execute an initialization callback
    function __initialize_test(var options)
    {
        if (exists options["initialize"] && options["initialize"] != null)
            options["initialize"](options["context"]);
    }

    // Make sure that we have some values for the important option keys.
    // If the user has provided an override for any of these, ignore.
    function __default_options(var options)
    {
        if (!(exists options["suite_type"]))
            options["suite_type"] = class Rosella.Test.Suite;
        if (!(exists options["testcase_type"]))
            options["testcase_type"] = class Rosella.Test.TestCase;
        if (!(exists options["context"]))
            options["context"] = new Rosella.Test.TestContext();
        if (!(exists options["test_prefix"]))
            options["test_prefix"] = "";
        if (!(exists options["asserter"]))
            options["asserter"] = new Rosella.Test.Asserter;
        if (!(exists options["result"]))
            options["result"] = new Rosella.Test.Result([
                new Rosella.Test.Listener.TAP()
            ]);
    }

    // Unconditional fail. Throws a Rosella.Test.Failure
    // This is for internal use only. You probably want Asserter.fail
    // instead.
    function internal_fail(string why, int is_internal, var exception)
    {
        var ex = new Rosella.Test.Failure(why, exception, is_internal);
        ex.throw();
    }

    // Get a list of all test methods, searching up the MRO for any
    // methods which match the prefix.
    function internal_get_test_methods(var class_obj, string test_prefix)
    {
        //var class_obj = Rosella.get_type_class(self.test_type);
        var seen_methods = {};
        var mro = class_obj.inspect("all_parents");
        var test_methods = {};
        for (var parent in mro) {
            if (string(parent) == "P6object")
                continue;
            var methods = parent.inspect("methods");
            for (var method in methods) {
                if (__is_test_method(method, test_prefix) && !(exists seen_methods[method])) {
                    seen_methods[method] = 1;
                    test_methods[method] = methods[method];
                }
            }
        }
        return test_methods;
    }

    // Determine if this is a test method or not. There are a handful of
    // utility methods in Testcase, and others which the user can add too.
    function __is_test_method(string name, string prefix)
    {
        int prefix_length = length(prefix);
        if (length(name) > prefix_length && substr(name, 0, prefix_length) == prefix)
            return true;
        return false;
    }
}
