/* Function List SuiteFactory
    This suite factory takes a list of test functions and constructs a suite
    from them.
*/
class Rosella.Test.SuiteFactory.List : Rosella.Test.SuiteFactory
{
    /* Public Methods
    */

    // Constructor
    function List(var suite_type [optional], int has_type [opt_flag])
    {
        if (has_type)
            self.SuiteFactory(suite_type);
        else self.SuiteFactory();
    }

    // Get a hash of test methods, one for each item in the data aggregate
    function get_test_methods(var test_factory, var test_list)
    {
        if (does(test_list, "array"))
            return self.__get_test_methods_from_array(test_factory, test_list);
        if (does(test_list, "hash"))
            return self.__get_test_methods_from_hash(test_factory, test_list);
        return self.__get_test_method_from_scalar(test_factory, test_list);
    }

    /* Private Helper Methods
    */

    // Create a closure over the function and the particular datum
    function __make_test_method(string n, var f)
    {
        var func = f;
        string name = n;
        return function(var obj) {
            obj.status.verify(name);
            func(obj);
        };
    }

    // The data is an array. Get test methods from that.
    function __get_test_methods_from_array(var test_factory, var test_list)
    {
        var test_methods = {};
        for (int i = 0; i < elements(test_list); i++) {
            string name = "test " + string(i + 1);
            var test_method = self.__make_test_method(name, test_list[i]);
            test_methods[name] = test_factory.create(test_method);
        }
        return test_methods;
    }

    // The data is a hash
    function __get_test_methods_from_hash(var test_factory, var test_list)
    {
        var test_methods = {};
        for (string key in test_list) {
            var test_method = self.__make_test_method(key, test_list[key]);
            test_methods[key] = test_factory.create(test_method);
        }
        return test_methods;
    }

    // The data is not an array or a hash, treat it as a single value
    function __get_test_methods_from_scalar(var test_factory, var test_list)
    {
        var test_method = self.__make_test_method("test", self.funcs);
        return {
            "test" : test_factory.create(test_method)
        };
    }
}
