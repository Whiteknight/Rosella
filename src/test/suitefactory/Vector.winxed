/* Vectorized SuiteFactory
    This class is a SuiteFactory which creates a suite for a vectorized
    test file. Vectorized tests are a test where a single function is
    executed on each item in an array or hash of data. This SuiteFactory
    creates a test method for each item in the data array.
*/
class Rosella.Test.SuiteFactory.Vector : Rosella.Test.SuiteFactory
{
    /* Public Methods
    */

    // Constructor
    function Vector(var suite_type)
    {
        self.SuiteFactory(suite_type);
    }

    // Get a hash of test methods, one for each item in the data aggregate
    function get_test_methods(var test_factory, var tests, var func)
    {
        int is_role = 0;
        if (does(tests, "array"))
            return self.__get_test_methods_from_array(test_factory, tests, func);
        if (does(tests, "hash"))
            return self.__get_test_methods_from_hash(test_factory, tests, func);
        return self.__get_test_method_from_scalar(test_factory, tests, func);
    }

    /* Private Helper Methods
    */

    // Create a closure over the function and the particular datum
    function __make_test_method(var n, var f, var d)
    {
        var func = f;
        var data = d;
        var name = n;
        return function(var obj) {
            obj.status.verify(name);
            func(obj, data);
        };
    }

    // The data is an array. Get test methods from that.
    function __get_test_methods_from_array(var test_factory, var tests, var func)
    {
        var test_methods = {};
        for (int i = 0; i < elements(tests); i++) {
            string name = "test " + string(i + 1);
            var test_method = self.__make_test_method(name, func, tests[i]);
            test_methods[name] = test_factory.create(test_method);
        }
        return test_methods;
    }

    // The data is a hash
    function __get_test_methods_from_hash(var test_factory, var tests, var func)
    {
        var test_methods = {};
        for (string key in tests) {
            var test_method = self.__make_test_method(key, func, tests[key]);
            test_methods[key] = test_factory.create(test_method);
        }
        return test_methods;
    }

    // The data is not an array or a hash, treat it as a single value
    function __get_test_methods_from_scalar(var test_factory, var test, var func)
    {
        var test_method = self.__make_test_method("test", func, test);
        return {
            "test" : test_factory.create(test_method)
        };
    }
}
