namespace Rosella { namespace Test
{
    /* TestContext object
        The TestContext is a data object which is persistant across all test
        methods in the test class. It can be used to store data between tests,
        and also provides access to data about the running test suite and
        holds information about the currently-executing test.
    */
    class TestContext
    {
        var suite;
        var current_test;
        var data;
        var test_name;
        var test_todo;

        // Create the TestContext, initializing the data store with any named
        // values
        function BUILD(var data [slurpy,named])
        {
            self.data = data;
        }

        /* TestCase API
            These routines are used by the Suite to control running of tests
            and reporting of status. TestContext, user-defined subclasses, and
            any custom stand-in objects MUST provide these API routines to be
            used as a context for the tests.
        */

        // Prepare the next test to execute. Set the current Suite and
        // TestCase
        function prepare(var suite, string test_name, var test)
        {
            self.suite = suite;
            self.current_test = test;
            self.test_name = test_name;
            self.test_todo = null;
        }

        // Get the displayable name of the test. Should not be null.
        function display_name()
        {
            return self.test_name;
        }

        // Displayable text showing a todo note. Should be null if the test
        // is not todo'd
        function test_todo()
        {
            return self.test_todo;
        }

        /* Test Helpers
            These routines are provided by the default TestContext as an aide
            for running tests. These are not required for normal running of
            the Suite, and can be optionally disallowed or overridden in
            custom Context objects.
        */

        // Get the currently executing TestCase object
        function current_test()
        {
            return self.current_test;
        }

        // Get the currently executing Suite object
        function suite()
        {
            return self.suite;
        }

        // Get a named data value
        function get_data(string n)
        {
            if (exists self.data[n])
                return self.data[n];
            return null;
        }

        // Set a named data value, to share between test methods
        function set_data(string n, var value)
        {
            self.data[n] = value;
        }

        // Mark the currently-executing test as TODOd
        function todo(string msg)
        {
            self.test_todo = msg;
        }

        // Change the displayed name of the test
        function verify(string msg)
        {
            self.test_name = msg;
        }

        // Mark the test as being incomplete or unimplemented
        function unimplemented(string msg)
        {
            self.test_todo = msg;
            using Assert.fail;
            fail("Unimplemented: " + msg, 1);
        }
    }
}}
