namespace Rosella { namespace Test
{
    /* The test Suite object. The Suite takes a list of tests (probably from
       a Loader) and runs it. As tests are run, events are passed to the
       Result object.
    */
    class Suite
    {
        var members; // List of tests to run
        var name;    // Name of the suite

        // Set up the suite with the given name and list of tests
        function BUILD(var tests, string name)
        {
            self.members = tests;
            self.name = name;
        }

        // Get the default Result object to use. In this case, it's a
        // basic Rosella.Test.Result object with a Rosella.Test.Listener.TAP
        // listener. To get something else, subclass.
        function default_result()
        {
            using Rosella.build;
            var tap_listener = build(class Rosella.Test.Listener.TAP);
            var result = build(class Rosella.Test.Result, [tap_listener]);
            return result;
        }

        // Run the tests
        function run(var result [named,optional], int has_result [opt_flag])
        {
            if (!has_result)
                result = self.default_result();
            result.plan_tests(int(self.members));
            for (var member in self.members)
                self.run_test(member, result);
            return result;
        }

        // Run a single test
        function run_test(var test, var result)
        {
            var exception = null;
            result.start_test(test);
            try {
                test.__set_up();
                self.run_test_method(test);
            } catch (e) {
                exception = e;
            }
            try {
                test.__tear_down();
            } catch (e) {
                string type = null;
                ${ typeof type, test };
                say("Caught exception while tearing down test " + type);
                say(e);
            }
            if (exception == null) {
                result.end_test(test);
                return result;
            }

            var payload = exception.payload;
            if (payload == null) {
                result.add_error(test, exception);
                return result;
            }
            var failure_class = class Rosella.Test.Failure;
            int isa_failure = 0;
            ${ isa isa_failure, payload, failure_class };
            if (isa_failure)
                result.add_failure(test, exception);
            else
                result.add_error(test, exception);
            return result;
        }

        // Execute the actual test method
        function run_test_method(var test)
        {
            string method = test.name;
            test.*method();
        }
    }
}}

