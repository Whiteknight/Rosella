namespace Rosella { namespace Test
{
    /* The test Suite object. The Suite takes a list of tests and runs it. As
       tests are run, events are passed to the Result object.
    */
    class Suite
    {
        var tests;      // Hash of tests to run
        var context;

        // Set up the suite with the given name and list of tests
        function BUILD(var tests, var context)
        {
            self.tests = tests;
            self.context = context;
        }

        // Get the default Result object to use. In this case, it's a
        // basic Rosella.Test.Result object with a Rosella.Test.Listener.TAP
        // listener. To get something else, subclass.
        function default_result()
        {
            using Rosella.build;
            var tap_listener = build(class Rosella.Test.Listener.TAP);
            var result = build(class Rosella.Test.Result, [tap_listener]);
            return result;
        }

        // Run the tests
        function run(var result [named,optional], int has_result [opt_flag])
        {
            if (!has_result)
                result = self.default_result();
            result.plan_tests(int(self.tests));
            for (var test_name in self.tests) {
                var test = self.tests[test_name];
                self.context.prepare(self, test_name, test);
                self.run_test(test_name, test, result);
            }
            return result;
        }

        // Run a single test
        // TODO: Refactor this out into several functions, so subclasses can
        //       modify only small parts of the algorithm
        function run_test(var test_name, var test, var result)
        {
            var exception = null;
            result.start_test(test, self.context);
            try {
                var method = test.method;
                test.*method();
            } catch (e) {
                exception = e;
            }
            if (exception == null) {
                result.end_test(test, self.context);
                return;
            }

            var payload = exception.payload;
            if (payload == null) {
                result.add_error(test, self.context, exception);
                return result;
            }
            var failure_class = class Rosella.Test.Failure;
            int isa_failure = 0;
            ${ isa isa_failure, payload, failure_class };
            if (isa_failure) {
                if (payload.is_internal)
                    result.add_failure(test, self.context, exception.message);
                else
                    result.add_failure(test, self.context, exception);
            } else
                result.add_error(test, self.context, exception);
            return result;
        }
    }
}}

