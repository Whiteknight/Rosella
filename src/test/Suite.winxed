/* The test Suite object. The Suite takes a list of tests and runs it. As
   tests are run, events are passed to the Result object.
*/
class Rosella.Test.Suite
{
    var tests;      // Hash of tests to run

    /* Public Methods
    */

    // Set up the suite with the given name and list of tests
    function Suite(var tests)
    {
        self.tests = tests;
    }

    // Run the tests
    function run(var result, var context, var asserter)
    {
        result.plan_tests(elements(self.tests));
        for (var test_name in self.tests) {
            var test = self.tests[test_name];
            self.__run_test(test_name, test, result, context, asserter);
        }
        result.tests_complete();
        return result;
    }

    /* Helper Methods
        These methods are used internally by Suite and can be modified
        in subclasses to change behavior. These methods are probably not
        useful to be called directly from external places.
    */

    // Execute the test on the test method.
    function execute_test(var test, var method, var context, var status)
    {
        test.*method();
    }

    /* Private Helper Methods
        These methods perform important interactions with other components
        of the Test library, and should probably not be modified in
        subclasses.
    */

    // Run a single test, catching errors and reporting results.
    function __run_test(string test_name, var test, var result, var context, var asserter)
    {
        result.start_test(test);
        var status = new Rosella.Test.TestStatus(test_name, test.method);

        var testcase_class = class Rosella.Test.TestCase;
        setattribute_private(test, testcase_class, "test_context", context);
        setattribute_private(test, testcase_class, "test_status", status);
        setattribute_private(test, testcase_class, "test_assert", asserter);

        var exception = null;
        try {
            self.execute_test(test, test.method, context, status);
        } catch (e) {
            exception = e;
        }
        if (can(status, "cleanup"))
            status.cleanup();
        self.__report_test_result(test, result, status, exception);
    }

    // Report information about the test to the results object
    function __report_test_result(var test, var result, var status, var exception)
    {
        if (exception == null)
            result.end_test(test, status);
        else
            result.add_failure(test, status, exception);
    }
}

