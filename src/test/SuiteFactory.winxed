/* SuiteFactory Class. This class takes a reference to a test type and
   and a suite type, and creates a new Suite with all the tests from that
   test type. Once created, the suite can be further configured and run.
*/
// TODO: Should be able to support loading several test classes
//       into a single Suite. The Suite can use nested TAP to handle them.
class Rosella.Test.SuiteFactory : Rosella.ObjectFactory
{
    var test_type;      // The type to extract tests from
    var options;        // User-specified options about the test run

    // Constructor. Take the test proto object and a few other options
    function SuiteFactory(var test_type, var options)
    {
        self.target_type = options["suite_type"];
        self.test_type = test_type;
        self.options = options;
    }

    // Create a Suite of the given type
    function create_typed(var type, var p [slurpy], var n [slurpy,named])
    {
        var testfactory = new Rosella.Test.TestFactory(self.options);
        var test_methods = self.get_test_methods();
        var tests = {};
        for (var test in test_methods) {
            var testcase = testfactory.create(test, test_methods[test]);
            tests[test] = testcase;
        }
        var suite = Rosella.construct(type, tests, self.options["test_context"]);
        return suite;
    }

    // Get a list of all test methods, searching up the MRO for any
    // methods which match the prefix.
    function get_test_methods()
    {
        var seen_methods = {};
        var class_obj = Rosella.get_type_class(self.test_type);
        var mro = class_obj.inspect("all_parents");
        var test_methods = {};
        for (var parent in mro) {
            if (string(parent) == "P6object")
                continue;
            var methods = parent.inspect("methods");
            for (var method in methods) {
                if (self.is_test_method(method) && !(exists seen_methods[method])) {
                    seen_methods[method] = 1;
                    test_methods[method] = methods[method];
                }
            }
        }
        return test_methods;
    }

    // Determine if this is a test method or not. There are a handful of
    // utility methods in Testcase, and others which the user can add too.
    function is_test_method(string name)
    {
        int is_test = 0;
        string prefix = self.options["test_prefix"];
        int prefix_length = length(prefix);
        if (length(name) > prefix_length &&
            substr(name, 0, prefix_length) == prefix) {
            is_test = 1;
        }
        return is_test;
    }
}
