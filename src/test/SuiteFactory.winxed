/* SuiteFactory Class. This class takes a reference to a test type and
   and a suite type, and creates a new Suite with all the tests from that
   test type. Once created, the suite can be further configured and run.
*/
// TODO: Should be able to support loading several test classes
//       into a single Suite. The Suite can use nested TAP to handle them.
class Rosella.Test.SuiteFactory : Rosella.ObjectFactory
{
    // Constructor. Take the test proto object and a few other options
    function SuiteFactory(var suite_type)
    {
        self.target_type = suite_type;
    }

    // Create a Suite of the given type
    function create_typed(var type, var test_factory, var test_methods, var p [slurpy], var n [slurpy,named])
    {
        var tests = self.get_test_methods(test_factory, test_methods, p:[flat], n:[flat,named]);
        var suite = Rosella.construct(type, tests);
        return suite;
    }

    // Given a TestFactory and a hash of methods, return a hash of TestCase
    // objects
    function get_test_methods(var test_factory, var test_methods)
    {
        var tests = {};
        for (var test in test_methods) {
            var testcase = test_factory.create(test_methods[test]);
            tests[test] = testcase;
        }
        return tests;
    }
}
