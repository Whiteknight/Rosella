class Rosella.CommandLine.ArgumentDef
{
    var raw_defs;
    var prepared_defs;

    function ArgumentDef(var raw_defs)
    {
        self.raw_defs = raw_defs;
    }

    function get_description(var sb = new 'StringBuilder')
    {
        // TODO: Prepend a usage string with program name
        var raw_defs = self.raw_defs;
        if (does(raw_defs, "hash"))
            self.__get_description_hash(raw_defs, sb);
        else if (does(raw_defs, "array"))
            self.__get_description_array(raw_defs, sb);
        else
            Rosella.Error.error("Unknown argument definition type '%s'", typeof(raw_defs));
        return sb;
    }

    function __get_description_hash(var raw_defs, var sb)
    {
        int max = 0;
        var fixed_defs = {};
        for (string arg in raw_defs) {
            var parts = split("=", arg);
            string arg_name = parts[0];
            string prefix = (length(arg_name) == 1) ? "-" : "--";
            arg_name = prefix + arg;
            fixed_defs[arg_name] = raw_defs[arg];

            int len = length(arg_name);
            if (len > max)
                max = len;
        }
        max += 4;

        for (string arg in fixed_defs) {
            string desc = fixed_defs[arg];
            push(sb, "    ");

            // TODO: add dashes. -X and --xxx instead of X and xxx
            push(sb, arg);
            push(sb, repeat_string(" ", max - length(arg)));
            push(sb, desc);
            push(sb, "\n");
        }
        return sb;
    }

    function __get_description_array(var raw_defs, var sb)
    {
        // TODO
    }

    function get_definitions()
    {
        if (self.prepared_defs != null)
            return self.prepared_defs;

        var arg_defs = Rosella.get_string_string_hash();
        var raw_defs = self.raw_defs;
        if (does(raw_defs, "hash"))
            self.__prepare_arg_defs_hash(raw_defs, arg_defs);
        else if (does(raw_defs, "array"))
            self.__prepare_arg_defs_array(raw_defs, arg_defs);
        else
            Rosella.Error.error("Unknown argument definition type '%s'", typeof(raw_defs));
        self.prepared_defs = arg_defs;
        return arg_defs;
    }

    /* We can handle defs of the following types:
        foo         f
        foo=s       f=s
        foo=[]      f=[]
        foo={}      f={}
    */
    function __prepare_arg_defs_hash(var defs, var arg_defs)
    {
        for (string arg_def in defs) {
            var parts = split("=", arg_def);

            // Get the name of the argument
            string raw_arg_name = parts[0];
            string arg_name;
            if (length(raw_arg_name) == 1)
                arg_name = "-" + raw_arg_name;
            else
                arg_name = "--" + raw_arg_name;

            // Now get a flag that tells us how to work with it.
            string flag = "f";
            if (elements(parts) == 2) {
                string second_part = parts[1];
                switch(second_part) {
                    case "s":
                    case "[]":
                    case "{}":
                        flag = parts[1];
                        break;
                    default:
                        Rosella.Error.error("Unknown argument type for '%s': '%s'", raw_arg_name, second_part);
                }
            }

            arg_defs[arg_name] = flag;
        }
    }

    // TODO: If we get an array of arrays, try to copy old-style
    // GetOpt::Obj format
    function __prepare_arg_defs_array(var defs, var arg_defs)
    {

    }
}
