/* A condition for a ProgramMode
    Each ProgramMode besides the default mode may have one or more conditions
    that must be met before that ProgramMode can be activated. This is the
    abstract parent class of specialized conditions.
*/
class Rosella.CommandLine.ModeCondition
{
    // Determine if this condition is satisifed by the given list of parsed
    // arguments
    function is_satisfied(var args)
    {
        return false;
    }

    // Get a description of this condition, for use in a help/usage message
    function get_description(var sb)
    {
    }
}

// Condition that requires the presence of a given flag
class Rosella.CommandLine.ModeCondition.FlagSet : Rosella.CommandLine.ModeCondition
{
    var flagname;

    function FlagSet(string flagname)
    {
        self.flagname = flagname;
    }

    function is_satisfied(var args)
    {
        string flagname = string(self.flagname);
        int value = args[flagname];
        return value;
    }

    function get_description(var sb)
    {
        string flagname = self.flagname;
        push(sb, " ");
        push(sb, flagname);
    }
}

// Condition that requires a given scalar-valued flag
class Rosella.CommandLine.ModeCondition.ScalarValue : Rosella.CommandLine.ModeCondition
{
    var name;
    var value;

    function ScalarValue(string name, string value)
    {
        self.name = name;
        self.value = value;
    }

    function is_satisfied(var args)
    {
        string name = self.name;
        string expectedvalue = self.value;
        string actualvalue = args[name];
        if (expectedvalue == actualvalue)
            return true;
        return false;
    }

    function get_description(var sb)
    {
        string name = self.name;
        string value = self.value;
        push(sb, " ");
        push(sb, name);
        push(sb, "=");
        push(sb, value);
    }
}

// Condition that uses a user-specified predicate function
class Rosella.CommandLine.ModeCondition.GenericFunc : Rosella.CommandLine.ModeCondition
{
    var func;
    var desc;

    function GenericFunc(var f, string desc)
    {
        self.func = f;
        self.desc = desc;
    }

    function is_satisfied(var args)
    {
        var f = self.func;
        return f(args);
    }

    function get_description(var sb)
    {
        string desc = self.desc;
        push(sb, " ");
        push(sb, desc);
    }
}

class Rosella.CommandLine.ModeCondition.RequiredPositionals : Rosella.CommandLine.ModeCondition
{
    var required_args;
    var can_have_more;

    function RequiredPositionals(int can_have_more, var args)
    {
        self.required_args = args;
        self.can_have_more = can_have_more;
    }

    function is_satisfied(var args)
    {
        if (self.can_have_more) {
            return elements(args.pos_cache) >= elements(self.required_args);
        } else {
            return elements(args.pos_cache) == elements(self.required_args);
        }
    }

    function get_description(var sb)
    {
        for (string arg in self.required_args) {
            push(sb, " <");
            push(sb, arg);
            push(sb, ">");
        }
        if (self.can_have_more)
            push(sb, " ...");
    }
}
