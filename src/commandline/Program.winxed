/* Program Class
    This class represents a program as a logical unit. Each Program object
    contains a collection of modes. Modes represent distinct behavioral patterns
    which are typically selected depending on patterns of command-line
    arguments. In addition to user-specified modes, there is also a default mode
    that is selected if no other modes are satisfied, and an error mode that is
    used to catch argument parsing errors and runtime errors.
*/
class Rosella.CommandLine.Program
{
    var program_name;   // The string name of the program
    var default_mode;   // The default ProgramMode
    var arg_defs;       // Hash of all argument definitions
    var on_error;       // The error handler callback
    var modes;          // A hash of named program modes

    // Constructor
    function Program(string program_name)
    {
        self.program_name = program_name;
        self.modes = [];
        self.default_mode = new Rosella.CommandLine.ProgramMode("default");
        self.on_error = function(var e) {
            say("Error parsing arguments");
            if (e != null)
                say(e.message);
        };
    }

    function arguments(var raw_defs)
    {
        self.arg_defs = new Rosella.CommandLine.ArgumentDefs(raw_defs);
    }

    // Set a function to execute on errors
    function on_error(var e)
    {
        self.on_error = e;
    }

    // Add a new ProgramMode with the given name
    function add_mode(string name)
    {
        var mode = new Rosella.CommandLine.ProgramMode(name);
        push(self.modes, mode);
        return mode;
    }

    // Get the default ProgramMode instance
    function default_mode()
    {
        return self.default_mode;
    }

    // Execute the program with the given args
    function run(var raw_args)
    {
        var args = new Rosella.CommandLine.Arguments(self);
        args.parse(raw_args, self.arg_defs);

        var mode = self.__find_mode(args);
        mode.fetch_all_args(args);
        var main_func = mode.main_function();
        if (main_func == null) {
            self.try_handle_error(null);
            return;
        }

        int exit_code = 0;
        int has_ec = false;
        Rosella.Parrot.try_report(function () {
            :(int ec [optional], int hec [opt_flag]) = main_func(args);
            exit_code = ec;
            has_ec = hec;
        });
        if (has_ec)
            exit(exit_code);
    }

    function __find_mode(var args)
    {
        for (var mode in self.modes)
        {
            if (mode.can_accept(args))
                return mode;
        }
        return self.defaule_mode;
    }

    // On error, try to execute the error handler, if any.
    function try_handle_error(var e)
    {
        var on_error = self.on_error;
        if (on_error == null) {
            if (e == null)
                Rosella.Error.invalid(__FUNCTION__, "Invalid parameter combination");
            else
                throw e;
        }
        on_error(e);
    }
}

