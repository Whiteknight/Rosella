/* Program Mode Class
    Each program mode represents a distinct behavioral pattern for the program.
    Each mode parses a different set of arguments and dispatches to a different
    main function.
*/
class Rosella.CommandLine.ProgramMode
{
    // TODO: Provide an automated help feature where each named argument can
    // take a short description which can be printed

    // TODO: Take an integer to use as the default exit code

    // TODO: Take a list of handles to use as the interpreter default during
    // execution

    var name;           // The name of the mode
    var func;           // The function to call
    var conditions;     // The conditions that determine if we use this mode
    var usage;          // Usage string for this mode

    // Constructor. Each ProgramMode has a name
    function ProgramMode(string name)
    {
        self.name = name;
    }

    // Set the main function to call when this mode is activated
    function set_function(var func)
    {
        self.func = func;
        return self;
    }

    // Set a custom usage message
    function set_usage(string usage)
    {
        self.usage = usage;
        return self;
    }

    // Get the complete usage message, as a combination of the Program usage
    // message, usage messages for the different modes, and usage messages
    // for all argument definitions.
    function get_usage(string program_name, var sb)
    {
        var usage = self.usage;
        if (usage != null) {
            push(sb, "       ");
            push(sb, program_name);
            push(sb, " ");
            push(sb, string(usage));
            push(sb, "\n");
        }
        else if (self.conditions != null) {
            push(sb, "       ");
            push(sb, program_name);
            for (var condition in self.conditions)
                condition.get_description(sb);
            push(sb, " <OPTIONS>\n");
        }
    }

    // Called by the Program class internally. This function determines if the
    // given list of arguments satisfies the list of required arguments for this
    // ProgramMode. If so, the mode will be activated and executed
    function can_accept(var args)
    {
        if (self.conditions == null)
            return true;
        for (var condition in self.conditions) {
            if (!condition.is_satisfied(args))
                return false;
        }
        return true;
    }

    // Get the main function to dispatch to.
    function main_function()
    {
        return self.func;
    }

    // Require the existence of a flag
    function require_flag(string name)
    {
        if (self.conditions == null)
            self.conditions = [];
        var condition = new Rosella.CommandLine.ModeCondition.FlagSet(name);
        push(self.conditions, condition);
        return self;
    }

    // Require a specific scalar value
    function require_value(string name, string value)
    {
        if (self.conditions == null)
            self.conditions = [];
        var condition = new Rosella.CommandLine.ModeCondition.ScalarValue(name, value);
        push(self.conditions, condition);
        return self;
    }

    // Require a predicate function to return true
    function require_condition(var f)
    {
        if (self.conditions == null)
            self.conditions = [];
        var condition = new Rosella.CommandLine.ModeCondition.GenericFunc(f);
        push(self.conditions, condition);
        return self;
    }
}

// Default program mode, similar to a normal mode but with no preconditions
// and a more generic usage message
class Rosella.CommandLine.ProgramMode.Default : Rosella.CommandLine.ProgramMode
{
    function Default() { self.name = ""; }

    function get_usage(string program_name, var sb)
    {
        var usage = self.usage;
        if (usage != null) {
            push(sb, "Usage: ");
            push(sb, program_name);
            push(sb, " ");
            push(sb, string(usage));
            push(sb, "\n");
        } else {
            push(sb, "Usage: ");
            push(sb, program_name);
            push(sb, " <OPTIONS>\n");
        }
    }

    function require_flag(string name)
    {
        Rosella.Error.error("May not add prerequisite conditions to the default program mode");
    }

    function require_value(string name, string value)
    {
        Rosella.Error.error("May not add prerequisite conditions to the default program mode");
    }

    function require_condition(var f)
    {
        Rosella.Error.error("May not add prerequisite conditions to the default program mode");
    }

    function can_accept(var args)
    {
        return true;
    }
}
