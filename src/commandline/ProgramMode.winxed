/* Program Mode Class
    Each program mode represents a distinct behavioral pattern for the program.
    Each mode parses a different set of arguments and dispatches to a different
    main function.
*/
class Rosella.CommandLine.ProgramMode
{
    // TODO: Provide an automated help feature where each named argument can
    // take a short description which can be printed

    // TODO: Take an integer to use as the default exit code

    // TODO: Take a list of handles to use as the interpreter default during
    // execution

    var name;                   // The name of the mode
    var func;                   // The function to call
    var conditions;             // The conditions that determine if we use this mode

    // Constructor. Each ProgramMode has a name
    function ProgramMode(string name)
    {
        self.name = name;
    }

    // Set the main function to call when this mode is activated
    function set_function(var func)
    {
        self.func = func;
        return self;
    }

    // Called by the Program class internally. This function determines if the
    // given list of arguments satisfies the list of required arguments for this
    // ProgramMode. If so, the mode will be activated and executed
    function can_accept(var args)
    {
        if (self.conditions == null)
            return true;
        for (var condition in self.conditions) {
            if (!condition.is_satisfied(args))
                return false;
        }
        return true;
    }

    // Get the main function to dispatch to.
    function main_function()
    {
        return self.func;
    }

    function require_flag(string name)
    {
        if (self.conditions == null)
            self.conditions = [];
        var condition = new Rosella.CommandLine.ModeCondition.FlagSet(name);
        push(self.conditions, condition);
    }

    function require_value(string name, string value)
    {
        if (self.conditions == null)
            self.conditions = [];
        var condition = new Rosella.CommandLine.ModeCondition.ScalarValue(name, value);
        push(self.conditions, condition);
    }

    function require_condition(var f)
    {
        if (self.conditions == null)
            self.conditions = [];
        var condition = new Rosella.CommandLine.ModeCondition.GenericFunc(f);
        push(self.conditions, condition);
    }
}
