function main[main](var args)
{
    var rosella = load_packfile("rosella/core.pbc");
    var(Rosella.initialize_rosella)("winxed");

    //using Rosella.get_version_hash;
    //var version_hash = get_version_hash();
    //for (string library in version_hash)
        //load_bytecode("rosella/" + library + ".pbc");

    show_preamble();

    if (elements(args) <= 1)
        run_repl();
    else if (args[1] == "--help")
        show_help();
    else if (args[1] == "--version")
        show_versions();
    else
        say("Unknown arguments");
}

function show_help()
{
    say(<<:
Winxed/Rosella REPL

    --help      Show this help
    --version   Show version information
:>>
);
}

function show_versions()
{
    using Rosella.Version.get_version_hash;
    using Rosella.Version.get_version;
    // TODO: When the String library gets more stable, use this for prettiness
    //using Rosella.String.pad_right;

    var version_hash = get_version_hash();
    say("Rosella library version information:");
    for (string library in version_hash) {
        var ver = get_version(library);
        //library = pad_right(library, 10);
        say(sprintf("\t%s : %d (%s)", [library, ver.version_number, ver.state]));
    }
}

function show_preamble()
{
    using Rosella.Version.get_version;
    var winxed_version = get_version("repl");
    var core_version = get_version("core");
    say(sprintf(<<:
Winxed REPL with Rosella
Version %d %s
Type '%%quit' or 'exit(0)' to quit
:>>
        , [winxed_version.version_number, winxed_version.state]));
}

function run_repl()
{
    var repl = new Rosella.Repl();
    repl.run_loop();
}
