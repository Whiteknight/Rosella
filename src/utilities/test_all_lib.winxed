// Constants.
const int SUB_FLAG_METHOD = 0x04;
const int SUB_FLAG_INIT = 0x400;
const int PF_FLAG_ANON = 0x08;
const int PF_FLAG_LOAD = 0x20;

// Class for keeping track of Namespaces and contents
class NamespaceEntry
{
    var classes;
    var subs;

    function NamespaceEntry()
    {
        self.classes = {};
        self.subs = [];
    }

    function add_class(string c)
    {
        if (!(exists self.classes[c]))
            self.classes[c] = new 'Class';
    }

    function add_class_method(string c, var m)
    {
        self.add_class(c);
        var cl = self.classes[c];
        string m_name = string(m);
        var old_m = cl.find_method(m_name);
        if (old_m != null) {
            // TODO: We have a :multi :method. How to handle that? For now, ignore it
        } else
            self.classes[c].add_method(string(m), m);
    }

    function add_sub(var sub) { push(self.subs, sub); }
}

// Main entry point. Parse arguments and dispatch to the main handler
function main[main](var args)
{
    var p = new Rosella.CommandLine.Program(args.shift());
    p.default_mode().set_function(test_all_main)
        .require_positional("language", 0)
        .require_positional("libpath", 1)
        .require_positional("folder", 2);
    p.add_mode("help").set_flag("--help").set_function(usage_and_exit);
    p.on_error(usage_and_exit);
    p.run(args);
}

// Main handler. Pull out the arguments by name and run the program.
function test_all_main(var args)
{
    string libpath = args["libpath"];
    var lib = try_load_lib(libpath);
    var entries = get_lib_entries(lib);
    output_test_files(args["language"], libpath, entries, args["folder"]);
}

// Help handler. Show usage information on --help or error
function usage_and_exit(var args)
{
    if (__DEBUG__ && args instanceof 'Exception') {
        say(args.message);
        for (string bt in args.backtrace_strings())
            say(bt);
    }
    string prog_name;
    if (args == null || args instanceof 'Exception')
        prog_name = "rosella_test_all_lib";
    else
        prog_name = (new Rosella.FileSystem.FilePath(args.program_name())).short_name();
    string fmt = <<:
Usage: %s <lang> <library> <folder>

Create tests for all classes and namespaces in <library>. Output all tests
to <folder>. Tests will be in language <lang>. <lang> is probably one of
'winxed' or 'nqp' or others if you have suitable templates installed.
:>>
;
    Rosella.IO.sayf(fmt, prog_name);
}

// Main driver routine. Read the PBC, extract subs and information, and
// output test files.
function output_test_files(string lang, string libname, var entries, string folderpath)
{
    var dir = new Rosella.FileSystem.Directory(folderpath);
    if (!dir.exists())
        dir.create();
    var engine = new Rosella.Template.Engine();
    :(string class_tmpl, string ns_tmpl) = get_templates(lang);
    for (string nsname in entries) {
        Rosella.IO.sayf("START NameSpace '%s'", nsname);
        var ns_dir = get_namespace_directory(dir, nsname);

        var classes = entries[nsname].classes;
        var subs = entries[nsname].subs;
        if (elements(subs) > 0) {
            var context = get_subs_list_context(libname, nsname, subs);
            string output = engine.generate_from_file(ns_tmpl, context);
            var file = new Rosella.FileSystem.File(nsname + ".t", ns_dir);
            file.write_all_text(output);
            Rosella.IO.sayf("\tBuilt Subs test file %s", string(file));
        }
        if (elements(classes) > 0) {
            for (string classname in classes) {
                var classobj = classes[classname];
                var context = get_class_context(libname, nsname, nsname + "." + classname, classobj);
                string output = engine.generate_from_file(class_tmpl, context);
                var classfile = new Rosella.FileSystem.File(classname + ".t", ns_dir);
                classfile.write_all_text(output);
                Rosella.IO.sayf("\tBuilt Class test file %s", string(classfile));
            }
        }
        Rosella.IO.sayf("END NameSpace '%s'", nsname);
    }
}

// Get the Directory object for the given namespace
function get_namespace_directory(var dir, string ns)
{
    var cur_dir = dir;
    var parts = split('.', ns);
    for (string part in parts) {
        cur_dir = new Rosella.FileSystem.Directory(part, cur_dir);
        if (!cur_dir.exists())
            cur_dir.create();
    }
    return cur_dir;
}

// Get the templates for test files
function get_templates(string lang)
{
    string class_tmpl = Rosella.Template.get_standard_template_file("test_class." + lang + ".template");
    string ns_tmpl = Rosella.Template.get_standard_template_file("test_ns." + lang + ".template");
    return class_tmpl, ns_tmpl;
}

// Get the context object for the test template of subs in a namespace
function get_subs_list_context(string libname, string nsname, var subslist)
{
    using Rosella.String.replace_all;

    var context = {
        "ns" : {
            "name" : nsname,
            "cleanname" : replace_all(nsname, ".", "_"),
            "winxedname" : nsname,
            "perlname" : replace_all(nsname, ".", "::"),
            "subs" : subslist,
            "ownerlib" : libname
        }
    };
    return context;
}

// Get the context object for the test template of methods in a class
function get_class_context(string libname, string nsname, string classname, var classobj)
{
    using Rosella.String.replace_all;

    var methods = classobj.methods();
    var context = {
        "class" : {
            "name" : classname,
            "cleanname" : replace_all(classname, ".", "_"),
            "winxedname" : classname,
            "perlname" : replace_all(classname, ".", "::"),
            "methods" : methods,
            "ownerlib" : libname
        }
    };
    return context;
}

// Try to load the specified library, by name.
function try_load_lib(string libpath)
{
    var pf = load_packfile(libpath);
    //var pf = new 'PackfileView';
    //pf.read_from_file(libpath);
    //for (var sub in pf.subs_by_tag("load"))
        //sub();
    if (pf == null) {
        Rosella.IO.sayf("FAIL.");
        Rosella.Error.invalid(__FUNCTION__, "Cannot load '%s'", libpath);
    }
    return pf;
}

// Extract a list of Sub PMCs from the packfile, and create NamespaceEntry
// objects to hold them.
function get_lib_entries(var lib)
{
    var all_subs = lib.all_subs();
    var all_namespaces = {};
    for (var sub in all_subs) {
        int sub_flags = sub.comp_flags();
        int pf_flags = sub.pf_flags();

        // Don't list subs marked :anon
        if ((pf_flags & PF_FLAG_ANON) != 0)
            continue;

        var nsname = sub.get_namespace().get_name();
        nsname.shift(); // drop HLL namespace
        string ns = join(".", nsname);

        if ((sub_flags & SUB_FLAG_METHOD) != 0) {
            string classname = nsname.pop();
            string basename = join(".", nsname);
            if (!(exists all_namespaces[basename]))
                all_namespaces[basename] = new NamespaceEntry();
            all_namespaces[basename].add_class_method(classname, sub);
        }
        else {
            if (!(exists all_namespaces[ns]))
                all_namespaces[ns] = new NamespaceEntry();
            all_namespaces[ns].add_sub(sub);
        }
    }
    return all_namespaces;
}
