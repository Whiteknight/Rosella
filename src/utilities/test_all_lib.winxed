// Main entry point. Parse arguments and dispatch to the main handler
function main[main](var args)
{
    Rosella.Query.install_to_parrot_types();
    var p = new Rosella.CommandLine.Program(args.shift());
    p
        .define_arguments({
            "help|h" : "Show the help message"
        })
        .set_description("Create tests for all classes and namespaces in <library>. Output all tests\n" +
                         "to <folder>. Tests will be in language <lang>. <lang> is probably one of\n" +
                         "'winxed' or 'nqp' or others if you have suitable templates installed.");
    p.default_mode()
        .set_function(test_all_main)
        .set_usage("<lang> <library> <folder>");
    p.add_mode("help").require_flag("help").set_function(usage_and_exit);
    p.on_error(usage_and_exit);
    p.run(args);
}

// Main handler. Pull out the arguments by name and run the program.
function test_all_main(var args)
{
    string libpath = args[1];
    string lang = args[0];
    string folder = args[2];
    var module = Rosella.Reflect.Module.load(libpath);
    var engine = new Rosella.Template.Engine();

    var dir = new Rosella.FileSystem.Directory(folder);
    if (!dir.exists())
        dir.create();
    :(string class_tmpl, string ns_tmpl) = get_templates(lang);
    module.functions_by_ns()
        .iterable()
        .filter(function(kvp) { return elements(kvp.value()) > 0; })
        .foreach(function(kvp) {
            var subs = kvp.value();
            string nsname = kvp.key();
            var nsdir = get_namespace_directory(dir, nsname);
            var context = get_subs_list_context(libpath, nsname, subs);
            string output = engine.generate_from_file(ns_tmpl, context);
            var file = new Rosella.FileSystem.File(nsname + ".t", nsdir);
            file.write_all_text(output);
            Rosella.IO.sayf("\tBuilt Subs test file %s", string(file));
        });

    module.classes()
        .iterable()
        .foreach(function(kvp) {
            string classname = kvp.key();
            var classobj = kvp.value();
            var classdir = get_class_directory(dir, classname);
            var context = get_class_context(libpath, classname, classobj);
            string output = engine.generate_from_file(class_tmpl, context);
            var classfile = new Rosella.FileSystem.File(string(classobj.name()) + ".t", classdir);
            classfile.write_all_text(output);
            Rosella.IO.sayf("\tBuilt Class test file %s", string(classfile));
        });
}

// Help handler. Show usage information on --help or error
function usage_and_exit(var args)
{
    if (__DEBUG__ && args instanceof 'Exception') {
        say(args.message);
        for (string bt in args.backtrace_strings())
            say(bt);
    }
    say(args.program.get_help_text());
}

// Get the Directory object for the given namespace
function get_namespace_directory(var dir, string ns)
{
    var cur_dir = dir;
    var parts = split('.', ns);
    for (string part in parts) {
        cur_dir = new Rosella.FileSystem.Directory(part, cur_dir);
        if (!cur_dir.exists()) {
            Rosella.IO.sayf("Creating directory %s", cur_dir);
            cur_dir.create();
        }
    }
    return cur_dir;
}

function get_class_directory(var dir, string classname)
{
    var parts = split(".", classname);
    parts.pop();
    return get_namespace_directory(dir, join(".", parts));
}

// Get the templates for test files
function get_templates(string lang)
{
    string class_tmpl = Rosella.Template.get_standard_template_file("test_class." + lang);
    string ns_tmpl = Rosella.Template.get_standard_template_file("test_ns." + lang);
    return class_tmpl, ns_tmpl;
}

// Get the context object for the test template of subs in a namespace
function get_subs_list_context(string libname, string nsname, var subslist)
{
    subslist = subslist
        .iterable()
        .filter(function(s) { return substr(string(s), 0, 1) != "_"; })
        .to_array();

    var context = {
        "ns" : {
            "name" : nsname,
            "cleanname" : Rosella.String.replace_all(nsname, ".", "_"),
            "winxedname" : nsname,
            "perlname" : Rosella.String.replace_all(nsname, ".", "::"),
            "subs" : subslist,
            "ownerlib" : libname
        }
    };
    return context;
}

// Get the context object for the test template of methods in a class
function get_class_context(string libname, string classname, var classobj)
{
    string shortname = split(".", classname).pop();
    var methods = classobj
        .get_all_methods_raw()
        .iterable()
        .filter(function(kvp) { return string(kvp.key()) != shortname; })
        .filter(function(kvp) { return substr(string(kvp.key()), 0, 1) != "_"; })
        .to_hash();

    var context = {
        "class" : {
            "name" : classname,
            "cleanname" : Rosella.String.replace_all(classname, ".", "_"),
            "winxedname" : classname,
            "perlname" : Rosella.String.replace_all(classname, ".", "::"),
            "methods" : methods,
            "ownerlib" : libname
        }
    };
    return context;
}

