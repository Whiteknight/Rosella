const string TEMPLATE_FILE_FMT = "%s.%s.template";

function main[main](var args)
{
    var rosella = load_packfile("rosella/core.pbc");
    var(Rosella.initialize_rosella)("commandline", "filesystem", "template");

    var program = new Rosella.CommandLine.Program(args.shift());
    //program.add_mode("help").set_flag("--help").set_function(show_help).no_args();
    //program.add_mode("version").set_flag("--version").set_function(show_version).no_args();
    //program.add_mode("harness").set_flag("--mode", "harness").set_function(harness_main).with_args({
        //"language" : "1",
        //"args" : "*"
    //});
    //program.add_mode("test").set_flag("--mode", "test").set_function(test_main).with_args({
        //"language" : "p1",
        //"libname" : "p2",
        //"classname" : "p3"
    //});

    program.run(args);
}

function template_main(var args)
{
    string mode = args["mode"];
    string language = args["language"];
    var args = args["args"];
    string template;
    var context;
    switch (mode) {
        case "harness":
            template = get_template_text("test_harness", language);
            context = harness_template_context(template, args);
            break;
        case "test":
            template = get_template_text("test_class", language);
            context = test_template_context(language, args[0], args[1]);
            break;
        default:
            show_help();
    }
    var engine = new Rosella.Template.Engine();
    string output = engine.generate(template, context);
    say(output);
}

function get_template_text(string type, string lang)
{
    using Rosella.Template.get_standard_template_file;
    string filename = sprintf(TEMPLATE_FILE_FMT, [type, lang]);
    filename = get_standard_template_file(filename);
    var file = new Rosella.FileSystem.File(filename);
    if (!file.exists()) {
        say(sprintf("Cannot find %s template for language '%s'", [type, lang]));
        show_help();
        exit(0);
    }
    return file.read_all_text();
}

function harness_template_context(string template, var dirs)
{
    var context = {
        "test" : {
            "dirs" : dirs
        }
    };
    return context;
}

function test_template_context(string template, string libname, string classname)
{
    load_bytecode(libname);
    using Rosella.get_type_class;
    using Rosella.String.replace_all;

    var targetclass = get_type_class(split(".", classname));
    if (targetclass == null)
        Rosella.Error.invalid(__FUNCTION__, "Cannot find class %s", classname);
    var methods = targetclass.methods();

    var context = {
        "class" : {
            "name" : classname,
            "cleanname" : replace_all(classname, ".", "_"),
            "winxedname" : classname,
            "perlname" : replace_all(classname, ".", "::"),
            "methods" : methods,
            "ownerlib" : libname
        }
    };
    return context;
}

function show_help()
{
    string text = <<:
winxed test_template.winxed harness <lang> <dirs...>
    Create a test harness

winxed test_template.winxed test <lang> <.pbc_file> <class_name>
    Creates a stub test file for an existing library class

Options:
    <lang> one of "nqp" or "winxed"
:>>
;
    say(text);
    exit(0);
}
