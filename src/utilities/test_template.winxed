const string TEMPLATE_FILE_FMT = "%s.%s";

// Entry point. Parse args and dispatch
function main[main](var args)
{
    var program = new Rosella.CommandLine.Program(args.shift());
    program.add_mode("help").set_flag("--help").set_function(show_help);
    program.add_mode("version").set_flag("--version").set_function(show_version);
    program.add_mode("harness").set_flag("harness").set_function(harness_main)
        .require_positional("language", 1)
        .require_args({ "dirs" : "*" });
    program.add_mode("test").set_flag("test").set_function(test_main)
        .require_positional("language", 1)
        .require_positional("libname", 2)
        .require_positional("classname", 3);
    program.on_error(show_help);
    program.run(args);
}

// Generate a test file from template
function test_main(var args)
{
    string language = args["language"];
    string libname = args["libname"];
    string classname = args["classname"];
    string template = get_template_text("test_class", language);
    var context = test_template_context(language, libname, classname);
    var engine = new Rosella.Template.Engine();
    string output = engine.generate(template, context);
    say(output);
}

// Generate a test harness from template
function harness_main(var args)
{
    string mode = args["mode"];
    string language = args["language"];
    var dirs = args["dirs"];
    string template = get_template_text("test_harness", language);
    var context = harness_template_context(template, dirs);
    var engine = new Rosella.Template.Engine();
    string output = engine.generate(template, context);
    say(output);
}

// Show the help message
function show_help(var args)
{
    if (__DEBUG__ && args instanceof 'Exception') {
        say(args.message);
        for (string bt in args.backtrace_strings())
            say(bt);
    }
    string text = <<:
%s harness <lang> <dirs...>
    Create a test harness

%s test <lang> <.pbc_file> <class_name>
    Creates a stub test file for an existing library class

Options:
    <lang> one of "nqp" or "winxed"
:>>
;

    string program_name;
    if (args == null || args instanceof 'Exception')
        program_name = "rosella_test_template";
    else
        program_name = (new Rosella.FileSystem.FilePath(args.program_name())).short_name();
    Rosella.IO.sayf(text, program_name, program_name);
}

// Show version information
function show_version(var args)
{
    say("test_template utility version 1");
    var v = Rosella.Version.get_version("core");
    say(sprintf("\tRosella %s: %s", [v.library_name(), v.library_version()]));
    v = Rosella.Version.get_version("template");
    say(sprintf("\tRosella %s: %s", [v.library_name(), v.library_version()]));
    v = Rosella.Version.get_version("test");
    say(sprintf("\tRosella %s: %s", [v.library_name(), v.library_version()]));
    v = Rosella.Version.get_version("harness");
    say(sprintf("\tRosella %s: %s", [v.library_name(), v.library_version()]));
    v = Rosella.Version.get_version("commandline");
    say(sprintf("\tRosella %s: %s", [v.library_name(), v.library_version()]));
    v = Rosella.Version.get_version("filesystem");
    say(sprintf("\tRosella %s: %s", [v.library_name(), v.library_version()]));
}

// Get the template text string
function get_template_text(string type, string lang)
{
    string filename = sprintf(TEMPLATE_FILE_FMT, [type, lang]);
    filename = Rosella.Template.get_standard_template_file(filename);
    var file = new Rosella.FileSystem.File(filename);
    if (!file.exists()) {
        say(sprintf("Cannot find %s template for language '%s'", [type, lang]));
        show_help();
        exit(0);
    }
    return file.read_all_text();
}

// Get the template DataContext for a harness
function harness_template_context(string template, var dirs)
{
    var context = {
        "test" : {
            "dirs" : dirs
        }
    };
    return context;
}

// Get the template DataContext for a test file
function test_template_context(string template, string libname, string classname)
{
    var pf = load_packfile(libname);
    using Rosella.get_type_class;
    using Rosella.String.replace_all;

    var targetclass = get_type_class(split(".", classname));
    if (targetclass == null)
        Rosella.Error.invalid(__FUNCTION__, "Cannot find class %s", classname);
    var methods = targetclass.methods();

    var context = {
        "class" : {
            "name" : classname,
            "cleanname" : replace_all(classname, ".", "_"),
            "winxedname" : classname,
            "perlname" : replace_all(classname, ".", "::"),
            "methods" : methods,
            "ownerlib" : libname
        }
    };
    return context;
}

