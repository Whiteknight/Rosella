// Main entry point. Parse the arguments and call the main function
function main[main](var args)
{
    Rosella.Query.install_to_parrot_types();
    var p = new Rosella.CommandLine.Program(args.shift());
    p.default_mode().set_function(mk_header_main)
        .require_positional("libpath", 0)
        .optional_args({"--rosella" : "f"});
    p.add_mode("help").set_flag("--help").set_function(show_help);
    p.on_error(show_help);
    p.run(args);
}

// Main driver routine. Read the .pbc files and output the include text
function mk_header_main(var args)
{
    string libpath = args["libpath"];
    int rosella_mode = args["--rosella"];
    var module = Rosella.Reflect.Module.load(libpath);

    var funcs_by_ns = module.functions_by_ns();
    for (string ns in funcs_by_ns) {
        var funcs = funcs_by_ns[ns]
            .iterable()
            .map(function(f) { return string(f); })
            .filter(function(f) { return substr(f, 0, 1) != "_"; });
        if (funcs.any()) {
            Rosella.IO.sayf("namespace %s {", ns);
            funcs.foreach(function(f) { Rosella.IO.sayf("    extern function %s;", f); });
            Rosella.IO.sayf("}\n");
        } else
            Rosella.IO.sayf("namespace %s { }\n", ns);
    }
    module
        .classes()
        .iterable()
        .map(function(kvp) { return kvp.key(); })
        .foreach(function(c) { Rosella.IO.sayf("class %s;", c); });

    if (rosella_mode) {
        var fpath = new Rosella.FileSystem.Path(libpath, 0);
        string libname_short = fpath.short_name_no_ext();
        string libname = fpath.short_name();
        Rosella.IO.sayf("\n\nfunction __include_%s [anon,init,load] ()\n{", libname_short);
        Rosella.IO.sayf("    Rosella.load_bytecode_file('rosella/%s', 'load');", libname);
        Rosella.IO.sayf("}");
    }
}

// Show the help message
function show_help(var args)
{
    if (__DEBUG__ && args instanceof 'Exception') {
        say(args.message);
        for (string bt in args.backtrace_strings())
            say(bt);
    }
    string text = <<:
%s <libname>
    Create a winxed include file for the given PBC library.

:>>
;

    string program_name;
    if (args == null || args instanceof 'Exception')
        program_name = "winxed_mk_header";
    else
        program_name = (new Rosella.FileSystem.FilePath(args.program_name())).short_name();
    Rosella.IO.sayf(text, program_name, program_name);
}
