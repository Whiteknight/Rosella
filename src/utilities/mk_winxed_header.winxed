// Forward declarations.
namespace Rosella {
    namespace IO {
        extern function sayf;
        extern function printf;
    }
    namespace CommandLine { class Program; }
    namespace FileSystem { class FilePath; }
}

// Entry object to collect information from the packfile
class NamespaceEntry {
    var classes;
    var subs;

    function NamespaceEntry()
    {
        self.classes = {};
        self.subs = [];
    }

    function add_class(string c)
    {
        self.classes[c] = 1;
    }

    function add_sub(var sub)
    {
        push(self.subs, sub);
    }
}

// Useful constants
const int SUB_FLAG_METHOD = 0x04;
const int SUB_FLAG_INIT = 0x400;
const int PF_FLAG_ANON = 0x08;
const int PF_FLAG_LOAD = 0x20;

// Main entry point. Parse the arguments and call the main function
function main[main](var args)
{
    var rosella = load_packfile("rosella/core.pbc");
    var(Rosella.initialize_rosella)("commandline", "filesystem");

    var p = new Rosella.CommandLine.Program(args.shift());
    p.default_mode().set_function(mk_header_main)
        .require_positional("libpath", 0);
    p.add_mode("help").set_flag("--help").set_function(show_help);
    p.on_error(show_help);
    p.run(args);
}

// Main driver routine. Read the .pbc files and output the include text
function mk_header_main(var args)
{
    string libpath = args["libpath"];
    using Rosella.IO.sayf;
    var lib;
    ${ load_bytecode lib, libpath };
    var all_subs = lib.all_subs();
    var all_namespaces = {};
    for (var sub in all_subs) {
        int sub_flags = sub.comp_flags();
        int pf_flags = sub.pf_flags();

        // Don't list subs marked :anon
        if ((pf_flags & PF_FLAG_ANON) != 0)
            continue;

        var nsname = sub.get_namespace().get_name();
        nsname.shift(); // drop HLL namespace
        string ns = join(".", nsname);

        if ((sub_flags & SUB_FLAG_METHOD) != 0) {
            string classname = nsname.pop();
            string basename = join(".", nsname);
            if (!(exists all_namespaces[basename]))
                all_namespaces[basename] = new NamespaceEntry();
            all_namespaces[basename].add_class(classname);
        }
        else {
            if (!(exists all_namespaces[ns]))
                all_namespaces[ns] = new NamespaceEntry();
            all_namespaces[ns].add_sub(sub);
        }
    }
    for (var ns in all_namespaces) {
        sayf("namespace %s {", ns);
        for (var c in all_namespaces[ns].classes)
            sayf("\tclass %s;", c);
        for (var sub in all_namespaces[ns].subs)
            sayf("\textern function %s;", sub);
        say("}\n");
    }
}

// Show the help message
function show_help(var args)
{
    if (__DEBUG__ && args instanceof 'Exception') {
        say(args.message);
        for (string bt in args.backtrace_strings())
            say(bt);
    }
    string text = <<:
%s <libname>
    Create a winxed include file for the given PBC library.

:>>
;

    string program_name;
    if (args == null || args instanceof 'Exception')
        program_name = "winxed_mk_header";
    else
        program_name = (new Rosella.FileSystem.FilePath(args.program_name())).short_name();
    Rosella.IO.sayf(text, program_name, program_name);
}
