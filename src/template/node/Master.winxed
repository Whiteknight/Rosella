/* Master node class.
    This node type is the top-level node. It represents the entire
    template. This type loops over all nodes, renders them, and outputs
    the results directly.
*/
class Rosella.Template.Node.Master : Rosella.Template.Node
{
    var children;

    // Constructor
    function Master()
    {
        self.Node("", "");
        self.children = [];
    }

    // Render all children, in order
    function render(var engine, var context, var builder)
    {
        for (var child in self.children)
            child.render(engine, context, builder);
    }

    function to_winxed(var engine, var builder)
    {
        int master_idx = Rosella.get_unique_count();
        self.__to_winxed("__TMPL_" + string(master_idx), engine, builder);
    }

    function to_winxed_master(var engine, var builder)
    {
        int master_idx = Rosella.get_unique_count();
        string func_name = "__TMPL_" + string(master_idx);
        self.__to_winxed(func_name, engine, builder);
        return func_name;
    }

    function __to_winxed(string func_name, var engine, var builder)
    {
        string preamble = <<:
function %s[anon](var __CONTEXT_RAW__)
{
    var __CONTEXT__ = new Rosella.Template.Context(__CONTEXT_RAW__);
    var __BUILDER__ = new 'StringBuilder';
    var __BUILDER_STACK__ = [];
    var __RESULTS__ = null;
:>>
;
        preamble = Rosella.String.sprintf(preamble, func_name);
        push(builder, preamble);
        for (var child in self.children)
            child.to_winxed(engine, builder);
        string coda = <<:
    return string(__BUILDER__);
}
$include "src/include/Builtins.winxed";
$include "src/include/Core.winxed";
$include "src/include/Template.winxed";
:>>
;
        push(builder, coda);
    }

    function to_winxed_recurse(var engine, var builder)
    {
        int master_idx = Rosella.get_unique_count();
        string preamble = <<:
    {
:>>
;
        preamble = Rosella.String.sprintf(preamble, master_idx);
        push(builder, preamble);
        for (var child in self.children)
            child.to_winxed(engine, builder);
        string coda = <<:
    }
:>>
;
        push(builder, coda);
    }

    // Add a new child to the list of nodes
    function add_child(var node)
    {
        push(self.children, node);
    }
}
