/* Temporary Variable Set
    Set a value into a temporary variable
*/
class Rosella.Template.Handler.Set : Rosella.Template.Handler.Children
{
    var varname;
    var sourcename;
    var children;

    // Constructor. Check syntax.
    function Set(var tokens) { self.Children(tokens); }

    function parse(var tokens)
    {
        string varname = tokens[0];
        self.varname = varname;

        int numtks = elements(tokens);
        if (is_reserved_varname(varname))
            Rosella.Error.error("Variable names starting and ending with double underscores are reserved");

        if (numtks == 1)
            self.sourcename = null;
        else if (numtks == 3 && tokens[1] == "as")
            self.sourcename = tokens[2];
        else
            Rosella.Error.error("Syntax of set is 'set <var>' or 'set <var> as <value>'");
    }

    // There are two forms of set. 1-argument set can have children,
    // 3-argument set cannot
    function can_have_children()
    {
        if (self.sourcename == null)
            return true;
        return false;
    }

    // Render. This node type doesn't have any output. Rendering it
    // performs the assignment
    function render(var engine, var ctx, var sb)
    {
        if (self.sourcename == null && self.children != null) {
            var inner_sb = new "StringBuilder";
            self.__render_children(engine, ctx, inner_sb);
            string text = string(inner_sb);
            ctx.set_temporary(self.varname, text);
        }
        else if (self.sourcename != null) {
            var value = ctx.get_value(self.sourcename);
            ctx.set_temporary(self.varname, value);
        }
    }

    // Compile to Winxed
    function to_winxed(var engine, var builder)
    {
        if (self.sourcename == null && self.children != null) {
            string code = <<:
    {
        push(__BUILDER_STACK__, __BUILDER__);
        __BUILDER__ = new 'StringBuilder';
:>>
;
            push(builder, code);
            self.__to_winxed_children(engine, builder);
            code = <<:
        __CONTEXT__.set_temporary('%s', string(__BUILDER__));
        __BUILDER__ = __BUILDER_STACK__.pop();
    }
:>>
;
            push(builder, code);
        } else if (self.sourcename != null) {
            string code = "        __CONTEXT__.set_temporary('" + string(self.varname) + "', __CONTEXT__.get_value('" + string(self.sourcename) + "'));\n";
            push(builder, code);
        }
    }
}
