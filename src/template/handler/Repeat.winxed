/* Fixed Integer Repeating
    Repeat the contents of the node a certain number of times defined by
    an integer range
*/
class Rosella.Template.Handler.Repeat : Rosella.Template.Handler.Children
{
    var start;
    var end;
    const string IDX_VARNAME = "__INDEX__";
    const string FIRST_VARNAME = "__FIRST__";
    const string LAST_VARNAME = "__LAST__";

    // Constructor
    function Repeat(var tokens) { self.Children(tokens); }

    function parse(var tokens)
    {
        if (elements(tokens) != 3 || tokens[1] != "to")
            Rosella.Error.invalid(__FUNCTION__, "Syntax of repeat loop is 'repeat <start> to <stop>'");
        self.start = tokens[0];
        self.end = tokens[2];
    }

    // Render. Loop over data and render children for each
    function render(var engine, var ctx, var sb)
    {
        int start = int(self.__get_value(self.start, ctx));
        int end = int(self.__get_value(self.end, ctx));
        int direction = 1;
        self.__save_ctx_values(function() {
            if (start == end) {
                ctx.set_temporary(IDX_VARNAME, start);
                ctx.set_temporary(FIRST_VARNAME, 1);
                ctx.set_temporary(LAST_VARNAME, 1);
                self.__render_children(engine, ctx, sb);
                return;
            }
            if (end < start)
                direction = -1;

            for (int i = start; i - direction != end; i += direction) {
                ctx.set_temporary(FIRST_VARNAME, i == start);
                ctx.set_temporary(LAST_VARNAME, i == end);
                ctx.set_temporary(IDX_VARNAME, i);
                self.__render_children(engine, ctx, sb);
            }
        }, ctx, IDX_VARNAME, FIRST_VARNAME, LAST_VARNAME);
    }

    function to_winxed(var engine, var builder)
    {
        int gen_idx = Rosella.get_unique_count();

        self.__save_ctx_values_to_winxed(builder, function() {
            string preamble = <<:
        int __numeric%d = Rosella.String.get_character_class("numeric");
        int __start%d   = (Rosella.String.first_not_cclass("%s", __numeric%d) == -1) ? int("%s") : int(__CONTEXT__.get_value("%s"));
        int __end%d     = (Rosella.String.first_not_cclass("%s", __numeric%d) == -1) ? int("%s") : int(__CONTEXT__.get_value("%s"));
:>>
;
            preamble = Rosella.String.sprintf(preamble, gen_idx, gen_idx, self.start, gen_idx, self.start, self.start, gen_idx, self.end, gen_idx, self.end, self.end);
            push(builder, preamble);
            string code = <<:
        if (__start%d == __end%d) {
            __CONTEXT__.set_temporary("%s", __start%d);
            __CONTEXT__.set_temporary("%s", 1);
            __CONTEXT__.set_temporary("%s", 1);
:>>
;
            code = Rosella.String.sprintf(code, gen_idx, gen_idx, IDX_VARNAME, gen_idx, FIRST_VARNAME, LAST_VARNAME);
            push(builder, code);
            self.__to_winxed_children(engine, builder);
            code = <<:
        } else {
            int __direction%d = (__end%d < __start%d) ? -1 : 1;
            for (int __i%d = __start%d; __i%d - __direction%d != __end%d; __i%d += __direction%d) {
                __CONTEXT__.set_temporary("%s", __i%d == __start%d);
                __CONTEXT__.set_temporary("%s", __i%d == __end%d);
                __CONTEXT__.set_temporary("%s", __i%d);
:>>
;
            code = Rosella.String.sprintf(code, gen_idx, gen_idx, gen_idx, gen_idx, gen_idx, gen_idx, gen_idx, gen_idx, gen_idx, gen_idx, FIRST_VARNAME, gen_idx, gen_idx, LAST_VARNAME, gen_idx, gen_idx, IDX_VARNAME);
            push(builder, code);
            self.__to_winxed_children(engine, builder);
            push(builder, "            }\n        }\n");
        }, IDX_VARNAME, FIRST_VARNAME, LAST_VARNAME);
    }

    // Get a value from one of the operands.
    function __get_value(string key, var ctx)
    {
        int numeric = Rosella.String.get_character_class("numeric");
        if (Rosella.String.first_not_cclass(key, numeric) == -1)
            return int(key);
        return int(ctx.get_value(key));
    }
}
