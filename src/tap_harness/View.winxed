namespace Rosella { namespace Harness
{
    // View class for the harness. Displays information from the Results
    // object to the user.
    class View
    {
        var result;
        var line_length;

        function debug(string line) { say("# " + string(line)); }

        function prepare_run(var result, int line_length)
        {
            self.result = result;
            self.line_length = line_length;
        }

        function start_test(var test)
        {
            string filename = test.filename();
            int len = length(filename);
            int line_length = self.line_length;
            int diff = line_length - len + 3;
            string elipses = "";
            ${ repeat elipses, '.', diff };
            print(sprintf("%s %s ", [filename, elipses]));
        }

        function end_test(var test)
        {
            if (test.result != null)
                say("not ok (" + string(test.result) + ")");
            else
                say("ok");
            //if (self.errdetails != null)
            //{
                // TODO: Break this out into a separate reporting class
            //    say("# " + string(self.errdetails));
            //}
        }

        function show_results()
        {
            self.show_results_summary();
            self.show_error_detail();
            self.show_failure_detail();
        }

        function show_results_summary()
        {
            var aborted_files = self.result.aborted_test_files();
            int num_aborted   = int(aborted_files);
            int total_files   = self.result.num_test_files();
            int passed_tests  = self.result.num_passed_tests();
            int failed_tests  = self.result.num_failed_tests();
            var failed_files  = self.result.failed_test_files();
            int num_failed_files = int(failed_files);

            if (num_aborted || failed_tests) {
                say("Result: FAILED");
                say("\tPassed " + passed_tests + " tests in " + total_files + " files");
                if (num_aborted)
                    say("\tFailed " + num_aborted + " files due to premature exit");
                if (failed_tests)
                    say("\tFailed " + failed_tests + " tests in " + num_failed_files + " files");
                say("");
            } else {
                say("Result: PASSED");
                say("\tPassed " + passed_tests + " tests in " + total_files + " files");
            }
        }

        function show_error_detail()
        {
            int failed_tests = self.result.num_failed_tests();
            if (failed_tests == 0)
                return;

            var failed_files = self.result.failed_test_files();
            int num_failed_files = int(failed_files);
            say("\tList of failed tests by file:");
            for (var test in failed_files) {
                say("\t\t" + test.filename());
                for (var failure in test.list_of_failures())
                    say("\t\t\t" + failure);
            }
        }

        function show_failure_detail()
        {
            var aborted_files = self.result.aborted_test_files();
            int num_aborted = int(aborted_files);
            if (num_aborted) {
                say("\tList of files with premature exits:");
                for (var file in aborted_files) {
                    // TODO: Should record and output error codes or other
                    //       error info. Display some diagnostics here
                    say("\t\t" + string(file.filename()));
                }
            }
        }
    }
}}
