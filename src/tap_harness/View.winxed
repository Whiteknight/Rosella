namespace Rosella { namespace Harness
{
    // View class for the harness. Displays information from the Results
    // object to the user.
    class View
    {
        var test_run;
        var line_length;

        function debug(string line) { say("# " + string(line)); }

        function prepare_run(var test_run, int line_length)
        {
            self.test_run = test_run;
            self.line_length = line_length;
        }

        function start_test(var test)
        {
            string filename = test.filename();
            int len = length(filename);
            int line_length = self.line_length;
            int diff = line_length - len + 3;
            string elipses = "";
            ${ repeat elipses, '.', diff };
            print(sprintf("%s %s ", [filename, elipses]));
        }

        function end_test(var test)
        {
            if (test.result != null)
                say("not ok (" + string(test.result) + ")");
            else
                say("ok");
            string error_details = test.error_details();
            if (error_details != null)
                say("# " + error_details);
        }

        function show_results()
        {
            self.show_results_summary();
            self.show_error_detail();
            self.show_failure_detail();
        }

        function show_results_summary()
        {
            int total_files         = self.test_run.num_files();
            int num_passed_files    = self.test_run.num_files_by_status("PASSED");
            int num_passed_tests    = self.test_run.num_tests_by_status("PASSED");
            int num_failed_files    = self.test_run.num_files_by_status("FAILED");
            int num_aborted_files   = self.test_run.num_files_by_status("ABORTED");

            if (num_aborted_files || num_failed_files) {
                say("Result: FAILED");
                say(sprintf("\tPassed %d tests in %d files", [num_passed_tests, total_files]));

                var failed_files  = self.test_run.files_by_status("FAILED");
                int num_failed_tests = self.test_run.num_tests_by_status("FAILED");

                if (num_aborted_files)
                    say(sprintf("\tFailed %d files due to premature exit", [num_aborted_files]));
                if (num_failed_tests)
                    say(sprintf("\tFailed %d tests in %d files", [num_failed_tests, num_failed_files]));
                say("");
            } else {
                say("Result: PASSED");
                say(sprintf("\tPassed %d tests in %d files", [num_passed_tests, total_files]));
            }
        }

        function show_error_detail()
        {
            int num_failed_tests = self.test_run.num_tests_by_status("FAILED");
            if (num_failed_tests == 0)
                return;

            var failed_files = self.test_run.files_by_status("FAILED");
            int num_failed_files = self.test_run.num_files_by_status("FAILED");

            say("\tList of failed tests by file:");
            for (var test in failed_files) {
                say(sprintf("\t\t%s", [test.filename()]));
                for (var failure in test.list_of_failures())
                    say(sprintf("\t\t\t%s", [failure]));
            }
        }

        function show_failure_detail()
        {
            int num_aborted_files = self.test_run.num_files_by_status("ABORTED");
            var aborted_files     = self.test_run.files_by_status("ABORTED");

            if (num_aborted_files) {
                say("\tList of files with premature exits:");
                for (var file in aborted_files) {
                    // TODO: Should record and output error codes or other
                    //       error info. Display some diagnostics here
                    say(sprintf("\t\t%s", [file.filename()]));
                }
            }
        }
    }
}}
