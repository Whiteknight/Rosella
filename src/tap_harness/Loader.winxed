namespace Rosella { namespace Harness
{
    class Loader
    {
        var os;
        var files;
        var test_proto;

        function BUILD(var proto)
        {
            self.test_proto = proto;
            self.files = [];
            loadlib("os");
            self.os = new 'OS';
        }

        function max_filename_length()
        {
            int max = 0;
            for (string file in self.files) {
                int len = length(file);
                if (len > max)
                    max = len;
            }
            return max;
        }

        function prepare_new_run()
        {
            self.files = [];
        }

        function get_dir_contents(string path, int recurse, var contents)
        {
            int STAT_ISREG = 0x8000;
            int STAT_ISDIR = 0x4000;
            var contents_raw = self.os.readdir(path);

            for (string file in contents_raw) {
                string entry = path + "/" + file;
                var stat = self.os.stat(entry);
                int mode = stat[2];
                int isdir = 0;
                ${ band isdir, mode, STAT_ISDIR };
                int isfile = 0;
                ${ band isfile, mode, STAT_ISREG };
                if (file[0] == ".")
                    continue;
                if (isfile == STAT_ISREG && self.is_test(entry))
                    push(contents, entry);

                if (recurse && isdir == STAT_ISDIR)
                    self.get_dir_contents(entry, recurse, contents);
            }
        }

        # Determine if the file is a valid test. Probably best to override this in
        # a subclass if you need different behaviors.
        # TODO: Maybe read the shebang preamble to make sure we have the
        #       correct type of file.
        function is_test(string filename)
        {
            if (indexof(filename, ".t") == -1)
                return 0;
            if (indexof(filename, ".OLD") != -1)
                return 0;
            return 1;
        }

        function get_tests_from_dirs(var dirs, int recurse)
        {
            var tests = [];
            for (string dir in dirs) {
                var rawfiles = [];
                self.get_dir_contents(dir, recurse, rawfiles);
                for (string filename in rawfiles) {
                    var testobj = self.make_test_obj(filename);
                    push(tests, testobj);
                    push(self.files, filename);
                }
            }
            return tests;
        }

        function get_tests_from_files(var filenames)
        {
            var tests = [];
            for (string filename in filenames) {
                var testobj = self.make_test_obj(filename);
                push(tests, testobj);
                push(self.files, filename);
            }
            return tests;
        }


        function make_test_obj(string filename)
        {
            using Rosella.build;
            return build(self.test_proto, filename);
        }
    }
}}

