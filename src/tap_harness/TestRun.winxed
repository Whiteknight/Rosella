namespace Rosella { namespace Harness
{
    class TestRun
    {
        var tests;
        var results;

        function BUILD()
        {
            using Rosella.build;
            self.tests = [];
            var test_results_class = class Rosella.Harness.ResultSet;
            self.results = {
                "ABORTED"    : build(test_results_class),
                "PASSED"     : build(test_results_class),
                "FAILED"     : build(test_results_class),
                "EMPTY"      : build(test_results_class),
                "TODOPASSED" : build(test_results_class),
                "TODOFAILED" : build(test_results_class)
            };
        }

        function add(var test)
        {
            push(self.tests, test);
        }

        function add_range(var tests)
        {
            for (var test in tests)
                push(self.tests, test);
        }

        function clear()
        {
            self.tests = [];
        }

        function tests()
        {
            return self.tests;
        }

        function run(var test, int run_inline)
        {
            test.run(run_inline);
            string status = test.status();
            self.results[status].add_file();
            self.results["FAILED"].add_tests(test.failed_tests());
            self.results["PASSED"].add_tests(test.passed_tests());
            int todo_passed = test.todo_passed_tests();
            self.results["TODOPASSED"].add_tests(todo_passed);
            if (todo_passed > 0)
                self.results["TODOPASSED"].add_file();
        }

        function max_file_length(int start_length)
        {
            int max = start_length;
            for (var test in self.tests) {
                int len = length(test.filename());
                if (len > max)
                    max = len;
            }
            return max;
        }

        // Returns 1 if the run was a success, 0 otherwise
        function run_was_success()
        {
            int num_aborted_files = self.num_files_by_status("ABORTED");
            int num_failed_files = self.num_files_by_status("FAILED");
            if (num_aborted_files == 0 && num_failed_files == 0)
                return 1;
            return 0;
        }

        function files_by_status(string status)
        {
            var files = [];
            for (var test in self.tests) {
                if (test.status() == status)
                    push(files, test);
            }
            return files;
        }

        function num_files_by_status(string status)
        {
            return self.results[status].num_files;
        }

        function num_tests_by_status(string status)
        {
            return self.results[status].num_tests;
        }

        function num_files()
        {
            return int(self.tests);
        }
    }
}}
