namespace Rosella
{
    /* TAP Harness class. Contains a list of TestFile objects and executes
       each in a loop. The Harness keeps statistics about the test run, and
       passes them off to other routines for display and analysis.

       Harness is the Controller object in the MVC system. Harness::View is
       the view which displays to the user, and Harness::Results is the model.
    */
    class Harness
    {
        var test_run;
        var loaders;

        // Constructor. Set up a basic set of loaders.
        function BUILD()
        {
            using Rosella.build;

            self.loaders = {};
            var loader_class = class Rosella.Harness.Loader;
            self.loaders["NQP"] = build(loader_class, class Rosella.Harness.TestFile.NQP);
            self.loaders["PIR"] = build(loader_class, class Rosella.Harness.TestFile.PIR);
            self.loaders["Winxed"] = build(loader_class, class Rosella.Harness.TestFile.Winxed);
            self.test_run = build(class Rosella.Harness.TestRun);
        }

        /* Routines for Adding and Managing Tests and Loaders
        */

        // Add a list of directories. Directories are searched, possibly
        // recursively, for a list of test files to run.
        function add_test_dirs(string loader, var dirs [slurpy],
                int recurse [named,optional], int has_recurse [opt_flag])
        {
            if (!has_recurse)
                recurse = 0;
            var tests = self.loaders[loader].get_tests_from_dirs(dirs, recurse);
            self.test_run.add_range(tests);
        }

        // Add an individual test file
        function add_test_files(string loader, var files [slurpy])
        {
            var tests = self.loaders[loader].get_tests_from_files(files);
            self.test_run.add_range(tests);
        }

        // Add a new loader. If a loader exists with the same name, it is
        // overwritten
        function add_test_loader(string name, var loader)
        {
            self.loaders[name] = loader;
        }

        /* Routines for Running the Harness
        */

        // Run the harness
        function run(
                var view [named,optional],        int has_view [opt_flag],
                int run_inline [named,optional],  int has_ri [opt_flag],
                int line_length [named,optional], int has_ll [opt_flag])
        {
            using Rosella.build;

            if (!has_ri)
                run_inline = 0;
            if (!has_ll)
                line_length = 0;
            if (!has_view)
                view = build(class Rosella.Harness.View);
            int max_length = self.test_run.max_file_length(line_length);
            view.prepare_run(self.test_run, max_length);
            return self.run_internal(view, run_inline);
        }

        function run_internal(var view, int run_inline)
        {
            for (var test in self.test_run.tests()) {
                view.start_test(test);
                self.test_run.run(test, run_inline);
                view.end_test(test);
            }
            view.show_results();
            return self.test_run.run_was_success();
        }
    }
}
