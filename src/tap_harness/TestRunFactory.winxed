namespace Rosella { namespace Harness
{
    class TestRunFactory : Rosella.ObjectFactory
    {
        var loaders;
        var tests;

        function BUILD()
        {
            using Rosella.build;
            self.target_type = class Rosella.Harness.TestRun;
            var loader_class = class Rosella.Harness.Loader;
            self.loaders = {};
            self.loaders["NQP"] = build(loader_class, class Rosella.Harness.TestFile.NQP);
            self.loaders["PIR"] = build(loader_class, class Rosella.Harness.TestFile.PIR);
            self.loaders["Winxed"] = build(loader_class, class Rosella.Harness.TestFile.Winxed);
            self.tests = [];
        }

        function create_typed(var testrun_type, var p [slurpy], var n [slurpy,named])
        {
            using Rosella.build;
            var testrun = build(testrun_type, self.tests);
            self.tests = [];
            return testrun;
        }

        /* Routines for Adding and Managing Tests and Loaders
        */

        // Add a list of directories. Directories are searched, possibly
        // recursively, for a list of test files to run.
        function add_test_dirs(string loader, var dirs [slurpy],
                int recurse [named,optional], int has_recurse [opt_flag])
        {
            if (!has_recurse)
                recurse = 0;
            var tests = self.loaders[loader].get_tests_from_dirs(dirs, recurse);
            self.add_tests(tests);
        }

        // Add an individual test file
        function add_test_files(string loader, var files [slurpy])
        {
            var tests = self.loaders[loader].get_tests_from_files(files);
            self.add_tests(tests);
        }

        function add_tests(var tests)
        {
            for (var test in tests)
                push(self.tests, test);
        }

        // Add a new loader. If a loader exists with the same name, it is
        // overwritten
        function add_loader(string name, var loader)
        {
            self.loaders[name] = loader;
        }

        function add_loader_for_type(string name, var testfile_type)
        {
            using Rosella.build;
            self.loaders[name] = build(class Rosella.Harness.Loader, testfile_type);
        }
    }
}}
