$include "src/date/Includes.winxed";

namespace Rosella.Date.Doomsday
{
    // doomsdays[N] is the day of month N that falls on a doomsday.
    const string GET_DOOMSDAY_ARRAY = "Rosella.Date.Doomsday.get_doomsday_array";
    function get_doomsday_array()
    {
        return Rosella.Globals.autoget_global(GET_DOOMSDAY_ARRAY,
            function() {
                int doomsdays[] = [ 3, 28, 7, 4, 9, 6, 11, 8, 5, 10, 7, 12 ];
                return doomsdays;
            }
        );
    }
}

/* Doomsday Algorithm
    This class implements the Doomsday Algorithm, a fast, computationally-simple
    method
    to determine the day of week of any day.
*/
class Rosella.Date.Doomsday
{
    // Constructor
    function Doomsday() { }

    // Get the day of the week for the give Date. Return an integer
    function get_day(int year, int month, int day)
    {
        if (year < 1)
            Rosella.Error.error("Bad year");
        if (month < 1 || month > 12)
            Rosella.Error.error("Bad month");
        if (day < 1 || day > 31)
            Rosella.Error.error("Bad day");

        var doomsdays = Rosella.Date.Doomsday.get_doomsday_array();

        // Determine the doomsday for this year.
        int dday = self.__get_dday(year);

        int leap = Rosella.Date.is_leap_year(year);
        int anchor = doomsdays[month - 1];
        if (leap && month <= 2)
            anchor += 1; // the anchor date for jan/feb is +1 for leap years.

        while (day < anchor)
            day += 7; // skip forward weeks if necessary.
        while (day >= (anchor + 7))
            day -= 7; // skip backward weeks if necessary.

        // At this point day is during the week of anchor.
        __ASSERT__(anchor <= day < anchor + 7);

        int dayoffset = day - anchor;
        day = (dday + dayoffset + 1) % 7;

        return day;
    }

    // Get the Doomsday for the given year
    function __get_dday(int year)
    {
        return (2 + year + (year / 4) - (year / 100) + (year / 400)) % 7;
    }
}
