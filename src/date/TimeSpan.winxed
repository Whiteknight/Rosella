$include "src/date/Includes.winxed";

/* Time Span Class
    These objects represent a length of time without defined start and end
    times
*/
class Rosella.Date.TimeSpan
{
    const int IDX_SECONDS = 0;
    const int IDX_MINUTES = 1;
    const int IDX_HOURS = 2;
    const int IDX_DAYS = 3;
    var parts;

    // 2-date Constructor. Take two Date objects and calculate the length of
    // time between them
    function TimeSpan(var start, var end)
    {
        if (!(start instanceof Rosella.Date && end instanceof Rosella.Date))
            Rosella.Error.error("Arguments must be Date objects. Have %s and %s", typeof(start), typeof(end));
        if (start instanceof Rosella.Date.SpecialDate || end instanceof Rosella.Date.SpecialDate)
            Rosella.Error.error("Arguments may not be SpecialDate objects. Have %s and %s", typeof(start), typeof(end));
        if (start >= end)
            Rosella.Error.error("Start Date must be before End Date (%s >= %s)", start, end);

        int day_diff = self.__days_base(end) - self.__days_base(start);
        int sec_diff = self.__secs_base(end) - self.__secs_base(start);
        if (sec_diff < 0) {
            day_diff = day_diff - 1;
            sec_diff = sec_diff + (24 * 60 * 60);
        }

        int secs = sec_diff % 60;
        sec_diff = sec_diff / 60;
        int mins = sec_diff % 60;
        sec_diff = sec_diff / 60;
        int hours = sec_diff % 24;
        sec_diff = sec_diff / 24;
        self.TimeSpan(day_diff, hours, mins, secs);
    }

    // Constructor taking a number of seconds
    function TimeSpan(int diff)
    {
        int secs = diff % 60;
        diff = diff / 60;
        int mins = diff % 60;
        diff = diff / 60;
        int hours = diff % 24;
        diff = diff / 24;
        int days = diff;

        self.TimeSpan(days, hours, mins, secs);
    }

    // Constructor taking day, hour, minute and second
    function TimeSpan(int days, int hours, int min, int sec)
    {
        int parts[] = [sec, min, hours, days];
        self.parts = parts;
    }

    // Create a new TimeSpan the same as this one
    function copy()
    {
        return new Rosella.Date.TimeSpan(int(self.days()), int(self.hours()), int(self.minutes()), int(self.seconds()));
    }

    // Get the number of seconds
    function seconds() { return self.parts[IDX_SECONDS]; }

    // Get the number of minutes
    function minutes() { return self.parts[IDX_MINUTES]; }

    // Get the number of hours
    function hours() { return self.parts[IDX_HOURS]; }

    // Get the number of days
    function days() { return self.parts[IDX_DAYS]; }

    // Get the length as a total number of seconds
    function to_total_seconds()
    {
        return self.seconds() +
            60 * (self.minutes() +
                60 * (self.hours() +
                    24 * self.days()
                )
            );
    }

    // Add a second TimeSpan and get a new one
    function add(var ts)
    {
        if (ts instanceof Rosella.Date.TimeSpan) {
            int diff = self.to_total_seconds() + ts.to_total_seconds();
            return new Rosella.Date.TimeSpan(diff);
        }
        Rosella.Error.error("Cannot add %s to TimeSpan", typeof(ts));
    }

    // Subtract a timespan from this one, return the absolute difference as a
    // new TimeSpan
    function subtract(var ts)
    {
        if (ts instanceof Rosella.Date.TimeSpan) {
            int a = self.to_total_seconds();
            int b = ts.to_total_seconds();
            return new TimeSpan(abs_i(a - b));
        }
        Rosella.Error.error("Cannot subtract %s from TimeSpan", typeof(ts));
    }

    // Format the Date into a string
    function format_string(string f)
    {
        if (f == null || f == "")
            return string(self);
        return self.get_string_formatter().format(self, f);
    }

    // Get the string formatter to use. Use the default formatter. Subclasses
    // can use something else
    function get_string_formatter()
    {
        return Rosella.Date.default_timespan_formatter();
    }

    // Get a string represetation
    function to_string()
    {
        return self.get_string_formatter().format_default(self);
    }

    /* Vtables
    */

    function get_string[vtable]() { return self.to_string(); }

    function clone[vtable]() { return self.copy(); }

    /* Private Helper Methods
    */

    function __days_base(var d)
    {
        int year = d.year();
        int base_year = year - (year % 4);

        int year_d = 0;
        for (int i = 4; i < base_year; i += 4) {
            year_d += 4 * 365;
            if ((i % 100 != 0) || (i % 400 == 0))
                year_d += 1;
        }
        for (int i = base_year + 1; i < year; i++) {
            year_d += 365;
            if (Rosella.Date.is_leap_year(i))
                year_d += 1;
        }

        int base = year_d + d.day_of_year();
        return base;
    }

    function __secs_base(var d)
    {
        return d.seconds() +
            60 * (d.minutes() +
                60 * d.hours()
            );
    }
}
