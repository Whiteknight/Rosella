/* Rosella Date Library
    The Date library provides utilities for working with dates and times. It is
    not guaranteed to produce perfectly accurate results in all cases for all
    operations on date and time. It is considered "good enough" for most casual
    use and is open to iterative improvements and bugfixes. It specifically
    omits certain complexity such as timezones and other details that would be
    impossible to track in a library like this.

    This namespace implements several utility routines and provides access to a
    few global singletons used by the library.
*/
namespace Rosella.Date
{
    // Get the day of the week as an integer from 0 (Sunday) to 6 (Saturday)
    function get_day_of_week(int year, int month, int day)
    {
        return default_day_calculator().get_day(year, month, day);
    }

    // Get the day of the week as the string name
    function get_day_of_week_name(int year, int month, int day)
    {
        int dow = default_day_calculator().get_day(year, month, day);
        return get_day_of_week_name(dow);
    }

    // Get the day of week name given the integer index of the day (0=Sunday,
    // 6=Saturday)
    function get_day_of_week_name(int day)
    {
        if (day < 0 || day > 6)
            Rosella.Error.error("Bad day %d. Must be 0 (Sunday) to 6 (Saturday)", day);

        return all_week_days()[day];
    }

    // Get a Date object representing the current instant
    function now(int is_local = true)
    {
        return new Rosella.Date(time_ticks(), is_local);
    }

    // Get a Date object representing the minimum representable date. This
    // object is guaranteed to always compare lower than all other dates.
    function min()
    {
        const string DATE_MINIMUM = "Rosella.Date.min";
        return Rosella.Globals.autoget_global(DATE_MINIMUM,
            function() { return new Rosella.Date.SpecialDate.Minimum(); }
        );
    }

    // Get a Date object representing the maximum representable date. This
    // object is guaranteed to always compare higher than all other dates.
    function max()
    {
        const string DATE_MAXIMUM = "Rosella.Date.max";
        return Rosella.Globals.autoget_global(DATE_MAXIMUM,
            function() { return new Rosella.Date.SpecialDate.Maximum(); }
        );
    }

    // Get an array with the names of all months in the calendar year
    function all_months()
    {
        const string ALL_MONTHS_KEY = "Rosella.Date.all_months";
        return Rosella.Globals.autoget_global(ALL_MONTHS_KEY,
            function() {
                string months[] = ["January", "February", "March", "April", "May", "June",
                                   "July", "August", "September", "October", "November",
                                   "December"];
                return months;
            }
        );
    }

    // Get an array with the abbreviated names of all months in the calendar year
    function all_months_short()
    {
        const string ALL_MONTHS_SHORT_KEY = "Rosella.Date.all_months_short";
        return Rosella.Globals.autoget_global(ALL_MONTHS_SHORT_KEY,
            function() {
                string months[] = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
                                   "Oct", "Nov", "Dec"];
                return months;
            }
        );
    }

    // Get an array containing the names of all days of the week
    function all_week_days()
    {
        const string ALL_WEEK_DAYS_KEY = "Rosella.Date.all_week_days";
        return Rosella.Globals.autoget_global(ALL_WEEK_DAYS_KEY,
            function() {
                string days[] = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                return days;
            }
        );
    }

    // Get an array containing counts of the number of days in each month of the
    // given year. This changes depending on whether the given year is a leap
    // year or not.
    function month_day_counts(int year)
    {
        int leap_year = Rosella.Date.is_leap_year(year);
        if (leap_year) {
            const string DAY_COUNTS_LEAP = "Rosella.Date.month_day_counts_leap";
            return Rosella.Globals.autoget_global(DAY_COUNTS_LEAP,
                function() {
                    int days[] = [31, 29, 31, 30, 30, 31, 31, 31, 30, 31, 30, 31];
                    return days;
                }
            );
        } else {
            const string DAY_COUNTS_NORMAL = "Rosella.Date.month_day_counts";
            return Rosella.Globals.autoget_global(DAY_COUNTS_NORMAL,
                function() {
                    int days[] = [31, 28, 31, 30, 30, 31, 31, 31, 30, 31, 30, 31];
                    return days;
                }
            );
        }
    }

    // Determine if the given year is a leap year
    function is_leap_year(int year)
    {
        if (year % 4 != 0)
            return false;
        if (year % 400 == 0)
            return true;
        if (year % 100 == 0)
            return false;
        return true;
    }

    // Get the default Date formatter object
    function default_date_formatter()
    {
        return Rosella.StringFormatter.autoget_type_formatter(class Rosella.Date,
            function() { return new Rosella.Date.DateFormatter(); }
        );
    }

    // Get the default TimeSpan formatter object
    function default_timespan_formatter()
    {
        return Rosella.StringFormatter.autoget_type_formatter(class Rosella.Date.TimeSpan,
            function() { return new Rosella.Date.TimeSpanFormatter(); }
        );
    }

    // Get a calculator object for calculating day-of-week
    const string DEFAULT_DAY_CALCULATOR = "Rosella.Date.default_day_calculator";
    function default_day_calculator()
    {
        return Rosella.Globals.autoget_global(DEFAULT_DAY_CALCULATOR,
            function() { return new Rosella.Date.Doomsday(); }
        );
    }

    function set_day_calculator(var calc)
    {
        Rosella.Globals.register_global(DEFAULT_DAY_CALCULATOR, calc);
    }
}

/* Rosella Date Object
    This is the basic object which represents a Date/Time in Rosella. It stores
    the necessary data to represent the date, and implements a few basic
    operations to do on dates.

    Date objects are immutable. Once created, you cannot alter the date/time
    it represents.

    Dates start at year 1. There is no year zero and BC years are not supported.
    This may change in the future.
*/
class Rosella.Date
{
    var time_array;
    var time_raw;

    // Construct a new Date given an integer system-epoch time (like from the
    // time_i opcode).
    function Date(int sys_ms, is_local)
    {
        if (is_local)
            self.time_array = decodelocaltime(sys_ms);
        else
            self.time_array = decodetime(sys_ms);
        self.time_raw = sys_ms;
    }

    // Construct a new Date given a year, month and day
    function Date(int year, int month, int day)
    {
        if (year < 1 || year > 9999)
            Rosella.Error.error("Bad year %d. Must be in the range [1, 9999]", year);
        if (month < 1 || month > 12)
            Rosella.Error.error("Bad month %d. Must be in the range [1, 12]", month);
        var month_day_counts = Rosella.Date.month_day_counts(year);
        int days_in_month = month_day_counts[month - 1];
        if (day < 1 || day > days_in_month)
            Rosella.Error.error("Bad day of month %d. For month %d must be in range [1, %d]", day, month, days_in_month);
        int day_of_year = day - 1;
        for (int i = 0; i < month - 1; i++)
            day_of_year += int(month_day_counts[i]);
        int weekday = Rosella.Date.get_day_of_week(year, month, day);

        int raw[] = [0, 0, 0, day, month, year, weekday, day_of_year, 0];
        self.time_array = raw;
        self.time_raw = -1;
    }

    function Date(var year, var month, var day)
    {
        self.Date(int(year), int(month), int(day));
    }

    // Construct a complete Date/Time with all date components.
    function Date(int year, int month, int day, int hour, int min, int s)
    {
        if (s < 0 || s > 59)
            Rosella.Error.error("Invalid number of seconds %d", s);
        if (min < 0 || min > 59)
            Rosella.Error.error("Invalid number of minutes %d", min);
        if (hour < 0 || hour > 23)
            Rosella.Error.error("Invalid number of hours %d", hour);

        self.Date(year, month, day);
        var time = self.time_array;
        time[0] = s;
        time[1] = min;
        time[2] = hour;
    }

    function Date(var year, var month, var day, var hour, var min, var s)
    {
        self.Date(int(year), int(month), int(day), int(hour), int(min), int(s));
    }

    function copy()
    {
        return new Rosella.Date(int(self.year()), int(self.month()), int(self.day()),
                                int(self.hours()), int(self.minutes()), int(self.seconds()));
    }

    /* Seconds
    */

    // Get the number of seconds
    function seconds()
    {
        return self.time_array[TM_SEC];
    }

    // Add the number of seconds to the date and return a new Date
    function add_seconds(int s)
    {
        var n = clone(self);
        n.__add_seconds(s);
        return n;
    }

    // Internal second-adding helper
    function __add_seconds(int s)
    {
        int m = 0;
        s += int(self.seconds());
        if (s >= 60 || s <= -60) {
            m = int(s / 60);
            s = s % 60;
        }
        self.time_array[TM_SEC] = s;
        if (m != 0)
            self.__add_minutes(m);
    }

    /* Minutes
    */

    // Get the number of minutes
    function minutes()
    {
        return self.time_array[TM_MIN];
    }

    // Add the number of minutes and return a new Date
    function add_minutes(int m)
    {
        var n = clone(self);
        n.__add_minutes(m);
        return n;
    }

    // Internal minute-adding helper
    function __add_minutes(int m)
    {
        int h = 0;
        m += int(self.minutes());
        if (m >= 60 || m <= -60) {
            h = int(m / 60);
            m = m % 60;
        }
        self.time_array[TM_MIN] = m;
        if (h != 0)
            self.__add_hours(h);
    }

    /* Hours
    */

    // get the number of hours
    function hours()
    {
        return self.time_array[TM_HOUR];
    }

    // Add the number of hours and return a new Date
    function add_hours(int h)
    {
        var n = clone(self);
        n.__add_hours(h);
        return n;
    }

    // Internal hour-adding helper
    function __add_hours(int h)
    {
        int d = 0;
        h += int(self.hours());
        if (h >= 24 || h <= -24) {
            d = int(h / 24);
            h = h % 24;
        }
        self.time_array[TM_HOUR] = h;
        if (d != 0)
            self.__add_days(d);
    }

    /* Days
    */

    // Get the number of Days
    function day()
    {
        return self.time_array[TM_MDAY];
    }

    // Add days to the date and return a new Date
    function add_days(int d)
    {
        var n = clone(self);
        n.__add_days(d);
        return n;
    }

    // Internal day-adding helper
    function __add_days(int d)
    {
        d += int(self.day());
        int cur_month = self.month() - 1;
        int cur_year = int(self.year());
        var counts = Rosella.Date.month_day_counts(cur_year);
        int days_this_month;
        int m = 0;
        if (d >= 0) {
            days_this_month = counts[cur_month];
            while (d > days_this_month) {
                d -= days_this_month;
                m++;
                cur_month = (cur_month + 1) % 12;
                if (cur_month == 0) {
                    cur_year++;
                    counts = Rosella.Date.month_day_counts(cur_year);
                }
                days_this_month = counts[cur_month];
            }
        } else {
            cur_month = (cur_month - 1) % 12;
            days_this_month = counts[cur_month];
            while (d < -days_this_month) {
                d += days_this_month;
                m--;
                cur_month = (cur_month - 1) % 12;
                if (cur_month == 11) {
                    cur_year--;
                    counts = Rosella.Date.month_day_counts(cur_year);
                }
                days_this_month = counts[cur_month];
            }
            if (d < 0)
                d = days_this_month + d;
        }
        self.time_array[TM_MDAY] = d;
        if (m != 0)
            self.__add_months(m);
        self.time_array[TM_WDAY] = Rosella.Date.get_day_of_week(self.year(), self.month(), self.day());
    }

    function day_of_year()
    {
        return self.time_array[TM_YDAY];
    }

    /* Week-Day
    */

    // Get the week-day (integer)
    function week_day()
    {
        return self.time_array[TM_WDAY];
    }

    // Get the week-day (string name)
    function week_day_name()
    {
        return Rosella.Date.all_week_days()[int(self.week_day())];
    }

    /* Month
    */

    // Get the month
    function month()
    {
        return self.time_array[TM_MON];
    }

    // Add months and return a new Date
    function add_months(int m)
    {
        var n = clone(self);
        n.__add_months(m);
        return n;
    }

    // Internal month-adding helper
    function __add_months(int m)
    {
        int y = 0;
        m += int(self.time_array[TM_MON]) - 1;
        if (m >= 12 || m <= -12) {
            y = int(m / 12);
            m = m % 12;
        }
        self.time_array[TM_MON] = m + 1;
        if (y != 0)
            self.__add_years(y);
    }

    // Get the name of the month
    function month_name()
    {
        return Rosella.Date.all_months()[int(self.month() - 1)];
    }

    /* Year
    */

    // Get the year
    function year()
    {
        return self.time_array[TM_YEAR];
    }

    // Add years. Return a new date
    function add_years(int y)
    {
        var n = clone(self);
        n.__add_years(y);
        return n;
    }

    // Internal year-adding helper
    function __add_years(int y)
    {
        self.time_array[TM_YEAR] = int(self.year()) + y;
    }

    /* Miscellaneous Methods
    */

    // Get the raw time value, if any
    function raw_time()
    {
        return self.time_raw;
    }

    // Get the Date portion only (not the hour/minute/second)
    function date()
    {
        return new Rosella.Date(int(self.year()), int(self.month()), int(self.day()),
                                0, 0, 0);
    }

    // Get the Time portion only (not the year/month/day)
    function time()
    {
        return new Rosella.Date(1, 1, 1,
            int(self.hours()), int(self.minutes()), int(self.seconds()));
    }

    /* String-Related Methods
    */

    // Format the Date into a string
    function format_string(string f)
    {
        if (f == null || f == "")
            return string(self);
        return self.get_string_formatter().format(self, f);
    }

    // Get the string formatter to use
    function get_string_formatter()
    {
        return Rosella.Date.default_date_formatter();
    }

    function to_string()
    {
        return self.get_string_formatter().format_default(self);
    }

    /* Operations and TimeSpans
    */

    // Subtract a TimeSpan from this date, to get a new Date.
    function subtract_span(var d)
    {
        if (d instanceof Rosella.Date.TimeSpan) {
            var next = clone(self);
            next.__add_seconds(-ts.seconds());
            next.__add_minutes(-ts.minutes());
            next.__add_hours(-ts.hours());
            next.__add_days(-ts.days());
            return next;
        }
        Rosella.Error.error("Unknown type in Date.substract_span: %s", typeof(d));
    }

    function diff(var d)
    {
        if (d instanceof Rosella.Date) {
            if (self > d)
                return new Rosella.Date.TimeSpan(d, self);
            else
                return new Rosella.Date.TimeSpan(self, d);
        }
        Rosella.Error.error("Unknown type in Date.diff: %s", typeof(d));
    }

    // Add a TimeSpan
    function add_span(var ts)
    {
        if (ts instanceof Rosella.Date.TimeSpan) {
            var next = clone(self);
            next.__add_seconds(ts.seconds());
            next.__add_minutes(ts.minutes());
            next.__add_hours(ts.hours());
            next.__add_days(ts.days());
            return next;
        }
        Rosella.Error.error("Unknown type in Date.add: %s", typeof(ts));
    }

    // Determine if two Date objects are equal
    function equals(var d)
    {
        if (!(d instanceof Rosella.Date))
            return false;
        if (d instanceof Rosella.Date.SpecialDate)
            return d.equals(self);
        var a = self.time_array;
        var b = d.time_array;
        for (int i = 0; i < 6; i++) {
            if (a[i] != b[i])
                return false;
        }
        return true;
    }

    function compare_to(var d)
    {
        if (!(d instanceof Rosella.Date))
            Rosella.Error.invalid("Cannot compare Date and non-Date PMC");
        if (d instanceof Rosella.Date.SpecialDate)
            return -d.compare_to(self);
        var a = self.time_array;
        var b = d.time_array;
        for (int i = 5; i >= 0; i--) {
            int _a = a[i];
            int _b = b[i];
            if (_a != _b)
                return _a > _b ? 1 : -1;
        }
        return 0;
    }

    /* Vtables
    */

    // Clone the date object
    function clone[vtable]() { return self.copy(); }

    // Get a string representation using a default format "yyyy-MM-dd hh:mm:ss"
    function get_string[vtable]() { return self.to_string(); }

    // Determine equality between Dates
    function is_equal[vtable](var d) { return self.equals(d); }

    // Compare two Dates
    function cmp[vtable](var d) { return self.compare_to(d); }

    function add[vtable](var d) { return self.add_span(d); }

    function subtract[vtable](var d) { return self.subtract_span(d); }
}
