function main[main]()
{
    load_bytecode("rosella/memoize.pbc");

    count_time("10,000 calls with non-proxy memoizer", function() {
        using Rosella.Memoize.memoize;
        using static add_one;
        var memo_add_one = memoize(add_one);

        int x = 5000;
        for (int i = 0; i < 10000; i++)
            x = memo_add_one(x);
        say("final value: " + string(x));
    });

    count_time("10,000 calls with proxy memoizer", function() {
        using static add_one;
        using Rosella.build;
        var factory = build(class Rosella.Memoize.Factory);
        var memo_add_one = factory.create(add_one);

        int x = 5000;
        for (int i = 0; i < 10000; i++)
            x = memo_add_one(x);
        say("final value: " + string(x));
    });
}

function count_time(string description, var code)
{
    say(sprintf("Starting %s", [description]));
    float starttime = floattime();
    code();
    float endtime = floattime();
    say(sprintf("Total time: %fs\n", [endtime - starttime]));
}

function add_one(int i) {
    return i + 1;
}
