using extern "io_ops";

function main[main](argv) {
    setup_distutils();
    var rosella = {
        "name"             : 'Rosella',
        "abstract"         : 'Utilities Library for Parrot',
        "authority"        : 'http://github.com/Whiteknight',
        "copyright_holder" : 'Andrew Whitworth',
        "keywords"         : ["test", "tap", "xunit", "event", "container", "dependency injection"],
        "license_type"     : 'Artistic License 2.0',
        "license_uri"      : 'http://www.perlfoundation.org/artistic_license_2_0',
        "checkout_uri"     : 'git://github.com/Whiteknight/rosella.git',
        "browser_uri"      : 'git://github.com/Whiteknight/rosella',
        "project_uri"      : 'git://github.com/Whiteknight/rosella',
        "pir_nqp-rx"       : {},
        "pir_winxed"       : {},
        "pbc_pbc"          : {},
        "pbc_pir"          : {},
        "pir_pir"          : {},
        "inst_lib"         : []
    };

    if (argv[1] == "test")
        do_test();


    // A distutils wrapper library which adds winxed functionality.
    // A bootstrapped version is included in the repo because we need it
    // to run setup.winxed (this script). This is the only rosella library
    // which doesn't rely on Core.
    setup_winxed_lib(rosella, "winxed_distutils", "winxed/Distutils");

    // The Rosella "core" library. Does very little on its own but is
    // required by other libraries in the sequence
    setup_winxed_lib(rosella, "core",
        "core/Rosella",
        "core/Error",
        "core/ObjectFactory"
    );

    // The action library. Allows creating Action/Command objects for
    // delayed evaluation.
    setup_winxed_lib(rosella, "action",
        "include/Core",
        "action/Action",
        "action/ActionArg"
    );

    // Dependency Injection / Inversion of Control container library
    setup_winxed_lib(rosella, "container",
        "include/Core",
        "include/Action",
        "container/Container",
        "container/ItemBuilder"
    );

    // Event library. Subscript to, receive, and publish event notifications.
    setup_winxed_lib(rosella, "event",
        "include/Core",
        "include/Action",
        "event/Event",
        "event/EventManager"
    );

    // A prototype library for managing a prototype-based object system
    setup_winxed_lib(rosella, "prototype",
        "include/Core",
        "prototype/Item",
        "prototype/Manager"
    );

    // A library for working with aggregates
    setup_winxed_lib(rosella, "query",
        "include/Core",
        "query/Query",
        "query/Provider",
        "query/provider/Array",
        "query/provider/Hash",
        "query/Path"
    );

    // A proxying library for building and managing proxies
    setup_winxed_lib(rosella, "proxy",
        "include/Core",
        "proxy/Builder",
        "proxy/Controller",
        "proxy/Factory",
        "proxy/Proxy",
        "proxy/builder/MethodIntercept",
        "proxy/builder/AttributeIntercept",
        "proxy/builder/Imitate",
        "proxy/builder/InvokeIntercept"
    );

    // A testing library for writing and running unit tests.
    setup_winxed_lib(rosella, "test",
        "include/Core",
        "test/Builder",
        "test/Assertions",
        "test/Failure",
        "test/Listener",
        "test/Listener/TAP",
        "test/Loader",
        "test/Result",
        "test/Suite",
        "test/Test",
        "test/Testcase"
    );

    // A mock object library for advanced unit testing
    setup_winxed_lib(rosella, "mockobject",
        "include/Test",
        "include/Proxy",
        "mockobject/Controller",
        "mockobject/Expectation",
        "mockobject/Factory"
    );

    // A tap harness library for building easy, extensible test harnesses
    setup_winxed_lib(rosella, "tap_harness",
        "include/Core",
        "tap_harness/Harness",
        "tap_harness/Line",
        "tap_harness/Loader",
        "tap_harness/Output",
        "tap_harness/TestFile"
    );


    using WinxedDistutils.winxed_setup;
    argv.shift();
    winxed_setup(argv, rosella);
}

function setup_winxed_lib(var rosella, string name, var files [slurpy]) {
    var pbc_files = [];
    var pir_files = [];
    for (string p_path in files) {
        string path = "src/" + p_path;
        string winxed_file = path + ".winxed";
        string pir_file = path + ".pir";
        string pbc_file = path + ".pbc";
        rosella["pir_winxed"][pir_file] = winxed_file;
        rosella["pbc_pir"][pbc_file] = pir_file;
        pbc_files.push(pbc_file);
        pir_files.push(pir_file);
    }
    string pbc_lib_name = "rosella/" + name + ".pbc";
    string pir_lib_name = "rosella/" + name + ".pir";
    rosella["pbc_pbc"][pbc_lib_name] = pbc_files;
    rosella["pir_pir"][pir_lib_name] = pir_files;
    rosella["inst_lib"].push(pbc_lib_name);
}

// Load in the distutils library, which we are also responsible for
// building. If we don't have a version handy, load in the bootstrapping
// version. If we do have one built, use that instead
function setup_distutils() {
    int e = 0;
    string distutils = "src/winxed/Distutils.pir";
    ${ stat e, distutils, 0 };
    if (e)
        load_bytecode(distutils);
    else
        load_bytecode("src/winxed/DistutilsSt1.pir");
}

function do_test() {
    using get_nqp;
    string nqp = "parrot-nqp"; //get_nqp();
    string cmd = nqp + " t/harness";
    int result;
    ${ spawnw result, cmd };
    ${ exit result };
}

