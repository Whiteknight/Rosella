// Automatically generated test for NameSpace <# ns.name #>
class Test_<# ns.cleanname #>
{
    function test_sanity()
    {
        self.assert.is_true(1);
    }

    // Tests for Functions
    <$ for subobj in ns.subs $><%
        var sub = context.get_value("subobj");
        int arity = sub.arity();
        context.set_temporary("sub_arity", arity - 1);
        context.set_temporary("has_sub_arity", (arity - 1) != -1);
    %>

    function <# subobj #>()
    {
        self.status.verify("Test <# ns.name #>.<# subobj #>()");
        using <# ns.name #>.<# subobj #>;
        <$ unless has_sub_arity $>var result = <# subobj #>();<$ else $><$ repeat 0 to sub_arity $>
        var arg_<# __INDEX__ #> = null;<$ endrepeat $>
        var result = <# subobj #>(<$ repeat 0 to sub_arity $>arg_<# __INDEX__ #><$ unless __LAST__ $>, <$ endunless $><$ endrepeat $>);<$ endunless $>
    }<$ endfor $>
}

function initialize_test[anon](var context)
{
    // Set up the test suite here. Initialize the context, set up matchers
    // in the matcher factory, load prerequisites, and do other things.
    var(Rosella.load_bytecode_file)("<# ns.ownerlib #>", "load");
}

function main[main]()
{
    var core = load_packfile("rosella/core.pbc");
    var(Rosella.initialize_rosella)("test");
    using initialize_test;
    var(Rosella.Test.test)(class Test_<# ns.cleanname #>, initialize_test:[named("initialize")]);
}
