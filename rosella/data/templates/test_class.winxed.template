// Automatically generated test for Class <# class.name #>
function create_new(var p_args [slurpy], var n_args [slurpy,named])
{
    return new <# class.winxedname #>(p_args:[flat], n_args:[flat,named]);
}

class Test_<# class.cleanname #>
{
    function test_sanity()
    {
        self.assert.is_true(1);
    }

    function test_new()
    {
        // Test simple constructor. For most individual method tests, use create_new() above
        var obj = new <# class.winxedname #>();
        self.assert.not_null(obj);
        self.assert.instance_of(obj, class <# class.winxedname #>);
    }<$ for method in class.methods $><%
        string key = context.get_value("__KEY__");
        var method = context.get_value("class.methods")[key];
        // TODO: Handle MultiSub. Does not have .arity() method
        int arity = method.arity();
        context.set_temporary("method_arity", arity - 2);
        context.set_temporary("has_method_arity", (arity - 2) != -1);
    %>

    function <# __KEY__ #>()
    {
        self.status.verify("Test <# class.name #>.<# __KEY__ #>()");
        var obj = create_new();
<$ if has_method_arity $><$ repeat 0 to method_arity $>
        var arg_<# __INDEX__ #> = null;<$ endrepeat $>
        var result = obj.<# __KEY__ #>(<$ repeat 0 to method_arity $>arg_<# __INDEX__ #><$ unless __LAST__ $>, <$ endunless $><$ endrepeat $>);<$ else $>
        var result = obj.<# __KEY__ #>();<$ endif $>
    }<$ endfor $>
}

function initialize_test[anon](var context)
{
    // Set up the test suite here. Set options on the Suite, set up matchers
    // in the matcher factory, load prerequisites, and do other things.
    var(Rosella.load_bytecode_file)("<# class.ownerlib #>", "load");
}

function main[main]()
{
    var core = load_packfile("rosella/core.pbc");
    var(Rosella.initialize_rosella)("test");
    using initialize_test;
    var(Rosella.Test.test)(class Test_<# class.cleanname #>, initialize_test:[named("initialize")]);
}
