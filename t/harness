INIT {
    pir::load_bytecode("rosella/core.pbc");
    pir::load_bytecode("rosella/harness.pbc");
}

my @argv := pir::getinterp__P()[2];
my $dummy := pir::shift__PP(@argv);

my $factory := Rosella::construct(Rosella::Harness::TestRun::Factory);
my $harness := Rosella::construct(Rosella::Harness);
my $testview := $harness.default_view();

my @test_runs := [];

if (pir::elements(@argv)) {
    for @argv -> $dir {
        $factory.add_test_dirs("NQP", "t/$dir", :recurse(1));
        my $run := $factory.create();
        pir::push(@test_runs, $run);
        $testview.add_run($run, 0);
    }
} else {
    # Core tests (If these fail, we don't attempt anything else)
    $factory.add_test_dirs("NQP",
        "t/core"
    );
    my $run := $factory.create();
    pir::push(@test_runs, $run);
    $testview.add_run($run, 0);

    # Stable library tests
    $factory.add_test_dirs("NQP",
        "t/tap_harness",    # "harness", can't shadow t/harness program
        "t/test",
        "t/action",
        "t/container",
        "t/event",
        "t/prototype",
        "t/query",
        "t/path",
        "t/proxy",
        "t/mockobject",
        "t/memoize",
        "t/filesystem",
        :recurse(1)
    );
    $run := $factory.create();
    pir::push(@test_runs, $run);
    $testview.add_run($run, 0);

    # Unstable library tests
    $factory.add_test_dirs("NQP",
        "t/string",
        :recurse(1)
    );
    $run := $factory.create();
    pir::push(@test_runs, $run);
    $testview.add_run($run, 0);
}

for @test_runs -> $run {
    my $result := $harness.run($run, $testview);
    if (!$result) {
        $testview.show_results();
        pir::exit(1);
    }
}
$testview.show_results();
pir::exit(0);
