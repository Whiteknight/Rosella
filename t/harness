INIT {
    my $core := pir::load_bytecode__PS("rosella/core.pbc");
    Rosella::initialize_rosella("harness");
}

sub core_tests() {
    my %h := {};
    %h{"core"} := "NQP";
    %h{"winxed_test"} := "Winxed";
    %h;
}

sub library_tests() {
    my %h := {};
    %h{"action"} := "NQP";
    %h{"commandline"} := "Winxed";
    %h{"dumper"} := "Winxed";
    %h{"filesystem"} := "NQP";
    %h{"memoize"} := "NQP";
    %h{"mockobject"} := "NQP";
    %h{"path"} := "NQP";
    %h{"proxy"} := "NQP";
    %h{"query"} := "NQP";
    %h{"random"} := "Winxed";
    %h{"string"} := "NQP";
    %h{"tap_harness"} := "Winxed";
    %h{"template"} := "Winxed";
    %h{"test"} := "NQP";
    %h{"random"} := "Winxed";
    %h;
}

sub unstable_tests() {
    my %h := {};
    %h{"container"} := "Winxed";
    %h{"event"} := "Winxed";
    %h{"prototype"} := "NQP";
    %h{"decorate"} := "Winxed";
    %h;
}

sub all_tests() {
    my %a := core_tests();
    my %b := library_tests();
    my %c := unstable_tests();
    for %b { %a{$_} := %b{$_}; }
    for %c { %a{$_} := %c{$_}; }
    %a;
}

my @argv := pir::getinterp__P()[2];
my $dummy := pir::shift__PP(@argv);
my $harness := Rosella::construct(Rosella::Harness);

if (pir::elements(@argv)) {
    my %all_tests := all_tests();
    for @argv -> $dir {
        $harness.add_test_dirs(%all_tests{$dir}, "t/$dir", :recurse(1)).setup_test_run(:sort(1));
    }
} else {
    # Core tests (If these fail, we don't attempt anything else)
    my %core_dirs := core_tests();
    for %core_dirs { $harness.add_test_dirs(%core_dirs{$_}, "t/$_", :recurse(1)); }
    $harness.setup_test_run(:sort(1));

    # Stable Library Tests
    my %lib_dirs := library_tests();
    for %lib_dirs { $harness.add_test_dirs(%lib_dirs{$_}, "t/$_", :recurse(1)); }
    $harness.setup_test_run(:sort(1));

    # Unstable Library Tests
    my %unstable_dirs := unstable_tests();
    for %unstable_dirs { $harness.add_test_dirs(%unstable_dirs{$_}, "t/$_", :recurse(1)); }
    $harness.setup_test_run(:sort(1));
}

my $result := $harness.run();
$harness.show_results();
if (!$result) {
    pir::exit(1);
}

